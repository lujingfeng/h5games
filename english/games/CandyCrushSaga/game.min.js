/// <reference path="references.ts" />

var StringManager = (function () {
    function StringManager() {
        this.container = new createjs.Container();
        this.strings = new Object();
        this.allStrings = null;
    }
    StringManager.getInstance = function () {

       LBShare.showAd({pos: 'banner', hide: true });
        LBShare.showAd({pos: 'top', hide: true });
        LBShare.showAd({pos: 'footer', hide: true }); 

        return StringManager.g_instance;
    };

    StringManager.prototype.getString = function (string_id) {
        return this.strings[string_id];
    };

    StringManager.prototype.loadStrings = function () {
        this.allStrings = g_strings;
    };

    StringManager.prototype.setLanguage = function (lang) {
        this.strings = this.allStrings[lang];
    };
    StringManager.g_instance = new StringManager();

    StringManager.STRING_REMOVE = "STRING_REMOVE";
    StringManager.STRING_CLEAR = "STRING_CLEAR";
    return StringManager;
})();
/// <reference path="references.ts" />
var SoundManager = (function () {
    function SoundManager() {
        this.soundEnabled = true;
        this.initiliazed = false;
        this.musicInstance = null;
        this.focus = true;
        //  dirty hack
        this.wasMusicPlay = false;
    }
    SoundManager.prototype.onLostFocus = function () {
        if (this.focus) {
            this.focus = false;

            if (this.soundEnabled) {
                if (this.musicInstance) {
                    try  {
                        this.musicInstance.stop();
                    } catch (e) {
                    }
                }
                this.wasMusicPlay = false;
            }
        }
    };

    SoundManager.prototype.onFocus = function () {
        if (!this.focus) {
            this.focus = true;

            this.playMusic();
        }
    };

    SoundManager.prototype.init = function () {
        if (!this.initiliazed) {
            try  {
                if (!createjs.Sound.initializeDefaultPlugins()) {
                    return;
                }
            } catch (e) {
            }

            this.initiliazed = true;
        }
    };

    SoundManager.prototype.isSoundEnabled = function () {
        return this.soundEnabled;
    };

    SoundManager.prototype.setSoundEnabled = function (enabled) {
        this.soundEnabled = enabled;

        if (!enabled) {
            if (this.musicInstance) {
                try  {
                    this.musicInstance.stop();
                } catch (e) {
                }
            }

            this.wasMusicPlay = false;
        } else {
            this.playMusic();
        }
    };

    SoundManager.prototype.play = function (name) {
        try  {
            if (this.initiliazed && this.soundEnabled) {
                try  {
                    return createjs.Sound.play(name, createjs.Sound.INTERRUPT_NONE, 0, 0, 0, 1);
                } catch (e) {
                }
            }
        } catch (e) {
            //  hz
        }

        return null;
    };

    SoundManager.prototype.playMusic = function () {
        if (this.initiliazed && this.soundEnabled) {
            if (!this.wasMusicPlay) {
                this.wasMusicPlay = true;

                try  {
                    this.musicInstance = createjs.Sound.play(SoundManager.SOUND_MUSIC, createjs.Sound.INTERRUPT_NONE, 0, 0, -1, 1);

                    //  bla bla
                    if (this.musicInstance.playState == "playFailed") {
                        this.wasMusicPlay = false;
                        return null;
                    }
                } catch (e) {
                    return null;
                }

                return this.musicInstance;
            }
        }

        return null;
    };
    SoundManager.g_instance = new SoundManager();

    SoundManager.SOUND_MUSIC = "music";
    SoundManager.SOUND_CLICK = "click";
    SoundManager.SOUND_MATCH_1 = "match_1";
    SoundManager.SOUND_MATCH_2 = "match_2";
    SoundManager.SOUND_MATCH_3 = "match_3";
    SoundManager.SOUND_MATCH_4 = "match_4";
    SoundManager.SOUND_MATCH_5 = "match_5";
    SoundManager.SOUND_DROP_1 = "drop_1";
    SoundManager.SOUND_DROP_2 = "drop_2";
    SoundManager.SOUND_DROP_3 = "drop_3";
    SoundManager.SOUND_LINE = "line";
    SoundManager.SOUND_KILL_COLOR = "kill_color";
    SoundManager.SOUND_LOSE = "lose";
    SoundManager.SOUND_BOOM = "boom";
    SoundManager.SOUND_AWESOME = "awesome";
    SoundManager.SOUND_EXCHANGE = "exchange";
    SoundManager.SOUND_WIN = "win";
    return SoundManager;
})();
/// <reference path="references.ts" />

var StateManager = (function () {
    function StateManager(manifest) {
        var _this = this;
        this.statesConstainer = new createjs.Container();
        this.isMouseDown = false;
        this.timeDevider = 1;
        this.lastTime = 0;
        StateManager.g_instance = this;

        this.states = Array();

        //  create stage and point it to the canvas:
        this.canvas = document.getElementById("canvas");

        //  check to see if we are running in a browser with touch support
        this.stage = new createjs.Stage(this.canvas);
        this.stage.autoClear = true;

        //  enable touch interactions if supported on the current device:
        createjs.Touch.enable(this.stage);

        //  enabled mouse over / out events
        this.stage.enableMouseOver(5);

        createjs.Ticker.setFPS(60);

        createjs.Ticker.addEventListener("tick", function (e) {
            return _this.update(e);
        });

        if (Constants.DEBUG_MODE) {
            document.onkeydown = function (e) {
                return _this.onKeyDown(e);
            };
            document.onkeyup = function (e) {
                return _this.onKeyUp(e);
            };
        }

        var asset_manager = new AssetsManager(manifest);
        this.stage.addChild(asset_manager);
        asset_manager.addEventListener(Constants.LOAD_COMPLETE, function (e) {
            return _this.allAssetsLoaded(e);
        });
        asset_manager.startDownLoad();

        this.stage.addChild(this.statesConstainer);

        Constants.PIXEL_RATIO = (window.devicePixelRatio ? window.devicePixelRatio : 1);

        if (Constants.g_isPC) {
            window.onresize = (function (e) {
                return _this.onResize(e);
            });
            this.onResize(null);
        } else {
            if (viewporter.ACTIVE) {
                window.addEventListener('viewportready', function () {
                    return _this.onOrientationChanged();
                });
                window.addEventListener('viewportchange', function () {
                    return _this.onOrientationChanged();
                });
            } else {
                window.addEventListener("orientationchange", function () {
                    return _this.onOrientationChanged();
                });
            }

            this.onOrientationChanged();
        }
    }
    StateManager.prototype.isLandscape = function () {
        if (Constants.g_isPC) {
            return false;
        }

        return viewporter.isLandscape();
    };

    StateManager.prototype.allAssetsLoaded = function (event) {
        var _this = this;
        event.target.removeEventListener(Constants.LOAD_COMPLETE, this.allAssetsLoaded);

        this.stage.addEventListener(Constants.MOUSE_MOVE, (function (e) {
            return _this.handleMouse(e);
        }));
        this.stage.addEventListener(Constants.MOUSE_DOWN, (function (e) {
            return _this.handleMouse(e);
        }));
        this.stage.addEventListener(Constants.MOUSE_UP, (function (e) {
            return _this.handleMouse(e);
        }));

        StringManager.getInstance().loadStrings();

        try  {

            var lang = SG.lang;

            StringManager.getInstance().setLanguage(lang);

            SG_Hooks.setOrientationHandler(function (e) {
                StateManager.g_instance.onOrientationChanged();
            });

            SG_Hooks.setResizeHandler(function (w, h) {
                if (w && h) {
                    Constants.g_wasSetSize = true;

                    Constants.W = w;
                    Constants.H = h;

                    if (Constants.g_isPC) {
                        StateManager.g_instance.onResize(null);
                    } else {
                        StateManager.g_instance.onOrientationChanged();
                    }
                }
            });
        } catch (e) {
            console.log("SG_Hooks error");
        }

        if (window.onpagehide) {
            window.onpagehide = (function (e) {
                return _this.onLostFocus(e);
            });
        }
        if (window.onblur) {
            window.onblur = (function (e) {
                return _this.onLostFocus(e);
            });
        }
        if (window.onpageshow) {
            window.onpageshow = (function (e) {
                return _this.onFocus(e);
            });
        }
        if (window.onfocus) {
            window.onfocus = (function (e) {
                return _this.onFocus(e);
            });
        }

        if (AssetsManager.g_instance.parent) {
            AssetsManager.g_instance.parent.removeChild(AssetsManager.g_instance);
        }

        GameData.getInstance().load();

        this.pushState(new MainMenuState());

        if (this.isLandscape()) {
            this.pushState(new PortraitLockState());
        }
    };

    StateManager.prototype.update = function (event) {
        try  {
            if (this.states.length != 0) {
                var top_state = this.states[this.states.length - 1];

                if (!top_state.isInitiliazed()) {
                    top_state.init();
                }

                var tm = createjs.Ticker.getTime();
                var delta = (tm - this.lastTime);
                this.lastTime = tm;

                top_state.update(delta * 0.001 / this.timeDevider);
            }
        } catch (e) {
            console.log(e, "statemanager::update");
        }

        /*try  {*/
            this.stage.update(event);
        /*} catch (e) {
            this.onOrientationChanged();    //cheat
        }*/
    };

    StateManager.prototype.changeState = function (game_state) {
        while (this.states.length != 0) {
            this.popState();
        }

        this.pushState(game_state);
    };

    StateManager.prototype.pushState = function (game_state) {
        this.states.push(game_state);
        this.statesConstainer.addChild(game_state);
    };

    StateManager.prototype.popState = function () {
        if (this.states.length != 0) {
            this.states[this.states.length - 1].cleanup();
            this.statesConstainer.removeChild(this.states[this.states.length - 1]);
            this.states.pop();

            if (this.states.length != 0) {
                this.states[this.states.length - 1].resume();
            }
        }
    };

    StateManager.getInnerWidth = function () {
        if (Constants.g_isPC) {
            return window.innerWidth;
        }

        return window.innerWidth;
    };

    StateManager.getInnerHeight = function () {
        if (Constants.g_isPC) {
            return window.innerHeight;
        }

        return window.innerHeight;
    };

    StateManager.prototype.onResize = function (e) {
        if (!Constants.g_wasSetSize) {
            Constants.W = StateManager.getInnerWidth();
            Constants.H = StateManager.getInnerHeight();
        }

				var scaleH = Constants.H / Constants.ASSETS_HEIGHT * Constants.PIXEL_RATIO;
				var scaleW = Constants.W / Constants.ASSETS_WIDTH * Constants.PIXEL_RATIO;
				
        Constants.SCREEN_SCALE = scaleH < scaleW ? scaleH : scaleW;

        Constants.SCREEN_HEIGHT = Constants.H / Constants.SCREEN_SCALE * Constants.PIXEL_RATIO;

        this.canvas.width = Constants.ASSETS_WIDTH * Constants.SCREEN_SCALE;
        this.canvas.height = Constants.ASSETS_HEIGHT * Constants.SCREEN_SCALE;
        this.canvas.style.width = this.canvas.width + "px";
        this.canvas.style.height = this.canvas.height + "px";

        this.canvas.style.marginLeft = (Constants.W - this.canvas.width) / 2 + "px";
				this.canvas.style.marginTop = (Constants.H - this.canvas.height) / 2 + "px";

        this.statesConstainer.scaleX = this.statesConstainer.scaleY = Constants.SCREEN_SCALE;
    };

    StateManager.prototype.onOrientationChanged = function () {
        if (!Constants.g_wasSetSize) {
            Constants.W = StateManager.getInnerWidth();
            Constants.H = StateManager.getInnerHeight();
        }

        var is_landscape = this.isLandscape();

        var w = Constants.W;
        var h = Constants.H;

        this.canvas.width = w * Constants.PIXEL_RATIO;
        this.canvas.height = h * Constants.PIXEL_RATIO;
        this.canvas.style.width = w + "px";
        this.canvas.style.height = h + "px";

        if (is_landscape) {
            Constants.SCREEN_SCALE = h / Constants.ASSETS_HEIGHT * Constants.PIXEL_RATIO;

            Constants.SCREEN_HEIGHT = h;
        } else {
            Constants.SCREEN_SCALE = w / Constants.ASSETS_WIDTH * Constants.PIXEL_RATIO;

            Constants.SCREEN_HEIGHT = h / Constants.SCREEN_SCALE * Constants.PIXEL_RATIO;
        }

        this.statesConstainer.scaleX = this.statesConstainer.scaleY = Constants.SCREEN_SCALE;

        if (this.states.length != 0) {
            this.states[this.states.length - 1].onOrientationChanged(is_landscape);
        }

        if (AssetsManager.g_instance.parent) {
            AssetsManager.g_instance.onOrientationChanged(is_landscape);
        }
    };

    StateManager.prototype.onLostFocus = function (e) {
        SoundManager.g_instance.onLostFocus();
    };

    StateManager.prototype.onFocus = function (e) {
        SoundManager.g_instance.onFocus();
    };

    StateManager.prototype.isMouseDownNow = function () {
        return this.isMouseDown;
    };

    StateManager.prototype.handleMouse = function (event) {
        event.preventDefault();

        if (this.states.length == 0) {
            return;
        }

        var top_state = this.states[this.states.length - 1];

        switch (event.type) {
            case Constants.MOUSE_DOWN:
                 {
                    SoundManager.g_instance.init();
                    SoundManager.g_instance.playMusic();

                    this.isMouseDown = true;
                    top_state.onMouseDown(event.stageX / Constants.SCREEN_SCALE, event.stageY / Constants.SCREEN_SCALE);
                }
                break;

            case Constants.MOUSE_UP:
                 {
                    this.isMouseDown = false;
                    top_state.onMouseUp(event.stageX / Constants.SCREEN_SCALE, event.stageY / Constants.SCREEN_SCALE);
                }
                break;

            case Constants.MOUSE_MOVE:
                 {
                    if (this.isMouseDown) {
                        top_state.onMouseMove(event.stageX / Constants.SCREEN_SCALE, event.stageY / Constants.SCREEN_SCALE);
                    }
                }
                break;
        }

        DNButton.wasActionThisFrame = false;
    };

    StateManager.prototype.onKeyDown = function (event) {
        if (Constants.DEBUG_MODE) {
            switch (event.keyCode) {
                case 65:
                     {
                        this.timeDevider = 5;
                    }
                    break;

                case 68:
                     {
                        this.timeDevider = 10;
                    }
                    break;
            }
        }
    };

    StateManager.prototype.onKeyUp = function (event) {
        if (Constants.DEBUG_MODE) {
            switch (event.keyCode) {
                case 65:
                     {
                        this.timeDevider = 1;
                    }
                    break;

                case 68:
                     {
                        this.timeDevider = 1;
                    }
                    break;
            }
        }
    };
    return StateManager;
})();
/// <reference path="references.ts" />
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
var GameState = (function (_super) {
    __extends(GameState, _super);
    function GameState() {
        _super.call(this);
        this.liveTime = 0.0;
        this.gameObjects = new Array();
        this.gui = new Array();
        this.newGameObjects = new Array();
        this.initiliazed = false;
        this.consoleH = 200;
    }
    GameState.prototype.consolePrint = function (text) {
        //var label: createjs.Text = new createjs.Text(text, "bold 16px Arial", "#000000");
        var label = new createjs.Text(text, "bold 35px Arial", "#000000");
        this.addChild(label);
        label.x = 50;
        label.y = this.consoleH;

        this.consoleH += 40;
    };

    GameState.prototype.isInitiliazed = function () {
        return this.initiliazed;
    };

    GameState.prototype.onMouseDown = function (x, y) {
        for (var i = 0; i < this.gui.length; i++) {
            this.gui[i].onMouseDown(x, y);
        }
    };

    GameState.prototype.onMouseMove = function (x, y) {
        for (var i = 0; i < this.gui.length; i++) {
            this.gui[i].onMouseMove(x, y);
        }
    };

    GameState.prototype.onMouseUp = function (x, y) {
        for (var i = 0; i < this.gui.length; i++) {
            this.gui[i].onMouseUp(x, y);
        }
    };

    GameState.prototype.addGuiObject = function (gui_object) {
        this.gui.push(gui_object);

        this.addGameObject(gui_object);
    };

    GameState.prototype.update = function (dt) {
        this.liveTime += dt;

        this.newGameObjects = new Array();

        for (var i = 0; i < this.gameObjects.length; i++) {
            var obj = this.gameObjects[i];

            obj.update(dt);

            if (obj.isDead()) {
                obj.onDead();
            } else {
                this.newGameObjects.push(obj);
            }
        }

        this.gameObjects = this.newGameObjects;
    };

    GameState.prototype.addGameObject = function (obj) {
        this.gameObjects.push(obj);
    };

    GameState.prototype.addGameObjectAt = function (obj, layer) {
        this.gameObjects.push(obj);

        if (layer) {
            layer.addChild(obj);
        }
    };

    GameState.prototype.addGameObjectAtPos = function (obj, layer, x, y) {
        this.gameObjects.push(obj);

        if (layer) {
            layer.addChild(obj);

            obj.x = x;
            obj.y = y;
        }
    };

    GameState.prototype.cleanup = function () {
    };

    GameState.prototype.resume = function () {
    };

    GameState.prototype.init = function () {
        this.initiliazed = true;
    };

    GameState.prototype.onOrientationChanged = function (landscape) {
        if (landscape) {
            StateManager.g_instance.pushState(new PortraitLockState());
        }
    };
    return GameState;
})(createjs.Container);
/// <reference path="references.ts" />
var Constants = (function () {
    function Constants() {
    }
    Constants.W = -1;
    Constants.H = -1;
    Constants.g_wasSetSize = false;

    Constants.g_DEBUG = false;

    Constants.LOAD_COMPLETE = "LOAD_COMPLETE";

    Constants.MOUSE_DOWN = "stagemousedown";
    Constants.MOUSE_UP = "stagemouseup";
    Constants.MOUSE_MOVE = "stagemousemove";

    Constants.CELL_SIZE = 85;

    Constants.FIELD_OFFSET_X = 9;
    Constants.FIELD_OFFSET_Y = 250;

    Constants.EXCHANGE_TIME = 0.220;

    Constants.MATCH_TIME = 0.25;

    Constants.GRAVITY_ACC = 2500;

    Constants.ASSETS_WIDTH = 700;
    Constants.ASSETS_HEIGHT = 900;

    Constants.PIXEL_RATIO = 1;

    Constants.SCREEN_HEIGHT = 900;

    Constants.SCREEN_SCALE = 1;

    Constants.DPI = -1;

    Constants.g_isPC = true;

    Constants.DEBUG_MODE = false;

    Constants.COLOR_PINK = "#ffE5E5";

    Constants.COLOR_BLUE = "#619CC4";

    Constants.IMAGE_BUTTON_CLOSE = "button_close";
    Constants.IMAGE_BUTTON_SOUND_ON = "button_sound_on";
    Constants.IMAGE_BUTTON_SOUND_OFF = "button_sound_off";
    Constants.IMAGE_BUTTON_EXIT = "button_exit";
    Constants.IMAGE_BUTTON_PAUSE = "button_pause";
    Constants.IMAGE_BUTTON_RESTART = "button_restart";
    //Constants.IMAGE_BUTTON_CREDITS = "button_credits";
    Constants.IMAGE_BUTTON_PLAY = "button_play";
    Constants.IMAGE_AWESOME = "awesome";
    Constants.IMAGE_SUPERB = "superb";
    Constants.IMAGE_SHINING = "shining";
    Constants.IMAGE_DROP = "drop";
    Constants.IMAGE_BACK = "back";
    Constants.IMAGE_DONUT = "donut";
    Constants.IMAGE_ARROW_BONUS_VERT = "arrow_bonus_vert";
    Constants.IMAGE_ARROW_BONUS_HOR = "arrow_bonus_hor";
    Constants.IMAGE_BOMB = "bomb_bonus";
    Constants.IMAGE_MESSAGE_WINDOW = "message_window";
    Constants.IMAGE_HINT_ARROW = "hint_arrow";
    Constants.IMAGE_GAMEOVER_CAPTION = "gameover_caption";
    Constants.IMAGE_TITLE_MAIN_MENU_BACK = "main_menu_back";
    Constants.IMAGE_SICKLE = "sickle";
    Constants.IMAGE_ROTATE = "rotate";
    Constants.IMAGE_BIG_SHINING = "big_shining";
    Constants.IMAGE_POINTS_CONTROL_BIG = "point_control_big";
    Constants.IMAGE_POINTS_CONTROL_SMALL = "point_control_small";
    Constants.IMAGE_LEVEL_BUTTON = "level_button";
    Constants.IMAGE_DIRT = "dirt";
    Constants.IMAGE_GUI = "gui";
    Constants.IMAGE_LOCK = "lock";
    Constants.IMAGE_OUT_OF_MOVES = "out_of_moves";
    Constants.IMAGE_WIN_CAPTION = "win_caption";
    Constants.IMAGE_STONE_HEART = "stone_heart";

    Constants.IMAGE_TASK_PANEL = "task_panel";

    Constants.IMAGE_HEART_PARTICLE = "heart_particle";
    Constants.IMAGE_WIN_STRINGS = "win_strings";

    Constants.IMAGE_GLOBAL_MAP = "global_map";

    Constants.IMAGE_CELL = "cell";

    Constants.IMAGE_BORDER_SIDE = "border_side";
    Constants.IMAGE_BORDER_CORNER = "border_corner";

    Constants.IMAGE_SELECT_LEVEL_BACK = "select_level_back";

    Constants.IMAGE_BUTTON_MORE_GAMES = "button_more_games";
    return Constants;
})();
/// <reference path="references.ts" />
var AssetsManager = (function (_super) {
    __extends(AssetsManager, _super);
    function AssetsManager(manifest) {
        _super.call(this);
        this.loadingShape = new createjs.Shape();
        this.loadingShapeBack1 = new createjs.Shape();
        this.loadingShapeBack2 = new createjs.Shape();
        this.shader = null;
        this.maxWidth = 100;
        this.deltaY = 50;
        this.gameplaySprites = null;
        this.mainMenuSprites = null;

        AssetsManager.g_instance = this;

        this.maxWidth = 300;

        document.getElementById("loader").className = "loader";
        createjs.EventDispatcher.initialize(AssetsManager.prototype);

        this.manifest = manifest;

        this.shader = new createjs.Shape();
        this.shader.graphics.beginFill("#4aa4c2");
        this.shader.graphics.drawRect(0, 0, this.maxWidth * 1.2, 130);
        this.shader.graphics.endFill();
        this.addChild(this.shader);

        this.labelPercentDownload = new createjs.Text("100%", "bold 45px Arial", "#ffffff");
        this.labelPercentDownload.textAlign = "center"; /// need left
        this.addChild(this.labelPercentDownload);

        this.deltaY = this.labelPercentDownload.getBounds().height;

        //--------------
        this.loadingShapeBack1.graphics.beginFill("#4a7dc2");
        this.loadingShapeBack1.graphics.drawRect(0 - 4, 0 - 4, this.maxWidth + 8, this.deltaY + 8);
        this.loadingShapeBack1.graphics.endFill();
        this.addChild(this.loadingShapeBack1);

        this.loadingShape.graphics.beginFill("#ffffff");
        this.loadingShape.graphics.drawRect(0, 0, this.maxWidth, this.deltaY);
        this.loadingShape.graphics.endFill();
        this.addChild(this.loadingShape);
        this.loadingShape.scaleX = 0;

        this.onOrientationChanged(StateManager.g_instance.isLandscape());
    }
    AssetsManager.prototype.startDownLoad = function () {
        var _this = this;
        this.loader = new createjs.LoadQueue();

        this.loader.addEventListener("progress", function (e) {
            return _this.handleProgress(e);
        });
        this.loader.addEventListener("complete", function (e) {
            return _this.handleComplete(e);
        });

        createjs.Sound.registerManifest(this.manifest, ""); // changed so assets/sound/ doesn repeat on Requests

        //if (createjs.Sound["alternateExtensions"])
        //{
        //    createjs.Sound["alternateExtensions"] = ["mp3"];
        //}
        this.loader.installPlugin(createjs.SoundJS);
        this.loader.loadManifest(this.manifest);
    };

    AssetsManager.prototype.handleProgress = function (event) {
        this.labelPercentDownload.text = (event.loaded * 100).toFixed(1) + "%";

        this.loadingShape.scaleX = event.loaded;
    };

    AssetsManager.prototype.handleComplete = function (event) {
        this.removeChild(this.labelPercentDownload);

        this.dispatchEvent(Constants.LOAD_COMPLETE, this);
        document.getElementById("loader").className = "";
    };

    AssetsManager.prototype.getResult = function (name) {
        return this.loader.getResult(name);
    };

    AssetsManager.prototype.getBitmap = function (name) {
        return new createjs.Bitmap(this.loader.getResult(name));
    };

    AssetsManager.prototype.getCenteredBitmap = function (name) {
        var bitmap = new createjs.Bitmap(this.loader.getResult(name));

        if (!bitmap.image) {
            console.log("ERROR HERE", name);
        }

        bitmap.x = -bitmap.image.width / 2;
        bitmap.y = -bitmap.image.height / 2;

        return bitmap;
    };

    AssetsManager.prototype.getImage = function (name) {
        var bitmap = this.getBitmap(name);
        if (bitmap.getBounds()) {
            return bitmap;
        }

        var sprite = this.getSprite(name);
        if (sprite.getBounds()) {
            return sprite;
        }

        return null;
    };

    AssetsManager.prototype.getCenteredImage = function (name) {
        var image = this.getImage(name);

        image.x = -image.getBounds().width / 2;
        image.y = -image.getBounds().height / 2;

        return image;
    };

    AssetsManager.prototype.getCenteredImageWithProxy = function (name) {
        var proxy = new createjs.Container();

        proxy.addChild(this.getCenteredImage(name));

        return proxy;
    };

    AssetsManager.prototype.getCenteredBitmapWithProxy = function (name) {
        var proxy = new createjs.Container();

        proxy.addChild(this.getCenteredBitmap(name));

        return proxy;
    };

    AssetsManager.prototype.getSprite = function (name) {
        var sprite = new createjs.Sprite(this.gameplaySprites, name);

        sprite.stop();

        return sprite;
    };

    AssetsManager.prototype.getCenteredSprite = function (name) {
        var sprite = this.getSprite(name);

        sprite.x = -sprite.getBounds().width / 2;
        sprite.y = -sprite.getBounds().height / 2;

        return sprite;
    };

    AssetsManager.prototype.onOrientationChanged = function (is_landscape) {
        if (Constants.g_isPC) {
            this.labelPercentDownload.x = Constants.ASSETS_WIDTH / 2;
            this.labelPercentDownload.y = Constants.ASSETS_HEIGHT / 2;
        } else {
            this.labelPercentDownload.x = Constants.W / 2 * Constants.PIXEL_RATIO;
            this.labelPercentDownload.y = Constants.H / 2 * Constants.PIXEL_RATIO;
        }

        this.loadingShape.x = this.labelPercentDownload.x - this.maxWidth / 2;
        this.loadingShape.y = this.labelPercentDownload.y + this.deltaY * 1.5;

        this.loadingShapeBack1.x = this.loadingShape.x;
        this.loadingShapeBack1.y = this.loadingShape.y;

        //  /??
        this.shader.x = this.labelPercentDownload.x - this.maxWidth * 0.6;
        this.shader.y = this.labelPercentDownload.y;
    };
    return AssetsManager;
})(createjs.Container);
/// <reference path="references.ts" />
var GameObject = (function (_super) {
    __extends(GameObject, _super);
    function GameObject() {
        _super.call(this);
        this.liveTime = 0;
        this.killed = false;
    }
    GameObject.prototype.update = function (dt) {
        this.liveTime += dt;
    };

    GameObject.prototype.kill = function () {
        this.killed = true;
    };

    GameObject.prototype.isDead = function () {
        return this.killed;
    };

    GameObject.prototype.onDead = function () {
        //  cleanup here
        if (this.parent) {
            this.parent.removeChild(this);
        }
    };
    return GameObject;
})(createjs.Container);
/// <reference path="references.ts" />
var Chip = (function (_super) {
    __extends(Chip, _super);
    function Chip(id, x_index, y_index, spawn_y_pos, spawn_delay) {
        _super.call(this);
        this.STATE_NORMAL = "STATE_NORMAL";
        this.STATE_EXCHANGE = "STATE_EXCHANGE";
        this.STATE_SHIFT_DOWN = "STATE_SHIFT_DOWN";
        this.STATE_MATCH = "STATE_MATCH";
        this.wasClear = false;
        this.state = null;
        this.rotationSpeed = 0;
        this.selected = false;
        this.stateTime = 0;
        this.rotationTimeOffset = Utils.RandomRange(0, 20);
        this.bonusType = null;
        this.jellyAnim = false;
        this.doubleMatched = false;
        this.canBeMatched = true;
        this.matchReason = null;
        this.hole = false;
        this.stoneHeart = false;

        this.spawnYPos = spawn_y_pos;

        this.setIncexes(x_index, y_index);

        if (id != 9 && id != 0) {
            this.chipPicture = AssetsManager.g_instance.getImage("cake_" + id);
            this.addChild(this.chipPicture);
            this.chipPicture.x = -this.chipPicture.getBounds().width / 2;
            this.chipPicture.y = -Constants.CELL_SIZE;
        }

        this.colorID = id;

        this.setState(Chip.STATE_SPAWN_NEW);
        this.spawnDelay = spawn_delay;

        if (id == 9) {
            this.convertToStoneHeart();
        }
    }
    Chip.prototype.getMatchReason = function () {
        return this.matchReason;
    };

    Chip.prototype.isHorizontal = function () {
        return this.horizontal;
    };

    Chip.prototype.getBonusType = function () {
        return this.bonusType;
    };

    Chip.prototype.getColorID = function () {
        return this.colorID;
    };

    Chip.prototype.getIndeces = function () {
        return new createjs.Point(this.indexX, this.indexY);
    };

    Chip.prototype.getIndexX = function () {
        return this.indexX;
    };

    Chip.prototype.getIndexY = function () {
        return this.indexY;
    };

    Chip.prototype.setIncexes = function (x, y) {
        this.indexX = x;
        this.indexY = y;
    };

    Chip.prototype.isMatching = function () {
        return this.state == this.STATE_MATCH;
    };

    Chip.prototype.update = function (dt) {
        this.stateTime += dt;

        switch (this.state) {
            case this.STATE_NORMAL:
                 {
                    //  ???
                    if (this.stoneHeart) {
                        break;
                    }

                    var tm = this.stateTime * 9;

                    var scale = Math.sin(tm) * 0.13;

                    this.scaleX = 1 + scale;
                    this.scaleY = 1 - scale;

                    if (tm >= Math.PI * 1.0) {
                        this.scaleX = this.scaleY = 1;
                    }

                    //  ???
                    this.canBeMatched = true;
                }
                break;

            case this.STATE_EXCHANGE:
                 {
                    if (this.stateTime >= Constants.EXCHANGE_TIME) {
                        this.setState(this.STATE_NORMAL);
                    }
                }
                break;

            case Chip.STATE_SPAWN_NEW:
                 {
                    this.spawnDelay -= dt;

                    if (this.spawnDelay < 0) {
                        this.speed.y += this.acceleration.y * dt;

                        this.x += dt * this.speed.x;
                        this.y += dt * this.speed.y;

                        if (this.y >= this.spawnYPos) {
                            this.y = this.spawnYPos;
                            this.setState(this.STATE_NORMAL);

                            PlayState.g_instance.onShiftEnded();
                        }
                    }
                }
                break;

            case this.STATE_SHIFT_DOWN:
                 {
                    this.speed.y += this.acceleration.y * dt;

                    this.x += dt * this.speed.x;
                    this.y += dt * this.speed.y;

                    if (this.y >= this.spawnYPos) {
                        this.y = this.spawnYPos;
                        this.setState(this.STATE_NORMAL);

                        PlayState.g_instance.onShiftEnded();
                    }
                    //  restore form
                }
                break;

            case Chip.STATE_FALL_DOWN:
                 {
                    this.speed.y += this.acceleration.y * dt;

                    this.x += dt * this.speed.x;
                    this.y += dt * this.speed.y;

                    this.rotation += this.rotationSpeed * dt;

                    if (this.y >= 1000) {
                        this.kill();
                    }
                }
                break;

            case this.STATE_MATCH:
                 {
                    this.scaleY = 1.0 - this.stateTime * 1.5;
                    this.scaleX = 1.0 + this.stateTime * 1.5;

                    this.alpha = 1.0 - this.stateTime / Constants.MATCH_TIME;

                    if (this.stateTime >= Constants.MATCH_TIME / 2 && !this.wasClear) {
                        PlayState.g_instance.addPointsAt(this, this.matchReason);

                        PlayState.g_instance.clearCell(this);
                        this.wasClear = true;
                    }

                    if (this.stateTime >= Constants.MATCH_TIME) {
                        this.kill();
                    }
                }
                break;
        }

        if (this.shiningCircle) {
            this.shiningCircle.rotation += dt * 20;
        }
    };

    Chip.prototype.setState = function (state) {
        if (state == this.state) {
            return;
        }

        this.stateTime = 0;

        this.state = state;

        switch (state) {
            case this.STATE_NORMAL:
                this.jellyAnim = true;
                break;

            case this.STATE_EXCHANGE:
                break;

            case this.STATE_SHIFT_DOWN:
                //  restore form
                createjs.Tween.get(this, { loop: false }).to({ scaleX: 1.0, scaleY: 1.0 }, 170, createjs.Ease.linear);
                break;

            case Chip.STATE_SPAWN_NEW:
                 {
                    this.speed = new createjs.Point(0, 500);
                    this.acceleration = new createjs.Point(0, Constants.GRAVITY_ACC);
                }
                break;
        }
    };

    Chip.prototype.exchange = function (new_index_x, new_index_y) {
        this.deselect();

        this.setState(this.STATE_EXCHANGE);

        this.indexX = new_index_x;
        this.indexY = new_index_y;
    };

    Chip.prototype.shiftDown = function (new_index_y, new_y) {
        this.speed = new createjs.Point(0, -250);

        this.deselect();

        this.indexY = new_index_y;

        this.spawnYPos = new_y;

        this.setState(this.STATE_SHIFT_DOWN);
    };

    Chip.prototype.match = function (reason) {
        if (this.stoneHeart) {
            this.fallDown();
            return;
        }

        if (this.isHole()) {
            return;
        }

        if (this.state == this.STATE_MATCH) {
            this.doubleMatched = true;
        }

        if (!this.canBeMatched) {
            return;
        }

        this.matchReason = reason;

        this.setState(this.STATE_MATCH);
    };

    Chip.prototype.isDoubleMatched = function () {
        return this.doubleMatched;
    };

    Chip.prototype.select = function () {
        this.stateTime = 0;
        this.jellyAnim = true;

        this.selected = true;
    };

    Chip.prototype.deselect = function () {
        if (this.selected) {
            this.scaleX = this.scaleY = 1.0;

            this.selected = false;
        }
    };

    Chip.prototype.isNormal = function () {
        return this.state == this.STATE_NORMAL || this.state == Chip.STATE_HOLE;
    };

    Chip.prototype.getState = function () {
        return this.state;
    };

    Chip.prototype.isBonus = function () {
        return this.bonusType != null;
        ;
    };

    Chip.prototype.convertToBonus = function (type, horizontal) {
        this.horizontal = horizontal;

        this.bonusType = type;

        this.removeAllChildren();

        if (type == Chip.BONUS_5) {
            var bitmap = AssetsManager.g_instance.getImage("donut");
            this.addChild(bitmap);
            bitmap.x = -bitmap.getBounds().width / 2;
            bitmap.y = -bitmap.getBounds().height;
        }

        if (type == Chip.BONUS_4) {
            var bitmap = AssetsManager.g_instance.getImage(this.horizontal ? Constants.IMAGE_ARROW_BONUS_HOR : Constants.IMAGE_ARROW_BONUS_VERT);
            this.addChild(bitmap);
            bitmap.x = -bitmap.getBounds().width / 2;
            bitmap.y = -bitmap.getBounds().height;
        }

        if (type == Chip.BONUS_BOMB) {
            var bitmap = AssetsManager.g_instance.getImage(Constants.IMAGE_BOMB);
            this.addChild(bitmap);
            bitmap.x = -bitmap.getBounds().width / 2;
            bitmap.y = -bitmap.getBounds().height;
        }

        if (this.state != Chip.STATE_SPAWN_NEW) {
            PlayState.g_instance.addConverToBonusEffect(this);
        }

        this.canBeMatched = false;

        //  ???
        PlayState.g_instance.takeStockMatch(this);

        this.colorID = -1;

        this.setState(this.STATE_NORMAL);

        //
        PlayState.g_instance.tryClearDirt(this.indexX, this.indexY);
        PlayState.g_instance.tryClearStoneHeart(this.indexX, this.indexY);
    };

    Chip.prototype.fallDown = function () {
        if (this.state == Chip.STATE_FALL_DOWN) {
            return;
        }

        this.setState(Chip.STATE_FALL_DOWN);

        this.chipPicture.y = -this.chipPicture.getBounds().height / 2;
        this.y -= this.chipPicture.getBounds().height / 2;

        this.speed = new createjs.Point(Utils.RandomRange(-100, 100), -250);

        this.rotationSpeed = Utils.RandomRange(-300, 300);

        //  move front
        PlayState.g_instance.addChild(this);

        if (!this.wasClear) {
            PlayState.g_instance.clearCell(this);
            this.wasClear = true;
        }
    };

    Chip.prototype.isHole = function () {
        return this.hole;
    };

    Chip.prototype.convertToHole = function () {
        this.removeAllChildren();

        this.hole = true;

        this.y = this.spawnYPos;

        this.setState(Chip.STATE_HOLE);

        this.colorID = -1;
    };

    Chip.prototype.convertToStoneHeart = function () {
        this.stoneHeart = true;
        this.colorID = -1;

        var pic_name = Constants.IMAGE_STONE_HEART;

        this.chipPicture = AssetsManager.g_instance.getImage(pic_name);
        this.addChild(this.chipPicture);
        this.chipPicture.x = -this.chipPicture.getBounds().width / 2;

        this.chipPicture.y = -83;
    };

    Chip.prototype.isStoneHeart = function () {
        return this.stoneHeart;
    };
    Chip.BONUS_4 = "BONUS_4";
    Chip.BONUS_5 = "BONUS_5";
    Chip.BONUS_BOMB = "BONUS_BOMB";

    Chip.STATE_SPAWN_NEW = "STATE_SPAWN_NEW";

    Chip.STATE_FALL_DOWN = "STATE_FALL_DOWN";

    Chip.STATE_HOLE = "STATE_HOLE";

    Chip.MATCH_REASON_SIMPLE = "MATCH_REASON_SIMPLE";
    Chip.MATCH_REASON_EXCHANGE_WIHT_BONUS = "MATCH_REASON_EXCHANGE_WIHT_BONUS";
    Chip.MATCH_REASON_BONUS_EFFECT_5 = "MATCH_REASON_BONUS_EFFECT_5";
    Chip.MATCH_REASON_BONUS_EFFECT_4_HOR = "MATCH_REASON_BONUS_EFFECT_4_HOR";
    Chip.MATCH_REASON_BONUS_EFFECT_4_VERT = "MATCH_REASON_BONUS_EFFECT_4_VERT";
    Chip.MATCH_REASON_I_AM_BONUS = "MATCH_REASON_I_AM_BONUS";
    return Chip;
})(GameObject);
/// <reference path="references.ts" />
var Utils = (function () {
    function Utils() {
    }
    Utils.RandomRange = function (from, to) {
        return from + (to - from) * Math.random();
    };

    Utils.RandomRangeInt = function (from, to) {
        return Math.floor(Math.random() * (to - from + 1)) + from;
    };

    Utils.IntToTimeString = function (time) {
        var minutes = Math.floor(time / 60);
        var s_minutes = minutes.toString();

        var seconds = time % 60;
        var s_seconds;

        if (seconds < 10) {
            s_seconds = "0" + seconds;
        } else {
            s_seconds = seconds.toString();
        }

        return s_minutes + "d" + s_seconds;
    };

    Utils.RadToGrad = function (rad) {
        return rad * 180 / Math.PI;
    };

    Utils.GradToRad = function (grad) {
        return grad * Math.PI / 180;
    };

    Utils.IsMobileBrowser = function () {
        if (window["orientation"] != undefined) {
            return true;
        }

        var check = false;
        (function (a) {
            if (/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows (ce|phone)|xda|xiino/i.test(a) || /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(a.substr(0, 4)))
                check = true;
        })(navigator.userAgent || navigator.vendor || window["opera"]);

        return check;

        return false;
    };

    Utils.ScaledOffset = function (val) {
        return (window.devicePixelRatio ? window.devicePixelRatio : 1) * val / Constants.SCREEN_SCALE;
    };

    Utils.GetScoreString = function (score) {
        var str_score = score.toString();

        switch (str_score.length) {
            case 1:
                str_score = "00000" + str_score;
                break;
            case 2:
                str_score = "0000" + str_score;
                break;
            case 3:
                str_score = "000" + str_score;
                break;
            case 4:
                str_score = "00" + str_score;
                break;

            case 5:
                str_score = "0" + str_score;
                break;
        }

        return str_score;
    };
    return Utils;
})();
/// <reference path="references.ts" />
var GameOverState = (function (_super) {
    __extends(GameOverState, _super);
    function GameOverState(round, score) {
        var _this = this;
        _super.call(this);
        this.panel = new createjs.Container();

        //  shading
        this.shader = new createjs.Shape();
        this.shader.graphics.beginFill("#000000");
        this.shader.graphics.drawRect(0, 0, Constants.ASSETS_WIDTH, Constants.SCREEN_HEIGHT);
        this.shader.graphics.endFill();
        this.addChild(this.shader);
        this.shader.alpha = 0;
        this.shaderTween = createjs.Tween.get(this.shader, { loop: false }).wait(400).to({ alpha: 0.4 }, 800, createjs.Ease.linear);

        this.addChild(this.panel);
        this.panel.x = Constants.ASSETS_WIDTH / 2;
        this.panel.y = Constants.SCREEN_HEIGHT / 2;

        var panel = AssetsManager.g_instance.getCenteredImage(Constants.IMAGE_MESSAGE_WINDOW);
        this.panel.addChild(panel);

        var button_restart = new DNButton(Constants.IMAGE_BUTTON_RESTART, function () {
            return _this.onRestartTouch();
        });
        this.panel.addChild(button_restart);
        this.addGuiObject(button_restart);
        button_restart.x = -110;
        button_restart.y = 100;

        var button_exit = new DNButton(Constants.IMAGE_BUTTON_EXIT, function () {
            return _this.onExitTouch();
        });
        this.panel.addChild(button_exit);
        this.addGuiObject(button_exit);
        button_exit.x = +110;
        button_exit.y = 100;

        var caption = AssetsManager.g_instance.getCenteredImageWithProxy(Constants.IMAGE_GAMEOVER_CAPTION);
        this.panel.addChild(caption);
        caption.y = -210;

        //----------------------------------
        var caption_x = -180;
        var digits_x = +180;

        //this.roundLabel = new DNTextField(round.toString());
        //this.panel.addChild(this.roundLabel);
        //this.roundLabel.x = digits_x - this.roundLabel.getWidth();
        //this.roundLabel.y = this.roundCaption.y;
        //this.scoreLabel = new DNTextField(score.toString());
        //this.panel.addChild(this.scoreLabel);
        //this.scoreLabel.x = digits_x - this.scoreLabel.getWidth();
        //this.scoreLabel.y = this.scoreCaption.y;
        //----------------------------------
        this.panel.alpha = 0.0;
        createjs.Tween.get(this.panel, { loop: false }).to({ alpha: 1 }, 200, createjs.Ease.linear);

        this.panel.scaleX = 0.7;
        this.panel.scaleY = 0.7;
        createjs.Tween.get(this.panel, { loop: false }).to({ scaleX: 1, scaleY: 1 }, 400, createjs.Ease.backOut);

        try  {
            SG_Hooks.gameOver(PlayState.g_curLevel, score); // when player dies or ends the game
        } catch (e) {
            console.log("error SG_Hooks.gameOver(PlayState.g_curLevel, score);");
        }
    }
    GameOverState.prototype.onRestartTouch = function () {
        StateManager.g_instance.pushState(new ShadeInCircleState(new PlayState(PlayState.g_curLevel, false)));
    };

    GameOverState.prototype.onExitTouch = function () {
        StateManager.g_instance.pushState(new ShadeInState(new MainMenuState()));
    };
    return GameOverState;
})(GameState);
/// <reference path="references.ts" />
var MainMenuState = (function (_super) {
    __extends(MainMenuState, _super);
    function MainMenuState() {
        var _this = this;
        _super.call(this);
        this.someThing = true;

        this.addChild(AssetsManager.g_instance.getImage(Constants.IMAGE_TITLE_MAIN_MENU_BACK));

        var play_proxy = new createjs.Container();
        this.addChild(play_proxy);
        play_proxy.x = Constants.ASSETS_WIDTH / 2;
        play_proxy.y = 690;
        play_proxy.scaleX = play_proxy.scaleY = 1.35;

        var button_play = new DNButton(Constants.IMAGE_BUTTON_PLAY, function () {
            //console.log("start button pressed");
            SG_Hooks.start();
            //console.log("SG_Hooks triggered!");
            return _this.onPlayTouch();
        });
        play_proxy.addChild(button_play);
        this.addGuiObject(button_play);

        createjs.Tween.get(button_play, { loop: true }).to({ scaleX: +1.05, scaleY: +1.05 }, 150, createjs.Ease.linear).to({ scaleX: +0.95, scaleY: +0.95 }, 300, createjs.Ease.linear).to({ scaleX: 1, scaleY: 1 }, 150, createjs.Ease.linear).wait(4000);
/*
        var button_credits = new DNButton(Constants.IMAGE_BUTTON_CREDITS, function () {
            return _this.onCreditsTouch();
        });
        this.addChild(button_credits);
        this.addGuiObject(button_credits);
        button_credits.x = 550;
        button_credits.y = 700;
*/
        var button_more_games = new DNButton(Constants.IMAGE_BUTTON_MORE_GAMES, function () {
            return _this.onMoreGamesTouch();
        });
        this.addChild(button_more_games);
        this.addGuiObject(button_more_games);
        //button_more_games.x = 150;
        button_more_games.x = -999;
        button_more_games.y = 700;

        //
        this.setSoundButton();

        this.configureYAlign();
    }
    MainMenuState.prototype.configureYAlign = function () {
        if (Constants.g_isPC) {
            return;
        }

        //  aligning
        if (Constants.SCREEN_HEIGHT > Constants.ASSETS_HEIGHT) {
            this.y = (Constants.SCREEN_HEIGHT - Constants.ASSETS_HEIGHT) / 2;

            var bottom_shape = new createjs.Shape();
            bottom_shape.graphics.beginFill("#ffffff");
            bottom_shape.graphics.drawRect(0, Constants.ASSETS_HEIGHT, Constants.ASSETS_WIDTH, Constants.SCREEN_HEIGHT - Constants.ASSETS_HEIGHT + 1);
            bottom_shape.graphics.endFill();
            this.addChild(bottom_shape);

            var top_shape = new createjs.Shape();
            top_shape.graphics.beginFill("#ffffff");
            top_shape.graphics.drawRect(0, Constants.ASSETS_HEIGHT - Constants.SCREEN_HEIGHT, Constants.ASSETS_WIDTH, Constants.SCREEN_HEIGHT - Constants.ASSETS_HEIGHT);
            top_shape.graphics.endFill();
            this.addChild(top_shape);
        }
    };

    MainMenuState.prototype.onOrientationChanged = function (landscape) {
        _super.prototype.onOrientationChanged.call(this, landscape);

        if (!landscape) {
            this.configureYAlign();
        }
    };

    MainMenuState.prototype.init = function () {
        _super.prototype.init.call(this);
    };

    MainMenuState.prototype.runJelly = function () {
        this.liveTime = 0;
    };

    MainMenuState.prototype.update = function (dt) {
        _super.prototype.update.call(this, dt);
    };

    MainMenuState.prototype.onSoundTouch = function () {
        SoundManager.g_instance.setSoundEnabled(!SoundManager.g_instance.isSoundEnabled());
        this.setSoundButton();
    };

    MainMenuState.prototype.setSoundButton = function () {
        var _this = this;
        if (this.soundButton && this.soundButton.parent) {
            this.soundButton.parent.removeChild(this.soundButton);
        }

        var enabled = SoundManager.g_instance.isSoundEnabled();

        this.soundButton = new DNButton(enabled ? Constants.IMAGE_BUTTON_SOUND_ON : Constants.IMAGE_BUTTON_SOUND_OFF, function () {
            return _this.onSoundTouch();
        });
        this.addChild(this.soundButton);
        this.addGuiObject(this.soundButton);
        this.soundButton.x = +620;
        this.soundButton.y = +150;
    };

    MainMenuState.prototype.onMouseDown = function (x, y) {
        _super.prototype.onMouseDown.call(this, x, y);
    };

    MainMenuState.prototype.onCreditsTouch = function () {
        StateManager.g_instance.pushState(new CreditsState());
    };

    MainMenuState.prototype.onMoreGamesTouch = function () {
        //window.open("http://m.softgames.de", "_blank");
        SG.redirectToPortal();
    };

    MainMenuState.prototype.onPlayTouch = function () {
        StateManager.g_instance.pushState(new ShadeInState(new SelectLevelState()));
    };

    MainMenuState.prototype.resume = function () {
        this.configureYAlign();
    };
    return MainMenuState;
})(GameState);
/// <reference path="references.ts" />
var ShadeInState = (function (_super) {
    __extends(ShadeInState, _super);
    function ShadeInState(next_state) {
        var _this = this;
        _super.call(this);
        this.nextState = null;

        this.nextState = next_state;

        //  shading
        this.shader = new createjs.Shape();
        this.shader.graphics.beginFill("#ffffff");
        this.shader.graphics.drawRect(0, 0, Constants.ASSETS_WIDTH, Constants.SCREEN_HEIGHT);
        this.shader.graphics.endFill();
        this.addChild(this.shader);
        this.shader.alpha = 0;
        createjs.Tween.get(this.shader, { loop: false }).to({ alpha: 1.0 }, 400, createjs.Ease.linear).call(function () {
            return _this.onFinishShade();
        });
    }
    ShadeInState.prototype.onFinishShade = function () {
        StateManager.g_instance.changeState(this.nextState);
        StateManager.g_instance.pushState(new ShadeOutState());
    };

    ShadeInState.prototype.setNextState = function (state) {
        this.nextState = state;
    };
    return ShadeInState;
})(GameState);
/// <reference path="references.ts" />
var ShadeOutState = (function (_super) {
    __extends(ShadeOutState, _super);
    function ShadeOutState() {
        var _this = this;
        _super.call(this);

        //  shading
        this.shader = new createjs.Shape();
        this.shader.graphics.beginFill("#ffffff");
        this.shader.graphics.drawRect(0, 0, Constants.ASSETS_WIDTH, Constants.SCREEN_HEIGHT);
        this.shader.graphics.endFill();
        this.addChild(this.shader);
        createjs.Tween.get(this.shader, { loop: false }).to({ alpha: 0 }, 400, createjs.Ease.linear).call(function () {
            return _this.onFinishShade();
        });
    }
    ShadeOutState.prototype.onFinishShade = function () {
        StateManager.g_instance.popState();
    };
    return ShadeOutState;
})(GameState);
/// <reference path="references.ts" />
var ShadeInCircleState = (function (_super) {
    __extends(ShadeInCircleState, _super);
    function ShadeInCircleState(next_state) {
        var _this = this;
        _super.call(this);
        this.nextState = null;

        this.nextState = next_state;

        //  shading
        this.shader = new createjs.Shape();
        this.shader.graphics.beginFill("#ffffff");
        this.shader.graphics.drawRect(0, 0, Constants.ASSETS_WIDTH, Constants.SCREEN_HEIGHT);
        this.shader.graphics.endFill();
        this.addChild(this.shader);
        this.shader.alpha = 0;
        createjs.Tween.get(this.shader, { loop: false }).wait(400).to({ alpha: 1.0 }, 400, createjs.Ease.linear).call(function () {
            return _this.onFinishShade();
        });

        this.shining = AssetsManager.g_instance.getCenteredImageWithProxy(Constants.IMAGE_BIG_SHINING);
        this.addChild(this.shining);
        this.shining.x = Constants.ASSETS_WIDTH / 2;
        this.shining.y = Constants.ASSETS_HEIGHT / 2;
        createjs.Tween.get(this.shining, { loop: false }).to({ scaleX: 3.5, scaleY: 3.5 }, 800, createjs.Ease.linear);

        this.shining.alpha = 0;
        createjs.Tween.get(this.shining, { loop: false }).to({ alpha: 1.0 }, 400, createjs.Ease.linear);
        createjs.Tween.get(this.shining, { loop: false }).to({ rotation: 100 }, 800, createjs.Ease.linear);
    }
    ShadeInCircleState.prototype.onFinishShade = function () {
        StateManager.g_instance.changeState(this.nextState);
        StateManager.g_instance.pushState(new ShadeOutState());
    };

    ShadeInCircleState.prototype.setNextState = function (state) {
        this.nextState = state;
    };
    return ShadeInCircleState;
})(GameState);
/// <reference path="MainMenuState.ts" />
var CreditsState = (function (_super) {
    __extends(CreditsState, _super);
    function CreditsState() {
        _super.call(this);
        this.hiddingNow = false;

        //  shading
        this.shader = new createjs.Shape();
        this.shader.graphics.beginFill("#ffffff");
        this.shader.graphics.drawRect(0, 0, Constants.ASSETS_WIDTH, Constants.SCREEN_HEIGHT);
        this.shader.graphics.endFill();
        this.addChild(this.shader);
        this.shader.alpha = 0;
        createjs.Tween.get(this.shader, { loop: false }).to({ alpha: 0.82 }, 500, createjs.Ease.linear);

        this.container = new createjs.Container();
        this.addChild(this.container);
        this.container.alpha = 0;
        createjs.Tween.get(this.container, { loop: false }).to({ alpha: 1.0 }, 500, createjs.Ease.linear);

        var texts = [
            "PROGRAMMING / GAME DESIGN:",
            "Konstantin Boronenkov",
            "",
            "",
            "ART:",
            "Vladimir Makarov",
            "Anna Turkova",
            "",
            "",
            "MUSIC / SOUND:",
            "Alexander Ahuro",
            "",
            "",
            "Hypnocat Studio 2014",
            "gibbetsfeedback@gmail.com"
        ];

        for (var i = 0; i < texts.length; i++) {
            var line = new createjs.Text(texts[i], "bold 35px Times New Roman", "#222222");
            line.textAlign = "center";
            this.container.addChild(line);

            line.x = Constants.ASSETS_WIDTH / 2;
            line.y = 100 + i * 40;
        }
    }
    CreditsState.prototype.onMouseDown = function (x, y) {
        this.hide();
    };

    CreditsState.prototype.hide = function () {
        if (!this.hiddingNow) {
            createjs.Tween.get(this.shader, { loop: false }).to({ alpha: 0.0 }, 400, createjs.Ease.linear).call(function () {
                StateManager.g_instance.popState();
            });
            createjs.Tween.get(this.container, { loop: false }).to({ alpha: 0.0 }, 400, createjs.Ease.linear);
            this.hiddingNow = true;
        }
    };
    return CreditsState;
})(GameState);
/// <reference path="references.ts" />
var GameData = (function () {
    function GameData() {
        this.levelsCompleted = 0;
        this.totalScore = 0;
        this.levels = [
            //  First level, just first level
            {
                form: [
                    [0, 1, 1, 1, 1, 1, 1, 0],
                    [0, 1, 1, 1, 1, 1, 1, 0],
                    [0, 1, 1, 1, 1, 1, 1, 0],
                    [0, 1, 1, 1, 1, 1, 1, 0],
                    [0, 1, 1, 1, 1, 1, 1, 0],
                    [0, 1, 1, 1, 1, 1, 1, 0],
                    [0, 1, 1, 1, 1, 1, 1, 0],
                    [0, 0, 0, 0, 0, 0, 0, 0]
                ],
                dirt: null,
                chips: [
                    [0, 5, 3, 2, 1, 2, 5, 0],
                    [0, 1, 2, 1, 2, 1, 4, 0],
                    [0, 3, 1, 5, 1, 5, 1, 0],
                    [0, 1, 2, 3, 3, 2, 4, 0],
                    [0, 2, 3, 5, 1, 4, 1, 0],
                    [0, 2, 5, 3, 5, 1, 4, 0],
                    [0, 1, 2, 3, 1, 4, 1, 0],
                    [0, 0, 0, 0, 0, 0, 0, 0]
                ],
                chip_types: 5,
                moves: 25,
                chip_goal: 4,
                chip_goal_count: 13
            },
            //  second
            {
                form: [
                    [0, 0, 1, 0, 0, 1, 0, 0],
                    [0, 1, 1, 1, 1, 1, 1, 0],
                    [1, 1, 1, 1, 1, 1, 1, 1],
                    [0, 1, 1, 1, 1, 1, 1, 0],
                    [0, 1, 1, 1, 1, 1, 1, 0],
                    [1, 1, 1, 1, 1, 1, 1, 1],
                    [0, 1, 1, 1, 1, 1, 1, 0],
                    [0, 0, 1, 0, 0, 1, 0, 0]
                ],
                dirt: null,
                chips: [
                    [0, 0, 4, 0, 0, 1, 0, 0],
                    [0, 1, 2, 2, 3, 4, 5, 0],
                    [2, 1, 3, 3, 4, 1, 2, 3],
                    [0, 4, 1, 5, 4, 4, 2, 0],
                    [0, 3, 4, 1, 2, 3, 1, 0],
                    [1, 2, 3, 5, 5, 3, 5, 2],
                    [0, 5, 1, 5, 4, 2, 2, 0],
                    [0, 0, 5, 0, 0, 1, 0, 0]
                ],
                chip_types: 5,
                moves: 30,
                chip_goal: 1,
                chip_goal_count: 20
            },
            //  3rd clear cells edu
            {
                form: [
                    [0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 1, 1, 1, 1, 1, 1, 0],
                    [0, 1, 1, 1, 1, 1, 1, 0],
                    [0, 1, 1, 1, 1, 1, 1, 0],
                    [0, 1, 1, 1, 1, 1, 1, 0],
                    [0, 1, 1, 1, 1, 1, 1, 0],
                    [0, 1, 1, 1, 1, 1, 1, 0],
                    [0, 0, 0, 0, 0, 0, 0, 0]
                ],
                dirt: [
                    [0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 1, 1, 1, 1, 0, 0],
                    [0, 0, 1, 1, 1, 1, 0, 0],
                    [0, 0, 1, 1, 1, 1, 0, 0],
                    [0, 0, 1, 1, 1, 1, 0, 0],
                    [0, 0, 1, 1, 1, 1, 0, 0],
                    [0, 0, 1, 1, 1, 1, 0, 0],
                    [0, 0, 0, 0, 0, 0, 0, 0]
                ],
                chips: [
                    [0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 1, 2, 4, 3, 4, 5, 0],
                    [0, 3, 3, 5, 2, 1, 5, 0],
                    [0, 2, 4, 1, 2, 6, 6, 0],
                    [0, 2, 4, 2, 3, 3, 4, 0],
                    [0, 1, 2, 3, 4, 6, 6, 0],
                    [0, 2, 1, 5, 5, 4, 2, 0],
                    [0, 0, 0, 0, 0, 0, 0, 0]
                ],
                chip_types: 6,
                moves: 40,
                chip_goal: 0,
                chip_goal_count: 0
            },
            //  4 level, 2nd about clear cell
            {
                form: [
                    [0, 1, 1, 1, 1, 1, 1, 0],
                    [0, 1, 1, 1, 1, 1, 1, 0],
                    [0, 1, 1, 1, 1, 1, 1, 0],
                    [0, 1, 1, 0, 0, 1, 1, 0],
                    [0, 1, 1, 0, 0, 1, 1, 0],
                    [0, 1, 1, 1, 1, 1, 1, 0],
                    [0, 1, 1, 1, 1, 1, 1, 0],
                    [0, 1, 1, 1, 1, 1, 1, 0]
                ],
                dirt: [
                    [0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 1, 1, 1, 1, 1, 1, 0],
                    [0, 1, 1, 1, 1, 1, 1, 0],
                    [0, 1, 1, 0, 0, 1, 1, 0],
                    [0, 1, 1, 0, 0, 1, 1, 0],
                    [0, 1, 1, 1, 1, 1, 1, 0],
                    [0, 1, 1, 1, 1, 1, 1, 0],
                    [0, 0, 0, 0, 0, 0, 0, 0]
                ],
                chips: [
                    [0, 4, 3, 1, 4, 3, 1, 0],
                    [0, 1, 1, 2, 1, 1, 4, 0],
                    [0, 2, 1, 1, 2, 3, 1, 0],
                    [0, 3, 3, 0, 0, 1, 2, 0],
                    [0, 4, 4, 0, 0, 2, 1, 0],
                    [0, 4, 4, 2, 2, 1, 2, 0],
                    [0, 2, 3, 3, 4, 4, 1, 0],
                    [0, 1, 2, 2, 3, 4, 1, 0]
                ],
                chip_types: 4,
                moves: 25,
                chip_goal: 0,
                chip_goal_count: 0
            },
            //  level 5, like chess
            {
                form: [
                    [0, 0, 0, 1, 1, 0, 0, 0],
                    [0, 0, 1, 1, 1, 1, 0, 0],
                    [0, 1, 1, 1, 1, 1, 1, 0],
                    [1, 1, 1, 1, 1, 1, 1, 1],
                    [1, 1, 1, 1, 1, 1, 1, 1],
                    [0, 1, 1, 1, 1, 1, 1, 0],
                    [0, 0, 1, 1, 1, 1, 0, 0],
                    [0, 0, 0, 1, 1, 0, 0, 0]
                ],
                dirt: [
                    [0, 0, 0, 1, 1, 0, 0, 0],
                    [0, 0, 1, 1, 1, 1, 0, 0],
                    [0, 1, 1, 1, 1, 1, 1, 0],
                    [1, 1, 1, 1, 1, 1, 1, 1],
                    [1, 1, 1, 1, 1, 1, 1, 1],
                    [0, 1, 1, 1, 1, 1, 1, 0],
                    [0, 0, 1, 1, 1, 1, 0, 0],
                    [0, 0, 0, 1, 1, 0, 0, 0]
                ],
                chips: [
                    [0, 0, 0, 2, 1, 0, 0, 0],
                    [0, 0, 3, 2, 2, 1, 0, 0],
                    [0, 5, 1, 9, 9, 4, 4, 0],
                    [3, 1, 9, 9, 9, 9, 2, 1],
                    [1, 3, 9, 9, 9, 9, 4, 5],
                    [0, 1, 2, 9, 9, 1, 2, 0],
                    [0, 0, 3, 2, 2, 4, 0, 0],
                    [0, 0, 0, 3, 2, 0, 0, 0]
                ],
                chip_types: 5,
                moves: 25,
                chip_goal: 0,
                chip_goal_count: 0
            },
            //  level 6, a lot of 9999
            {
                form: [
                    [1, 1, 1, 1, 1, 1, 1, 1],
                    [1, 1, 1, 1, 1, 1, 1, 1],
                    [1, 1, 1, 1, 1, 1, 1, 1],
                    [1, 1, 1, 1, 1, 1, 1, 1],
                    [1, 1, 1, 1, 1, 1, 1, 1],
                    [1, 1, 1, 1, 1, 1, 1, 1],
                    [1, 1, 1, 1, 1, 1, 1, 1],
                    [1, 1, 1, 1, 1, 1, 1, 1]
                ],
                dirt: null,
                chips: [
                    [2, 3, 4, 5, 5, 1, 6, 6],
                    [9, 9, 9, 9, 9, 9, 9, 9],
                    [1, 2, 2, 3, 3, 2, 4, 1],
                    [9, 9, 9, 9, 9, 9, 9, 9],
                    [2, 2, 1, 2, 1, 5, 4, 6],
                    [9, 9, 9, 9, 9, 9, 9, 9],
                    [4, 5, 6, 2, 1, 3, 2, 2],
                    [9, 9, 9, 9, 9, 9, 9, 9]
                ],
                chip_types: 6,
                moves: 20,
                chip_goal: 3,
                chip_goal_count: 20
            },
            //  level 7, devided on 2 parts
            {
                form: [
                    [1, 1, 1, 1, 1, 1, 1, 1],
                    [1, 1, 1, 1, 1, 1, 1, 1],
                    [1, 1, 1, 1, 1, 1, 1, 1],
                    [0, 0, 0, 0, 0, 0, 0, 0],
                    [1, 1, 1, 1, 1, 1, 1, 1],
                    [1, 1, 1, 1, 1, 1, 1, 1],
                    [1, 1, 1, 1, 1, 1, 1, 1],
                    [1, 1, 1, 1, 1, 1, 1, 1]
                ],
                dirt: null,
                chips: [
                    [1, 2, 6, 5, 1, 5, 1, 2],
                    [4, 1, 3, 3, 2, 3, 5, 5],
                    [1, 2, 1, 6, 6, 2, 1, 6],
                    [0, 0, 0, 0, 0, 0, 0, 0],
                    [2, 3, 2, 5, 6, 5, 1, 2],
                    [2, 3, 2, 1, 2, 4, 2, 3],
                    [3, 6, 6, 2, 1, 3, 3, 2],
                    [6, 1, 2, 4, 4, 1, 4, 4]
                ],
                chip_types: 6,
                moves: 30,
                chip_goal: 4,
                chip_goal_count: 12
            },
            //  level 8
            {
                form: [
                    [1, 1, 1, 1, 1, 1, 1, 1],
                    [1, 1, 1, 1, 1, 1, 1, 1],
                    [1, 1, 1, 1, 1, 1, 1, 1],
                    [1, 1, 1, 1, 1, 1, 1, 1],
                    [1, 1, 1, 1, 1, 1, 1, 1],
                    [1, 1, 1, 1, 1, 1, 1, 1],
                    [1, 1, 0, 1, 1, 0, 1, 1],
                    [1, 0, 0, 0, 0, 0, 0, 1]
                ],
                dirt: [
                    [0, 0, 0, 1, 1, 0, 0, 0],
                    [0, 1, 1, 1, 1, 1, 1, 0],
                    [0, 1, 1, 1, 1, 1, 1, 0],
                    [0, 1, 1, 1, 1, 1, 1, 0],
                    [0, 1, 1, 1, 1, 1, 1, 0],
                    [0, 1, 1, 1, 1, 1, 1, 0],
                    [0, 0, 0, 1, 1, 0, 0, 0],
                    [0, 0, 0, 0, 0, 0, 0, 0]
                ],
                chips: [
                    [5, 5, 1, 3, 5, 4, 1, 2],
                    [2, 2, 5, 1, 3, 4, 5, 2],
                    [1, 2, 2, 1, 3, 3, 4, 5],
                    [5, 3, 4, 4, 1, 4, 3, 1],
                    [2, 1, 2, 3, 2, 4, 2, 5],
                    [1, 2, 1, 2, 5, 1, 4, 2],
                    [5, 4, 0, 2, 1, 0, 3, 3],
                    [3, 0, 0, 0, 0, 0, 0, 3]
                ],
                chip_types: 5,
                moves: 30,
                chip_goal: 0,
                chip_goal_count: 0
            },
            //  level 9, only 4 chip types
            {
                form: [
                    [0, 0, 0, 1, 1, 0, 0, 0],
                    [0, 0, 0, 1, 1, 0, 0, 0],
                    [0, 1, 1, 1, 1, 1, 1, 0],
                    [1, 1, 1, 1, 1, 1, 1, 1],
                    [1, 1, 1, 1, 1, 1, 1, 1],
                    [0, 1, 1, 1, 1, 1, 1, 0],
                    [0, 0, 0, 1, 1, 0, 0, 0],
                    [0, 0, 0, 1, 1, 0, 0, 0]
                ],
                dirt: [
                    [0, 0, 0, 1, 1, 0, 0, 0],
                    [0, 0, 0, 1, 1, 0, 0, 0],
                    [0, 1, 1, 1, 1, 1, 1, 0],
                    [1, 1, 1, 1, 1, 1, 1, 1],
                    [1, 1, 1, 1, 1, 1, 1, 1],
                    [0, 1, 1, 1, 1, 1, 1, 0],
                    [0, 0, 0, 1, 1, 0, 0, 0],
                    [0, 0, 0, 1, 1, 0, 0, 0]
                ],
                chips: [
                    [0, 0, 0, 9, 9, 0, 0, 0],
                    [0, 0, 0, 9, 9, 0, 0, 0],
                    [0, 2, 3, 9, 9, 2, 4, 0],
                    [3, 4, 2, 9, 9, 3, 4, 1],
                    [1, 2, 4, 9, 9, 2, 2, 4],
                    [0, 2, 1, 9, 9, 2, 1, 0],
                    [0, 0, 3, 9, 9, 3, 0, 0],
                    [0, 0, 0, 9, 9, 0, 0, 0]
                ],
                chip_types: 4,
                moves: 30,
                chip_goal: 0,
                chip_goal_count: 0
            },
            //  level 10, center hole
            {
                form: [
                    [0, 1, 1, 1, 1, 1, 1, 0],
                    [1, 1, 1, 1, 1, 1, 1, 1],
                    [1, 1, 1, 1, 1, 1, 1, 1],
                    [1, 1, 1, 0, 0, 1, 1, 1],
                    [1, 1, 1, 0, 0, 1, 1, 1],
                    [1, 1, 1, 1, 1, 1, 1, 1],
                    [1, 1, 1, 1, 1, 1, 1, 1],
                    [0, 1, 1, 1, 1, 1, 1, 0]
                ],
                dirt: null,
                chips: [
                    [0, 2, 6, 5, 1, 5, 1, 0],
                    [4, 1, 3, 3, 2, 3, 5, 5],
                    [1, 2, 1, 6, 6, 2, 1, 6],
                    [7, 7, 1, 0, 0, 2, 1, 3],
                    [1, 5, 6, 0, 0, 6, 7, 7],
                    [2, 3, 2, 1, 2, 4, 2, 3],
                    [3, 6, 6, 2, 1, 3, 3, 2],
                    [0, 1, 2, 4, 4, 1, 4, 0]
                ],
                chip_types: 7,
                moves: 25,
                chip_goal: 7,
                chip_goal_count: 8
            },
            //  level 11, a lot of types
            {
                form: [
                    [1, 1, 1, 1, 1, 1, 1, 1],
                    [1, 1, 1, 1, 1, 1, 1, 1],
                    [0, 0, 1, 1, 1, 1, 1, 1],
                    [0, 0, 0, 1, 1, 1, 1, 1],
                    [0, 0, 0, 0, 1, 1, 1, 1],
                    [0, 0, 0, 0, 0, 1, 1, 1],
                    [0, 0, 0, 0, 0, 0, 1, 1],
                    [0, 0, 0, 0, 0, 0, 1, 1]
                ],
                dirt: null,
                chips: [
                    [1, 2, 6, 5, 1, 5, 5, 9],
                    [2, 1, 3, 3, 2, 3, 5, 9],
                    [0, 0, 1, 6, 6, 2, 1, 9],
                    [0, 0, 0, 3, 3, 2, 1, 9],
                    [0, 0, 0, 0, 1, 6, 7, 9],
                    [0, 0, 0, 0, 0, 3, 2, 9],
                    [0, 0, 0, 0, 0, 0, 3, 9],
                    [0, 0, 0, 0, 0, 0, 3, 9]
                ],
                chip_types: 7,
                moves: 21,
                chip_goal: 6,
                chip_goal_count: 12
            },
            //  level 12
            {
                form: [
                    [0, 0, 1, 1, 1, 1, 1, 1],
                    [0, 0, 0, 1, 1, 1, 1, 1],
                    [1, 0, 0, 0, 1, 1, 1, 1],
                    [1, 1, 0, 0, 0, 1, 1, 1],
                    [1, 1, 1, 0, 0, 0, 1, 1],
                    [1, 1, 1, 1, 0, 0, 0, 1],
                    [1, 1, 1, 1, 1, 0, 0, 0],
                    [1, 1, 1, 1, 1, 1, 0, 0]
                ],
                dirt: [
                    [0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0, 0, 0, 0],
                    [1, 0, 0, 0, 0, 0, 0, 0],
                    [1, 1, 0, 0, 0, 0, 0, 0],
                    [1, 1, 1, 0, 0, 0, 0, 0],
                    [1, 1, 1, 1, 0, 0, 0, 0],
                    [1, 1, 1, 1, 1, 0, 0, 0],
                    [1, 1, 1, 1, 1, 1, 0, 0]
                ],
                chips: [
                    [0, 0, 9, 1, 1, 4, 9, 9],
                    [0, 0, 0, 5, 4, 2, 9, 9],
                    [2, 0, 0, 0, 2, 1, 1, 2],
                    [1, 2, 0, 0, 0, 5, 5, 4],
                    [2, 1, 3, 0, 0, 0, 1, 1],
                    [1, 2, 5, 3, 0, 0, 0, 4],
                    [9, 9, 5, 1, 5, 0, 0, 0],
                    [9, 9, 1, 4, 1, 9, 0, 0]
                ],
                chip_types: 5,
                moves: 45,
                chip_goal: 0,
                chip_goal_count: 0
            },
            //  level 13, easy
            {
                form: [
                    [1, 1, 1, 1, 1, 1, 1, 1],
                    [1, 1, 1, 1, 1, 1, 1, 1],
                    [1, 1, 1, 1, 1, 1, 1, 1],
                    [1, 1, 1, 1, 1, 1, 1, 1],
                    [1, 1, 1, 1, 1, 1, 1, 1],
                    [1, 1, 1, 1, 1, 1, 1, 1],
                    [1, 0, 1, 0, 0, 1, 0, 1],
                    [1, 0, 0, 0, 0, 0, 0, 1]
                ],
                dirt: [
                    [0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 1, 1, 1, 1, 1, 1, 0],
                    [0, 1, 1, 1, 1, 1, 1, 0],
                    [0, 0, 1, 0, 0, 1, 0, 0],
                    [0, 0, 0, 0, 0, 0, 0, 0]
                ],
                chips: [
                    [2, 1, 5, 4, 2, 3, 3, 2],
                    [4, 5, 3, 4, 4, 5, 4, 1],
                    [5, 4, 3, 5, 5, 3, 5, 4],
                    [3, 4, 5, 4, 3, 4, 3, 5],
                    [9, 9, 9, 9, 9, 9, 9, 9],
                    [9, 9, 9, 9, 9, 9, 9, 9],
                    [9, 0, 9, 0, 0, 9, 0, 9],
                    [9, 0, 0, 0, 0, 0, 0, 9]
                ],
                chip_types: 5,
                moves: 30,
                chip_goal: 0,
                chip_goal_count: 0
            },
            //  level 14
            {
                form: [
                    [1, 1, 1, 1, 1, 1, 1, 1],
                    [1, 1, 1, 0, 1, 1, 1, 0],
                    [1, 0, 1, 1, 1, 0, 1, 1],
                    [1, 1, 1, 1, 1, 1, 1, 1],
                    [1, 1, 1, 1, 1, 1, 1, 1],
                    [0, 1, 0, 1, 0, 1, 0, 1],
                    [0, 1, 0, 1, 0, 1, 0, 1],
                    [1, 1, 1, 1, 1, 1, 1, 1]
                ],
                dirt: null,
                chips: [
                    [4, 4, 3, 3, 4, 4, 1, 1],
                    [2, 4, 2, 0, 1, 4, 1, 0],
                    [3, 0, 4, 2, 2, 0, 3, 1],
                    [2, 3, 1, 4, 1, 2, 1, 3],
                    [4, 4, 1, 2, 3, 1, 3, 4],
                    [0, 2, 0, 1, 0, 2, 0, 4],
                    [0, 1, 0, 1, 0, 1, 0, 2],
                    [1, 2, 3, 4, 1, 2, 1, 1]
                ],
                chip_types: 4,
                moves: 20,
                chip_goal: 2,
                chip_goal_count: 35
            },
            //  level 15
            {
                form: [
                    [1, 1, 1, 1, 1, 1, 1, 1],
                    [1, 1, 1, 1, 1, 1, 1, 1],
                    [1, 0, 0, 1, 1, 0, 0, 1],
                    [1, 1, 1, 1, 1, 1, 1, 1],
                    [1, 1, 1, 1, 1, 1, 1, 1],
                    [1, 1, 1, 1, 1, 1, 1, 1],
                    [1, 1, 1, 1, 1, 1, 1, 1],
                    [1, 1, 0, 0, 0, 0, 1, 1]
                ],
                dirt: null,
                chips: [
                    [9, 2, 3, 9, 9, 3, 4, 9],
                    [9, 5, 6, 9, 9, 6, 1, 9],
                    [9, 0, 0, 9, 9, 4, 4, 9],
                    [9, 3, 2, 9, 9, 2, 2, 9],
                    [9, 5, 6, 9, 9, 4, 1, 9],
                    [9, 1, 6, 9, 9, 4, 6, 9],
                    [9, 6, 1, 9, 9, 5, 6, 9],
                    [9, 1, 0, 0, 0, 0, 1, 9]
                ],
                chip_types: 6,
                moves: 23,
                chip_goal: 1,
                chip_goal_count: 20
            },
            //  level 16
            {
                form: [
                    [1, 1, 1, 0, 0, 1, 1, 1],
                    [1, 1, 1, 0, 0, 1, 1, 1],
                    [1, 1, 1, 0, 0, 1, 1, 1],
                    [1, 1, 1, 1, 1, 1, 1, 1],
                    [1, 1, 1, 1, 1, 1, 1, 1],
                    [1, 1, 1, 0, 0, 1, 1, 1],
                    [1, 1, 1, 0, 0, 1, 1, 1],
                    [1, 1, 1, 0, 0, 1, 1, 1]
                ],
                dirt: null,
                chips: [
                    [1, 1, 2, 0, 0, 2, 2, 7],
                    [2, 1, 2, 0, 0, 1, 3, 1],
                    [6, 6, 5, 0, 0, 2, 2, 1],
                    [5, 6, 6, 9, 9, 1, 6, 5],
                    [1, 2, 3, 9, 9, 3, 6, 5],
                    [7, 3, 2, 0, 0, 2, 7, 1],
                    [1, 7, 7, 0, 0, 1, 7, 1],
                    [9, 9, 9, 0, 0, 9, 9, 9]
                ],
                chip_types: 7,
                moves: 36,
                chip_goal: 7,
                chip_goal_count: 20
            },
            //  level 17
            {
                form: [
                    [0, 0, 0, 1, 1, 0, 0, 0],
                    [0, 0, 0, 1, 1, 0, 0, 0],
                    [0, 0, 1, 1, 1, 1, 0, 0],
                    [0, 1, 1, 1, 1, 1, 1, 0],
                    [0, 1, 1, 1, 1, 1, 1, 0],
                    [0, 0, 1, 1, 1, 1, 0, 0],
                    [0, 0, 0, 1, 1, 0, 0, 0],
                    [0, 0, 0, 1, 1, 0, 0, 0]
                ],
                dirt: null,
                chips: [
                    [0, 0, 0, 2, 3, 0, 0, 0],
                    [0, 0, 0, 4, 5, 0, 0, 0],
                    [0, 0, 1, 2, 2, 3, 2, 0],
                    [0, 1, 3, 4, 5, 3, 4, 0],
                    [0, 1, 3, 4, 2, 2, 3, 0],
                    [0, 0, 1, 2, 3, 4, 0, 0],
                    [0, 0, 0, 1, 1, 0, 0, 0],
                    [0, 0, 0, 1, 1, 0, 0, 0]
                ],
                chip_types: 5,
                moves: 18,
                chip_goal: 5,
                chip_goal_count: 15
            },
            //  level 18 not ready
            {
                form: [
                    [1, 1, 1, 1, 1, 1, 1, 1],
                    [1, 1, 1, 1, 1, 1, 1, 1],
                    [1, 0, 0, 1, 1, 0, 0, 1],
                    [1, 1, 1, 1, 1, 1, 1, 1],
                    [1, 0, 0, 1, 1, 0, 0, 1],
                    [1, 1, 1, 1, 1, 1, 1, 1],
                    [1, 1, 1, 1, 1, 1, 1, 1],
                    [1, 1, 1, 1, 1, 1, 1, 1]
                ],
                dirt: [
                    [1, 1, 1, 1, 1, 1, 1, 1],
                    [1, 1, 1, 1, 1, 1, 1, 1],
                    [1, 0, 0, 1, 1, 0, 0, 1],
                    [1, 1, 1, 1, 1, 1, 1, 1],
                    [1, 0, 0, 1, 1, 0, 0, 1],
                    [1, 1, 1, 1, 1, 1, 1, 1],
                    [1, 1, 1, 1, 1, 1, 1, 1],
                    [1, 1, 1, 1, 1, 1, 1, 1]
                ],
                chips: [
                    [5, 4, 3, 4, 5, 4, 5, 4],
                    [4, 5, 4, 5, 3, 5, 4, 3],
                    [3, 0, 0, 5, 3, 0, 0, 2],
                    [1, 1, 3, 1, 1, 5, 1, 1],
                    [2, 0, 0, 1, 3, 0, 0, 2],
                    [3, 1, 4, 3, 1, 5, 2, 1],
                    [1, 5, 1, 3, 1, 4, 1, 2],
                    [1, 5, 1, 2, 5, 1, 2, 1]
                ],
                chip_types: 5,
                moves: 26,
                chip_goal: 0,
                chip_goal_count: 0
            },
            //  level 19 easy
            {
                form: [
                    [1, 1, 1, 1, 1, 1, 1, 1],
                    [1, 1, 1, 1, 1, 1, 1, 1],
                    [1, 1, 1, 1, 1, 1, 1, 1],
                    [1, 1, 1, 1, 1, 1, 1, 1],
                    [1, 1, 1, 1, 1, 1, 1, 1],
                    [1, 1, 1, 1, 1, 1, 1, 1],
                    [1, 1, 1, 1, 1, 1, 1, 1],
                    [1, 1, 1, 1, 1, 1, 1, 1]
                ],
                dirt: [
                    [0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 1, 0, 1, 0, 1, 0, 1],
                    [0, 1, 0, 1, 0, 1, 0, 1],
                    [0, 1, 0, 1, 0, 1, 0, 1],
                    [0, 1, 0, 1, 0, 1, 0, 1],
                    [0, 1, 0, 1, 0, 1, 0, 1],
                    [0, 1, 0, 1, 0, 1, 0, 1],
                    [0, 0, 0, 0, 0, 0, 0, 0]
                ],
                chips: [
                    [1, 2, 1, 2, 2, 3, 4, 1],
                    [7, 7, 6, 5, 4, 6, 5, 7],
                    [2, 3, 4, 5, 4, 5, 2, 1],
                    [2, 6, 6, 4, 5, 5, 6, 7],
                    [9, 9, 9, 9, 9, 9, 9, 9],
                    [2, 1, 3, 4, 5, 4, 3, 3],
                    [1, 2, 3, 4, 5, 4, 3, 3],
                    [1, 2, 4, 3, 4, 5, 7, 7]
                ],
                chip_types: 7,
                moves: 50,
                chip_goal: 0,
                chip_goal_count: 0
            },
            //  level 20
            {
                form: [
                    [1, 1, 1, 1, 1, 1, 1, 1],
                    [1, 1, 1, 1, 1, 1, 1, 1],
                    [1, 1, 1, 1, 1, 1, 1, 1],
                    [1, 1, 1, 1, 1, 1, 1, 1],
                    [1, 1, 1, 1, 1, 1, 1, 1],
                    [1, 1, 1, 1, 1, 1, 1, 1],
                    [1, 1, 1, 1, 1, 1, 1, 1],
                    [1, 1, 1, 1, 1, 1, 1, 1]
                ],
                dirt: [
                    [1, 0, 1, 0, 1, 0, 1, 0],
                    [0, 1, 0, 1, 0, 1, 0, 1],
                    [1, 0, 1, 0, 1, 0, 1, 0],
                    [0, 1, 0, 1, 0, 1, 0, 1],
                    [1, 0, 1, 0, 1, 0, 1, 0],
                    [0, 1, 0, 1, 0, 1, 0, 1],
                    [1, 0, 1, 0, 1, 0, 1, 0],
                    [0, 1, 0, 1, 0, 1, 0, 1]
                ],
                chips: [
                    [5, 5, 4, 9, 9, 2, 3, 4],
                    [1, 2, 1, 9, 9, 3, 5, 5],
                    [3, 4, 5, 9, 9, 5, 4, 3],
                    [3, 5, 1, 9, 9, 3, 2, 1],
                    [2, 1, 2, 9, 9, 1, 5, 2],
                    [1, 5, 9, 9, 9, 9, 3, 1],
                    [3, 9, 9, 9, 9, 9, 9, 4],
                    [9, 9, 9, 9, 9, 9, 9, 9]
                ],
                chip_types: 5,
                moves: 26,
                chip_goal: 0,
                chip_goal_count: 0
            },
            //  level 21
            {
                form: [
                    [1, 1, 1, 1, 1, 1, 1, 1],
                    [1, 1, 1, 1, 1, 1, 1, 1],
                    [0, 1, 1, 1, 1, 1, 1, 0],
                    [0, 0, 1, 1, 1, 1, 0, 0],
                    [0, 1, 1, 1, 1, 1, 1, 0],
                    [1, 1, 1, 1, 1, 1, 1, 1],
                    [1, 1, 1, 1, 1, 1, 1, 1],
                    [1, 1, 1, 0, 0, 1, 1, 1]
                ],
                dirt: [
                    [1, 1, 1, 0, 0, 1, 1, 1],
                    [1, 1, 1, 0, 0, 1, 1, 1],
                    [0, 1, 1, 0, 0, 1, 1, 0],
                    [0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0, 0, 0, 0],
                    [1, 1, 1, 0, 0, 1, 1, 1],
                    [1, 1, 1, 0, 0, 1, 1, 1],
                    [1, 1, 1, 0, 0, 1, 1, 1]
                ],
                chips: [
                    [1, 5, 4, 4, 1, 1, 3, 2],
                    [1, 5, 3, 1, 1, 5, 1, 2],
                    [0, 1, 3, 2, 4, 4, 3, 0],
                    [0, 0, 4, 1, 2, 1, 0, 0],
                    [0, 2, 3, 5, 5, 4, 2, 0],
                    [9, 9, 9, 1, 2, 9, 9, 9],
                    [9, 9, 9, 3, 4, 9, 9, 9],
                    [9, 9, 9, 0, 0, 9, 9, 9]
                ],
                chip_types: 5,
                moves: 45,
                chip_goal: 0,
                chip_goal_count: 0
            },
            //  level 22, hard,
            {
                form: [
                    [1, 1, 1, 1, 1, 1, 1, 1],
                    [1, 1, 1, 1, 1, 1, 1, 1],
                    [1, 1, 0, 0, 0, 0, 1, 1],
                    [1, 1, 0, 1, 1, 0, 1, 1],
                    [1, 1, 0, 0, 0, 0, 1, 1],
                    [1, 1, 1, 1, 1, 1, 1, 1],
                    [1, 1, 1, 1, 1, 1, 1, 1],
                    [1, 1, 1, 1, 1, 1, 1, 1]
                ],
                dirt: [
                    [0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 0, 1, 1, 0, 0, 0],
                    [0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0, 0, 0, 0]
                ],
                chips: [
                    [5, 4, 3, 5, 2, 5, 3, 4],
                    [1, 2, 1, 2, 1, 2, 1, 2],
                    [2, 1, 0, 0, 0, 0, 1, 1],
                    [1, 3, 0, 1, 1, 0, 3, 1],
                    [4, 5, 0, 0, 0, 0, 1, 5],
                    [1, 4, 1, 4, 4, 5, 1, 1],
                    [5, 1, 3, 4, 1, 4, 2, 5],
                    [1, 5, 1, 3, 2, 3, 1, 1]
                ],
                chip_types: 5,
                moves: 30,
                chip_goal: 0,
                chip_goal_count: 0
            },
            //  level 23, easy, but sometime hard
            {
                form: [
                    [1, 0, 1, 0, 1, 0, 1, 0],
                    [1, 1, 1, 1, 1, 1, 1, 1],
                    [1, 1, 1, 1, 1, 1, 1, 1],
                    [1, 1, 1, 1, 1, 1, 1, 1],
                    [1, 1, 1, 1, 1, 1, 1, 1],
                    [1, 1, 1, 1, 1, 1, 1, 1],
                    [1, 1, 1, 1, 1, 1, 1, 1],
                    [1, 0, 1, 0, 1, 0, 1, 0]
                ],
                dirt: [
                    [1, 0, 1, 0, 1, 0, 1, 0],
                    [0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0, 0, 0, 0],
                    [1, 0, 1, 0, 1, 0, 1, 0],
                    [1, 0, 1, 0, 1, 0, 1, 0]
                ],
                chips: [
                    [2, 0, 5, 0, 3, 0, 2, 0],
                    [3, 4, 5, 4, 1, 2, 5, 5],
                    [3, 3, 4, 3, 1, 1, 2, 1],
                    [5, 2, 1, 1, 2, 5, 1, 3],
                    [5, 1, 4, 3, 1, 3, 2, 1],
                    [1, 2, 1, 2, 3, 2, 1, 5],
                    [5, 3, 4, 4, 5, 5, 2, 1],
                    [1, 0, 4, 0, 3, 0, 1, 0]
                ],
                chip_types: 5,
                moves: 40,
                chip_goal: 0,
                chip_goal_count: 0
            },
            // level 24 hard
            {
                form: [
                    [1, 1, 1, 1, 1, 1, 1, 1],
                    [1, 1, 1, 1, 1, 1, 1, 1],
                    [1, 1, 0, 1, 1, 1, 1, 1],
                    [1, 0, 0, 1, 1, 1, 1, 1],
                    [1, 1, 1, 1, 1, 1, 1, 1],
                    [1, 1, 1, 1, 1, 0, 0, 1],
                    [1, 1, 1, 1, 1, 0, 1, 1],
                    [1, 1, 1, 1, 1, 1, 1, 1]
                ],
                dirt: [
                    [0, 0, 0, 0, 0, 0, 0, 0],
                    [1, 1, 1, 1, 0, 0, 0, 0],
                    [1, 1, 0, 1, 0, 0, 0, 0],
                    [1, 0, 0, 1, 0, 0, 0, 0],
                    [1, 1, 1, 1, 1, 1, 1, 1],
                    [0, 0, 0, 0, 1, 0, 0, 1],
                    [0, 0, 0, 0, 1, 0, 1, 1],
                    [0, 0, 0, 0, 1, 1, 1, 1]
                ],
                chips: [
                    [5, 4, 3, 5, 2, 1, 1, 2],
                    [3, 5, 4, 5, 4, 3, 1, 2],
                    [1, 5, 0, 2, 1, 2, 3, 4],
                    [1, 0, 0, 2, 1, 2, 3, 4],
                    [4, 3, 4, 5, 2, 4, 5, 5],
                    [3, 5, 4, 2, 1, 0, 0, 1],
                    [3, 2, 3, 1, 2, 0, 1, 4],
                    [5, 4, 4, 5, 3, 5, 1, 1]
                ],
                chip_types: 5,
                moves: 30,
                chip_goal: 0,
                chip_goal_count: 0
            },
            //  level 25, hard
            {
                form: [
                    [1, 1, 1, 0, 0, 0, 0, 0],
                    [1, 1, 1, 1, 0, 0, 0, 0],
                    [1, 1, 1, 1, 1, 0, 0, 0],
                    [1, 1, 1, 1, 1, 1, 0, 0],
                    [0, 1, 1, 1, 1, 1, 1, 0],
                    [0, 0, 1, 1, 1, 1, 1, 1],
                    [0, 0, 0, 1, 1, 1, 1, 1],
                    [0, 0, 0, 0, 1, 1, 1, 1]
                ],
                dirt: [
                    [1, 1, 1, 0, 0, 0, 0, 0],
                    [1, 1, 1, 1, 0, 0, 0, 0],
                    [1, 1, 1, 1, 1, 0, 0, 0],
                    [1, 1, 1, 1, 1, 1, 0, 0],
                    [0, 1, 1, 1, 1, 1, 1, 0],
                    [0, 0, 1, 1, 1, 1, 1, 1],
                    [0, 0, 0, 1, 1, 1, 1, 1],
                    [0, 0, 0, 0, 1, 1, 1, 1]
                ],
                chips: [
                    [1, 7, 1, 0, 0, 0, 0, 0],
                    [5, 6, 4, 5, 0, 0, 0, 0],
                    [3, 2, 4, 5, 3, 0, 0, 0],
                    [1, 1, 3, 2, 3, 1, 0, 0],
                    [0, 4, 5, 4, 4, 7, 2, 0],
                    [0, 0, 5, 1, 5, 7, 7, 1],
                    [0, 0, 0, 1, 3, 5, 6, 7],
                    [0, 0, 0, 0, 2, 1, 6, 7]
                ],
                chip_types: 7,
                moves: 40,
                chip_goal: 0,
                chip_goal_count: 0
            },
            //  level 26, hard
            {
                form: [
                    [1, 1, 1, 1, 1, 1, 1, 1],
                    [1, 0, 1, 0, 1, 0, 1, 0],
                    [1, 1, 1, 1, 1, 1, 1, 1],
                    [1, 0, 1, 0, 1, 0, 1, 0],
                    [1, 1, 1, 1, 1, 1, 1, 1],
                    [1, 0, 1, 0, 1, 0, 1, 0],
                    [1, 1, 1, 1, 1, 1, 1, 1],
                    [1, 0, 1, 0, 1, 0, 1, 0]
                ],
                dirt: [
                    [1, 1, 1, 1, 1, 1, 1, 1],
                    [1, 0, 1, 0, 1, 0, 1, 0],
                    [1, 1, 1, 1, 1, 1, 1, 1],
                    [1, 0, 1, 0, 1, 0, 1, 0],
                    [1, 1, 1, 1, 1, 1, 1, 1],
                    [1, 0, 1, 0, 1, 0, 1, 0],
                    [1, 1, 1, 1, 1, 1, 1, 1],
                    [1, 0, 1, 0, 1, 0, 1, 0]
                ],
                chips: [
                    [1, 4, 1, 4, 1, 4, 3, 2],
                    [2, 0, 1, 0, 3, 0, 3, 0],
                    [3, 1, 3, 1, 4, 1, 4, 1],
                    [2, 0, 4, 0, 1, 0, 3, 0],
                    [4, 1, 3, 1, 3, 1, 2, 2],
                    [2, 0, 1, 0, 2, 0, 4, 0],
                    [1, 1, 2, 1, 3, 1, 2, 1],
                    [2, 0, 1, 0, 1, 0, 2, 0]
                ],
                chip_types: 4,
                moves: 17,
                chip_goal: 0,
                chip_goal_count: 0
            },
            //  27, last, very hard
            {
                form: [
                    [1, 1, 1, 1, 1, 1, 1, 1],
                    [1, 1, 1, 1, 1, 1, 1, 1],
                    [1, 1, 1, 1, 1, 1, 1, 1],
                    [1, 1, 1, 1, 1, 1, 1, 1],
                    [1, 1, 1, 1, 1, 1, 1, 1],
                    [1, 1, 1, 1, 1, 1, 1, 1],
                    [0, 0, 0, 0, 0, 0, 0, 0],
                    [1, 1, 1, 1, 1, 1, 1, 1]
                ],
                dirt: [
                    [0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0, 0, 0, 0],
                    [1, 1, 1, 1, 1, 1, 1, 1]
                ],
                chips: [
                    [1, 3, 6, 6, 5, 5, 2, 1],
                    [3, 1, 6, 6, 5, 5, 2, 3],
                    [1, 2, 3, 3, 2, 1, 4, 6],
                    [2, 1, 2, 4, 5, 6, 1, 6],
                    [3, 1, 2, 4, 3, 5, 6, 1],
                    [1, 3, 4, 3, 4, 5, 1, 2],
                    [0, 0, 0, 0, 0, 0, 0, 0],
                    [1, 3, 4, 1, 2, 1, 2, 1]
                ],
                chip_types: 6,
                moves: 20,
                chip_goal: 0,
                chip_goal_count: 0
            }
        ];
    }
    GameData.getInstance = function () {
        if (this.instance == null) {
            this.instance = new GameData();
        }

        return this.instance;
    };

    GameData.prototype.save = function () {
        try  {
            window.localStorage.setItem("levelsCompleted", this.levelsCompleted.toString());
            window.localStorage.setItem("totalScore", this.totalScore.toString());
        } catch (e) {
        }
    };

    GameData.prototype.load = function () {
        try  {
            //  unary "+" to convert string to number
            this.levelsCompleted = +window.localStorage.getItem("levelsCompleted") || 0;
            this.totalScore = +window.localStorage.getItem("totalScore") || 0;
        } catch (e) {
        }
    };

    GameData.prototype.onWinLevel = function (level, score) {
        this.totalScore += score;

        if (level == this.levelsCompleted) {
            this.levelsCompleted = level + 1;

            if (this.levelsCompleted > this.getTotalLevels()) {
                this.levelsCompleted = this.getTotalLevels();
            }
        }

        this.save();
    };

    GameData.prototype.getTotalScore = function () {
        return this.totalScore;
    };

    GameData.prototype.levelsAvailable = function () {
        if (Constants.g_DEBUG) {
            return this.getTotalLevels();
        }

        return this.levelsCompleted + 1;
    };

    GameData.prototype.getLevelDef = function (level_num) {
        return this.levels[level_num];
    };

    GameData.prototype.getTotalLevels = function () {
        return this.levels.length;
    };
    GameData.instance = null;
    return GameData;
})();
/// <reference path="references.ts" />
var DNButton = (function (_super) {
    __extends(DNButton, _super);
    function DNButton(name, callback) {
        _super.call(this);
        this.selected = false;
        this.func = null;

        this.func = callback;

        this.picture = AssetsManager.g_instance.getCenteredImage(name);

        this.addChild(this.picture);

        this.picWidth = this.picture.getBounds().width * 1.15;
        this.picHeight = this.picture.getBounds().height * 1.15;
    }
    DNButton.prototype.select = function () {
        if (!this.selected) {
            createjs.Tween.removeTweens(this);

            createjs.Tween.get(this, { loop: false }).to({ scaleX: 1.15, scaleY: 1.15 }, 150, createjs.Ease.linear);
            this.selected = true;
        }
    };

    DNButton.prototype.deselect = function () {
        if (this.selected) {
            createjs.Tween.removeTweens(this);

            createjs.Tween.get(this, { loop: false }).to({ scaleX: 1.0, scaleY: 1.0 }, 150, createjs.Ease.linear);
            this.selected = false;
        }
    };

    DNButton.prototype.onMouseDown = function (x, y) {
        if (this.hitTestSmart(x, y)) {
            if (!DNButton.wasActionThisFrame) {
                DNButton.wasActionThisFrame = true;
            } else {
                return;
            }

            this.liveTime = 0;

            this.select();
        }
    };

    DNButton.prototype.onMouseUp = function (x, y) {
        if (this.hitTestSmart(x, y) && this.selected) {
            if (!DNButton.wasActionThisFrame) {
                DNButton.wasActionThisFrame = true;
            } else {
                return;
            }

            //  run action
            SoundManager.g_instance.play(SoundManager.SOUND_CLICK);

            this.runFunc();
        }

        this.deselect();
    };

    DNButton.prototype.runFunc = function () {
        if (this.func) {
            this.func();
        } else {
            console.log("error! DNButton without func");
        }
    };

    DNButton.prototype.onMouseMove = function (x, y) {
        if (!this.hitTestSmart(x, y)) {
            if (!DNButton.wasActionThisFrame) {
                DNButton.wasActionThisFrame = true;
            } else {
                return;
            }

            this.deselect();
        }
    };

    DNButton.prototype.hitTestSmart = function (x, y) {
        if (!this.parent || !this.visible) {
            return false;
        }

        //var pos: createjs.Point = new createjs.Point(0, 0);
        //var cont: createjs.Container = this;
        //while (cont)
        //{
        //    pos.x += cont.x;
        //    pos.y += cont.y;
        //    cont = cont.parent;
        //}
        //var pos: createjs.Point = this.picture.localToGlobal(0, 0);
        var pos = this.localToGlobal(0, 0);

        pos.x /= Constants.SCREEN_SCALE;
        pos.y /= Constants.SCREEN_SCALE;

        return x > pos.x - this.picWidth / 2 && x < pos.x + this.picWidth / 2 && y > pos.y - this.picHeight / 2 && y < pos.y + this.picHeight / 2;
    };
    DNButton.wasActionThisFrame = false;
    return DNButton;
})(GameObject);
/// <reference path="references.ts" />
var DNTextField = (function (_super) {
    __extends(DNTextField, _super);
    function DNTextField(text, font_name, letter_dist) {
        _super.call(this);
        this.textWidth = 0;
        this.fontNamePrefix = "";
        this.letterDistance = 0;

        if (font_name) {
            this.fontNamePrefix = font_name;
        }

        if (letter_dist) {
            this.letterDistance = letter_dist;
        }

        this.setText(text);
    }
    //public setColor(r : number, g : number, b : number): void
    //{
    //    //this.filters = [new createjs.ColorFilter(1, 1, 1, 1, r - 256, g - 256, b - 256, 0)];
    //    //this.cache(0, 0, this.getBounds().width, this.getBounds().height, 1);
    //}
    DNTextField.prototype.setText = function (text) {
        this.removeAllChildren();

        var x_offset = 0;

        for (var i = 0; i < text.length; i++) {
            var char_code = text.charAt(i);

            var ch = AssetsManager.g_instance.getImage(this.fontNamePrefix + char_code);
            this.addChild(ch);
            ch.x = x_offset;

            x_offset += ch.getBounds().width + this.letterDistance;
        }

        this.textWidth = x_offset;
    };

    DNTextField.prototype.getWidth = function () {
        return this.textWidth;
    };
    return DNTextField;
})(createjs.Container);
/// <reference path="references.ts" />
var FlyingPoints = (function (_super) {
    __extends(FlyingPoints, _super);
    function FlyingPoints(value) {
        _super.call(this);

        this.label = new DNTextField("p" + value.toString(), "", -10);
        this.addChild(this.label);
    }
    FlyingPoints.prototype.update = function (dt) {
        _super.prototype.update.call(this, dt);

        this.y -= dt * 150;

        if (this.liveTime > 0.5) {
            this.alpha -= dt * 3.5;
        }

        if (this.liveTime >= 1.5) {
            this.kill();
        }
    };
    return FlyingPoints;
})(GameObject);
/// <reference path="references.ts" />
var ConvertToBonusEffect = (function (_super) {
    __extends(ConvertToBonusEffect, _super);
    function ConvertToBonusEffect(chip) {
        _super.call(this);

        this.chip = chip;

        this.addChild(AssetsManager.g_instance.getCenteredImage(Constants.IMAGE_SHINING));

        this.scaleX = this.scaleY = 2.5;
    }
    ConvertToBonusEffect.prototype.update = function (dt) {
        _super.prototype.update.call(this, dt);

        this.rotation += dt * Math.PI * 35;

        if (this.scaleX > 1) {
            this.scaleX -= dt * 3;
            this.scaleY -= dt * 3;
        }

        if (this.chip.isMatching()) {
            this.alpha -= dt * 4;
        }

        this.x = this.chip.x;
        this.y = this.chip.y - Constants.CELL_SIZE / 2;

        if (this.chip.isDead()) {
            this.kill();
        }
    };
    return ConvertToBonusEffect;
})(GameObject);
/// <reference path="references.ts" />
var KillLineEffect = (function (_super) {
    __extends(KillLineEffect, _super);
    function KillLineEffect(speed) {
        _super.call(this);

        this.speed = speed;

        this.addChild(AssetsManager.g_instance.getCenteredImage(Constants.IMAGE_SICKLE));

        if (speed.x < 0) {
            this.rotation = 180;
        }
        if (speed.x > 0) {
            this.rotation = 0;
        }
        if (speed.y < 0) {
            this.rotation = -90;
        }
        if (speed.y > 0) {
            this.rotation = +90;
        }
    }
    KillLineEffect.prototype.update = function (dt) {
        _super.prototype.update.call(this, dt);

        this.x += dt * this.speed.x;
        this.y += dt * this.speed.y;

        if (this.x > Constants.ASSETS_WIDTH + 172 / 2) {
            this.kill();
        }

        if (this.x < -172 / 2) {
            this.kill();
        }

        if (this.y < 300 && this.speed.y < 0) {
            this.alpha -= dt * 6;
        }

        if (this.y < -106 / 2) {
            this.kill();
        }

        if (this.y > Constants.SCREEN_HEIGHT + 106 / 2) {
            this.kill();
        }
    };
    return KillLineEffect;
})(GameObject);
/// <reference path="references.ts" />
var KillColorEffect = (function (_super) {
    __extends(KillColorEffect, _super);
    function KillColorEffect(from, to) {
        _super.call(this);

        var speed = 2000;

        this.addChild(AssetsManager.g_instance.getCenteredImage(Constants.IMAGE_DROP));

        var dir = new createjs.Point(to.x - from.x, to.y - from.y);

        this.distance = Math.sqrt(dir.x * dir.x + dir.y * dir.y);

        this.maxTime = this.distance / speed;

        var cos = dir.x / this.distance;

        this.speed = new createjs.Point(dir.x / this.distance * speed, dir.y / this.distance * speed);

        //this.rotation = -Utils.RadToGrad(Math.acos(cos));
        this.rotation = Utils.RadToGrad(Math.atan2(dir.y, dir.x));
    }
    KillColorEffect.prototype.update = function (dt) {
        _super.prototype.update.call(this, dt);

        if (this.liveTime < this.maxTime) {
            this.x += dt * this.speed.x;
            this.y += dt * this.speed.y;
        } else {
            this.alpha -= dt * 3.5;

            if (this.alpha <= 0) {
                this.kill();
            }
        }
    };
    return KillColorEffect;
})(GameObject);
/// <reference path="references.ts" />
var TimeIsUpEffect = (function (_super) {
    __extends(TimeIsUpEffect, _super);
    function TimeIsUpEffect(image_name) {
        _super.call(this);
        this.stage = 0;

        this.addChild(AssetsManager.g_instance.getCenteredImage(image_name));

        this.x = 350;
        this.y = 400;

        this.setScale(0);
        this.alpha = -1;
    }
    TimeIsUpEffect.prototype.update = function (dt) {
        _super.prototype.update.call(this, dt);

        switch (this.stage) {
            case 0:
                 {
                    this.alpha += dt * 4.0;

                    this.setScale(this.scaleX + dt * 2);

                    if (this.scaleX > 1.0) {
                        this.setScale(1);

                        this.alpha = 1;
                        this.liveTime = 0;
                        this.stage = 1;

                        createjs.Tween.get(this, { loop: false }).wait(1400).to({ alpha: 0 }, 500, createjs.Ease.linear);
                    }
                }
                break;

            case 1:
                 {
                    this.setScale(1.0 + Math.sin(this.liveTime * 5.0) * 0.07);
                }
                break;
        }
    };

    TimeIsUpEffect.prototype.setScale = function (scale) {
        this.scaleX = this.scaleY = scale;
    };
    return TimeIsUpEffect;
})(GameObject);
/// <reference path="references.ts" />
var MoveHint = (function (_super) {
    __extends(MoveHint, _super);
    function MoveHint(vertical) {
        _super.call(this);
        this.arrow1 = new createjs.Container();
        this.arrow2 = new createjs.Container();
        this.hidding = false;

        var arrow_1_bitmap = AssetsManager.g_instance.getCenteredImage(Constants.IMAGE_HINT_ARROW);
        this.arrow1.addChild(arrow_1_bitmap);

        this.addChild(this.arrow1);
        this.arrow1.y -= 18;

        var arrow_2_bitmap = AssetsManager.g_instance.getCenteredImage(Constants.IMAGE_HINT_ARROW);
        this.arrow2.addChild(arrow_2_bitmap);
        this.addChild(this.arrow2);
        this.arrow2.y += 18;
        this.arrow2.rotation = 180;

        if (vertical) {
            this.rotation = 90;
        }

        this.alpha = 0;
    }
    MoveHint.prototype.update = function (dt) {
        if (this.liveTime <= 0.5) {
            this.alpha = this.liveTime * 2;
        }

        _super.prototype.update.call(this, dt);

        this.arrow1.x = Math.sin(this.liveTime * 7) * 5;
        this.arrow2.x = -this.arrow1.x;

        if (this.liveTime > 20.0) {
            this.hide();
        }

        if (this.hidding) {
            this.alpha -= dt * 3.0;

            if (this.alpha <= 0) {
                this.kill();
            }
        }
    };

    MoveHint.prototype.hide = function () {
        this.hidding = true;
    };
    return MoveHint;
})(GameObject);
/// <reference path="references.ts" />
var ShowAwesomeEffect = (function (_super) {
    __extends(ShowAwesomeEffect, _super);
    function ShowAwesomeEffect() {
        _super.call(this);

        this.addChild(AssetsManager.g_instance.getCenteredImage(Constants.IMAGE_AWESOME));

        this.alpha = 0;
        createjs.Tween.get(this, { loop: false }).to({ alpha: 1 }, 300, createjs.Ease.linear);

        this.scaleX = this.scaleY = 0.5;
        createjs.Tween.get(this, { loop: false }).to({ scaleX: 1, scaleY: 1 }, 500, createjs.Ease.backOut);
    }
    ShowAwesomeEffect.prototype.update = function (dt) {
        _super.prototype.update.call(this, dt);

        if (this.liveTime > 0.7) {
            this.alpha -= dt * 3;
            this.scaleX += dt;
            this.scaleY += dt;

            if (this.alpha <= 0) {
                this.kill();
            }
        }
    };
    return ShowAwesomeEffect;
})(GameObject);
/// <reference path="references.ts" />
var SuperbEffect = (function (_super) {
    __extends(SuperbEffect, _super);
    function SuperbEffect() {
        _super.call(this);

        this.addChild(AssetsManager.g_instance.getCenteredImage(Constants.IMAGE_SUPERB));

        this.alpha = 0;
        createjs.Tween.get(this, { loop: false }).to({ alpha: 1 }, 300, createjs.Ease.linear);

        this.scaleX = this.scaleY = 0.5;
        createjs.Tween.get(this, { loop: false }).to({ scaleX: 1, scaleY: 1 }, 500, createjs.Ease.backOut);
    }
    SuperbEffect.prototype.update = function (dt) {
        _super.prototype.update.call(this, dt);

        if (this.liveTime > 0.7) {
            this.alpha -= dt * 3;
            this.scaleX += dt;
            this.scaleY += dt;

            if (this.alpha <= 0) {
                this.kill();
            }
        }
    };
    return SuperbEffect;
})(GameObject);
/// <reference path="references.ts" />
var PortraitLockState = (function (_super) {
    __extends(PortraitLockState, _super);
    function PortraitLockState() {
        _super.call(this);

        this.scaleX = this.scaleY = 1 / Constants.SCREEN_SCALE;

        var w = Constants.W * Constants.PIXEL_RATIO;
        var h = Constants.H * Constants.PIXEL_RATIO;

        //  shading
        var shader = new createjs.Shape();
        shader.graphics.beginFill("#4aa4c2");
        shader.graphics.drawRect(0, 0, w, h);
        shader.graphics.endFill();
        this.addChild(shader);

        var bitmap = AssetsManager.g_instance.getCenteredImage(Constants.IMAGE_ROTATE);
        var proxy = new createjs.Container();
        this.addChild(proxy);
        proxy.addChild(bitmap);

        proxy.x = w / 2;
        proxy.y = h / 2;
    }
    PortraitLockState.prototype.onOrientationChanged = function (landscape) {
        if (!landscape) {
            StateManager.g_instance.popState();
        }
    };
    return PortraitLockState;
})(GameState);
/// <reference path="references.ts" />
var StatusPointsControl = (function (_super) {
    __extends(StatusPointsControl, _super);
    function StatusPointsControl(count, current) {
        _super.call(this);
        this.smallPoints = new Array();

        this.offset = 50;

        var width = this.offset * (count - 1);

        for (var i = 0; i < count; i++) {
            var small_point = AssetsManager.g_instance.getCenteredImageWithProxy(Constants.IMAGE_POINTS_CONTROL_SMALL);

            this.smallPoints.push(small_point);

            this.addChild(small_point);

            small_point.x = i * this.offset - width / 2;
        }

        this.bigPoint = AssetsManager.g_instance.getCenteredImageWithProxy(Constants.IMAGE_POINTS_CONTROL_BIG);
        this.addChild(this.bigPoint);

        this.forcedSetActiveElement(current);
    }
    StatusPointsControl.prototype.setActiveElement = function (element) {
        if (this.curElement != element && element >= 0 && element < this.smallPoints.length) {
            this.bigPoint.scaleX = this.bigPoint.scaleY = 0.5;
        } else {
            return;
        }

        for (var i = 0; i < this.smallPoints.length; i++) {
            this.smallPoints[i].visible = true;
        }

        this.curElement = element;

        if (this.curElement < 0) {
            this.curElement = 0;
        }

        if (this.curElement > this.smallPoints.length - 1) {
            this.curElement = this.smallPoints.length - 1;
        }

        this.smallPoints[this.curElement].visible = false;

        this.bigPoint.x = this.smallPoints[this.curElement].x;
        this.bigPoint.y = this.smallPoints[this.curElement].y;

        this.bigPoint.scaleX = this.bigPoint.scaleY = 0.5;
        createjs.Tween.get(this.bigPoint, { loop: false }).to({ scaleX: 1, scaleY: 1 }, 300, createjs.Ease.backOut);
    };

    StatusPointsControl.prototype.forcedSetActiveElement = function (element) {
        this.setActiveElement(element);
        this.bigPoint.scaleX = this.bigPoint.scaleY = 1;
    };

    StatusPointsControl.prototype.getActiveElement = function () {
        return this.curElement;
    };
    return StatusPointsControl;
})(createjs.Container);
;
/// <reference path="references.ts" />
var SelectLevelState = (function (_super) {
    __extends(SelectLevelState, _super);
    function SelectLevelState() {
        var _this = this;
        _super.call(this);
        this.touchPointY = 0;
        this.layer = new createjs.Container();
        this.tween = null;
        this.ySpeed = 0;
        this.yAcc = 1000;
        this.calcSpeedCache = 0;
        this.slidePositions = new Array();
        this.levelsPositions = [
            39, 1449,
            188, 1445,
            365, 1411,
            465, 1338,
            499, 1235,
            385, 1166,
            253, 1142,
            113, 1086,
            40, 968,
            119, 851,
            263, 818,
            403, 800,
            541, 750,
            505, 630,
            346, 578,
            193, 548,
            64, 480,
            55, 352,
            186, 303,
            330, 348,
            488, 350,
            571, 252,
            537, 137,
            411, 87,
            266, 85,
            124, 97,
            43, 10
        ];

        //  bubbling
        var button_exit = new DNButton(Constants.IMAGE_BUTTON_EXIT, function () {
            return _this.onExitTouch();
        });
        this.addGuiObject(button_exit);

        this.addChild(this.layer);
        var map = AssetsManager.g_instance.getImage(Constants.IMAGE_GLOBAL_MAP);
        this.layer.addChild(map);
        this.mapH = map.getBounds().height;

        this.layer.y = -1000;

        var offset_x = 62;
        var offset_y = 200;

        for (var i = 0; i < this.levelsPositions.length / 2; i++) {
            var button = new SelectLevelButton(Constants.IMAGE_LEVEL_BUTTON, function () {
            }, i);

            this.addGuiObject(button);

            this.layer.addChild(button);
            button.x = Constants.ASSETS_WIDTH - (this.levelsPositions[i * 2] + offset_x);
            button.y = this.levelsPositions[i * 2 + 1] + offset_y;
        }

        var title = AssetsManager.g_instance.getImage(Constants.IMAGE_SELECT_LEVEL_BACK);
        this.addChild(title);

        var proxy = new createjs.Container();
        proxy.addChild(button_exit);
        proxy.x = 68;
        proxy.y = 70;
        proxy.scaleX = proxy.scaleY = 0.9;
        this.addChild(proxy);

        this.checkConstrains();
    }
    SelectLevelState.prototype.onExitTouch = function () {
        StateManager.g_instance.pushState(new ShadeInState(new MainMenuState()));
    };

    SelectLevelState.prototype.onLevelTouch = function (level) {
        StateManager.g_instance.pushState(new ShadeInState(new PlayState(level, true)));
    };

    SelectLevelState.prototype.onMouseDown = function (x, y) {
        _super.prototype.onMouseDown.call(this, x, y);

        this.touchPointY = this.layer.y - y;

        this.slidePositions.length = 0;
        this.slidePositions.push({ liveTime: this.liveTime, y: y });
    };

    SelectLevelState.prototype.update = function (dt) {
        _super.prototype.update.call(this, dt);

        if (!StateManager.g_instance.isMouseDownNow()) {
            if (this.ySpeed != 0) {
                this.layer.y += this.ySpeed * dt;

                if (this.ySpeed > 0) {
                    this.ySpeed -= dt * this.yAcc;

                    if (this.ySpeed < 0) {
                        this.ySpeed = 0;
                    }
                } else {
                    this.ySpeed += dt * this.yAcc;

                    if (this.ySpeed > 0) {
                        this.ySpeed = 0;
                    }
                }
            }
        }

        this.checkConstrains();
    };

    SelectLevelState.prototype.onMouseMove = function (x, y) {
        _super.prototype.onMouseMove.call(this, x, y);

        this.layer.y = y + this.touchPointY;

        this.checkConstrains();

        this.slidePositions.push({ liveTime: this.liveTime, y: y });
        if (this.slidePositions.length > 100) {
            this.calcSpeedCache = this.calcYSpeed();

            this.slidePositions.length = 0;
        }
    };

    SelectLevelState.prototype.checkConstrains = function () {
        if (this.layer.y > 0) {
            this.layer.y = 0;

            this.ySpeed = 0;
        }

        if (Constants.g_isPC) {
            if (this.layer.y < Constants.ASSETS_HEIGHT - this.mapH) {
                this.layer.y = Constants.ASSETS_HEIGHT - this.mapH;

                this.ySpeed = 0;
            }
        } else {
            if (this.layer.y < Constants.SCREEN_HEIGHT - this.mapH) {
                this.layer.y = Constants.SCREEN_HEIGHT - this.mapH;

                this.ySpeed = 0;
            }
        }
    };

    SelectLevelState.prototype.onMouseUp = function (x, y) {
        _super.prototype.onMouseUp.call(this, x, y);

        this.slidePositions.push({ liveTime: this.liveTime, y: y });

        this.ySpeed = this.calcYSpeed();
    };

    SelectLevelState.prototype.calcYSpeed = function () {
        if (this.slidePositions.length < 2) {
            return this.calcSpeedCache;
        }

        var slide_time = 0.2;

        var i;
        for (i = this.slidePositions.length - 2; i > 0; --i) {
            if (this.liveTime - this.slidePositions[i]["liveTime"] >= slide_time) {
                break;
            }
        }

        var delay = this.liveTime - this.slidePositions[i]["liveTime"];

        if (delay < 0.00001) {
            return 0;
        }

        return (this.slidePositions[this.slidePositions.length - 1]["y"] - this.slidePositions[i]["y"]) / delay;
    };
    return SelectLevelState;
})(GameState);
/// <reference path="references.ts" />
var LevelDef = (function () {
    function LevelDef() {
    }
    return LevelDef;
})();
/// <reference path="references.ts" />
var HeartParticle = (function (_super) {
    __extends(HeartParticle, _super);
    function HeartParticle(speed_x, speed_y) {
        _super.call(this);
        this.rotSpeed = Utils.RandomRange(-120, 120);

        this.speedX = speed_x;
        this.speedY = speed_y;

        this.addChild(AssetsManager.g_instance.getCenteredImage(Constants.IMAGE_HEART_PARTICLE));

        this.alpha = 0;
    }
    HeartParticle.prototype.update = function (dt) {
        _super.prototype.update.call(this, dt);

        this.rotation += this.rotSpeed * dt;

        this.x += this.speedX * dt;
        this.y += this.speedY * dt;

        if (this.liveTime > 0.3) {
            this.alpha -= dt * 3;

            if (this.alpha <= 0) {
                this.kill();
            }
        } else {
            this.alpha += dt * 4;
        }
    };
    return HeartParticle;
})(GameObject);
/// <reference path="references.ts" />
function init() {
    var manifest = [];

    var jpg = [
        Constants.IMAGE_TITLE_MAIN_MENU_BACK,
        Constants.IMAGE_GLOBAL_MAP,
        Constants.IMAGE_BACK
    ];

    var art = [
        Constants.IMAGE_BUTTON_MORE_GAMES,
        Constants.IMAGE_SELECT_LEVEL_BACK,
        Constants.IMAGE_BORDER_SIDE,
        Constants.IMAGE_BORDER_CORNER,
        Constants.IMAGE_WIN_STRINGS,
        Constants.IMAGE_HEART_PARTICLE,
        Constants.IMAGE_SHINING,
        Constants.IMAGE_BIG_SHINING,
        Constants.IMAGE_POINTS_CONTROL_BIG,
        Constants.IMAGE_POINTS_CONTROL_SMALL,
        Constants.IMAGE_LEVEL_BUTTON,
        Constants.IMAGE_BACK,
        Constants.IMAGE_ROTATE,
        Constants.IMAGE_TITLE_MAIN_MENU_BACK,
        "cake_1",
        "cake_2",
        "cake_3",
        "cake_4",
        "cake_5",
        "cake_6",
        "cake_7",
        "font_0",
        "font_1",
        "font_2",
        "font_3",
        "font_4",
        "font_5",
        "font_6",
        "font_7",
        "font_8",
        "font_9",
        "sel_0",
        "sel_1",
        "sel_2",
        "sel_3",
        "sel_4",
        "sel_5",
        "sel_6",
        "sel_7",
        "sel_8",
        "sel_9",
        "0",
        "1",
        "2",
        "3",
        "4",
        "5",
        "6",
        "7",
        "8",
        "9",
        "p",
        "boom_1", "boom_2", "boom_3", "boom_4", "boom_5", "boom_6", "boom_7", "boom_8", "boom_9", "boom_10", "boom_11",
        Constants.IMAGE_CELL,
        Constants.IMAGE_AWESOME,
        Constants.IMAGE_SUPERB,
        Constants.IMAGE_SHINING,
        Constants.IMAGE_DROP,
        Constants.IMAGE_DONUT,
        Constants.IMAGE_ARROW_BONUS_VERT,
        Constants.IMAGE_ARROW_BONUS_HOR,
        Constants.IMAGE_BOMB,
        Constants.IMAGE_MESSAGE_WINDOW,
        Constants.IMAGE_HINT_ARROW,
        Constants.IMAGE_BUTTON_PLAY,
        Constants.IMAGE_BUTTON_SOUND_ON,
        Constants.IMAGE_BUTTON_SOUND_OFF,
        Constants.IMAGE_BUTTON_CLOSE,
        Constants.IMAGE_BUTTON_EXIT,
        Constants.IMAGE_BUTTON_PAUSE,
        Constants.IMAGE_BUTTON_RESTART,
        //Constants.IMAGE_BUTTON_CREDITS,
        Constants.IMAGE_GAMEOVER_CAPTION,
        Constants.IMAGE_SICKLE,
        Constants.IMAGE_DIRT,
        Constants.IMAGE_GUI,
        Constants.IMAGE_LOCK,
        Constants.IMAGE_OUT_OF_MOVES,
        Constants.IMAGE_WIN_CAPTION,
        Constants.IMAGE_STONE_HEART,
        Constants.IMAGE_TASK_PANEL,
        Constants.IMAGE_GLOBAL_MAP
    ];

    var sound = [
        SoundManager.SOUND_MUSIC,
        SoundManager.SOUND_CLICK,
        SoundManager.SOUND_MATCH_1,
        SoundManager.SOUND_MATCH_2,
        SoundManager.SOUND_MATCH_3,
        SoundManager.SOUND_MATCH_4,
        SoundManager.SOUND_MATCH_5,
        SoundManager.SOUND_DROP_1,
        SoundManager.SOUND_DROP_2,
        SoundManager.SOUND_DROP_3,
        SoundManager.SOUND_LINE,
        SoundManager.SOUND_KILL_COLOR,
        SoundManager.SOUND_BOOM,
        SoundManager.SOUND_AWESOME,
        SoundManager.SOUND_EXCHANGE,
        SoundManager.SOUND_WIN,
        SoundManager.SOUND_LOSE
    ];

    for (var i = 0; i < art.length; i++) {
        if (jpg.indexOf(art[i]) == -1) {
            manifest.push({ src: "img/" + art[i] + ".png", id: art[i] });
        } else {
            manifest.push({ src: "img/" + art[i] + ".jpg", id: art[i] });
        }
    }

    for (var i = 0; i < sound.length; i++) {
        manifest.push({ src:  "img/" + /* + sound[i] + ".ogg"  "|"*/ sound[i] + ".mp3", id: sound[i] });
        //console.log("Loading "+sound[i]);
    }

    Constants.g_isPC = !Utils.IsMobileBrowser();

    Constants.W = StateManager.getInnerWidth();
    Constants.H = StateManager.getInnerHeight();

    new StateManager(manifest);
}
;
/// <reference path="references.ts" />
var AutoreleaseEffect = (function (_super) {
    __extends(AutoreleaseEffect, _super);
    function AutoreleaseEffect() {
        _super.call(this);
        this.frames = new Array();
        this.frame = 0;

        for (var i = 1; i <= 11; i++) {
            this.frames.push(AssetsManager.g_instance.getCenteredImageWithProxy("boom_" + i));
        }

        this.update(10);
    }
    AutoreleaseEffect.prototype.update = function (dt) {
        _super.prototype.update.call(this, dt);

        if (this.liveTime > 0.045) {
            this.liveTime = 0;

            this.frame++;

            if (this.frame >= this.frames.length) {
                this.frame = this.frames.length - 1;
                this.kill();
            }

            this.removeAllChildren();

            var pic = this.frames[this.frame];
            this.addChild(pic);

            pic.y = -19;

            this.scaleX = this.scaleY = 2.0;
        }
    };
    return AutoreleaseEffect;
})(GameObject);
/// <reference path="references.ts" />
var PauseState = (function (_super) {
    __extends(PauseState, _super);
    function PauseState() {
        var _this = this;
        _super.call(this);
        this.panel = new createjs.Container();
        this.hiddingNow = false;

        //  shading
        this.shader = new createjs.Shape();
        this.shader.graphics.beginFill("#000000");
        this.shader.graphics.drawRect(0, 0, Constants.ASSETS_WIDTH, Constants.SCREEN_HEIGHT);
        this.shader.graphics.endFill();
        this.addChild(this.shader);
        this.shader.alpha = 0;
        createjs.Tween.get(this.shader, { loop: false }).wait(300).to({ alpha: 0.4 }, 800, createjs.Ease.linear);

        this.addChild(this.panel);
        this.panel.x = Constants.ASSETS_WIDTH / 2;
        this.panel.y = Constants.SCREEN_HEIGHT * 0.5;

        var panel = AssetsManager.g_instance.getCenteredImage(Constants.IMAGE_MESSAGE_WINDOW);
        this.panel.addChild(panel);

        var close_cross = new DNButton(Constants.IMAGE_BUTTON_CLOSE, function () {
            return _this.hide();
        });
        this.panel.addChild(close_cross);
        this.addGuiObject(close_cross);
        close_cross.x = 235;
        close_cross.y = -190;

        var button_restart = new DNButton(Constants.IMAGE_BUTTON_RESTART, function () {
            return _this.onRestartTouch();
        });
        this.panel.addChild(button_restart);
        this.addGuiObject(button_restart);
        button_restart.x = -150;
        button_restart.y = 100;

        var button_exit = new DNButton(Constants.IMAGE_BUTTON_EXIT, function () {
            return _this.onExitTouch();
        });
        this.panel.addChild(button_exit);
        this.addGuiObject(button_exit);
        button_exit.x = 0;
        button_exit.y = 100;

        this.setSoundButton();

        this.panel.alpha = 0.0;
        createjs.Tween.get(this.panel, { loop: false }).to({ alpha: 1 }, 200, createjs.Ease.linear);

        this.panel.scaleX = 0.7;
        this.panel.scaleY = 0.7;
        createjs.Tween.get(this.panel, { loop: false }).to({ scaleX: 1, scaleY: 1 }, 400, createjs.Ease.backOut);
    }
    PauseState.prototype.setSoundButton = function () {
        var _this = this;
        if (this.soundButton && this.soundButton.parent) {
            this.soundButton.parent.removeChild(this.soundButton);
        }

        var enabled = SoundManager.g_instance.isSoundEnabled();

        this.soundButton = new DNButton(enabled ? Constants.IMAGE_BUTTON_SOUND_ON : Constants.IMAGE_BUTTON_SOUND_OFF, function () {
            return _this.onSoundTouch();
        });
        this.panel.addChild(this.soundButton);
        this.addGuiObject(this.soundButton); // mb bug
        this.soundButton.x = +150;
        this.soundButton.y = 100;
    };

    PauseState.prototype.hide = function () {
        if (!this.hiddingNow) {
            createjs.Tween.get(this.shader, { loop: false }).to({ alpha: 0.0 }, 400, createjs.Ease.linear).call(function () {
                StateManager.g_instance.popState();
            });

            createjs.Tween.get(this.panel, { loop: false }).to({ y: -300 }, 300, createjs.Ease.backIn);
            createjs.Tween.get(this.panel, { loop: false }).to({ alpha: 0 }, 300, createjs.Ease.linear);

            this.hiddingNow = true;
        }
    };

    PauseState.prototype.update = function (dt) {
        _super.prototype.update.call(this, dt);
    };

    PauseState.prototype.onRestartTouch = function () {
        StateManager.g_instance.pushState(new ShadeInCircleState(new PlayState(PlayState.g_curLevel, false)));
    };

    PauseState.prototype.onExitTouch = function () {
        StateManager.g_instance.pushState(new ShadeInState(new SelectLevelState()));
    };

    PauseState.prototype.onSoundTouch = function () {
        SoundManager.g_instance.setSoundEnabled(!SoundManager.g_instance.isSoundEnabled());
        this.setSoundButton();
    };
    return PauseState;
})(GameState);
/// <reference path="references.ts" />
var PlayState = (function (_super) {
    __extends(PlayState, _super);
    function PlayState(level, show_task) {
        var _this = this;
        _super.call(this);
        this.INPUT_STATE_WAIT_SELECTION = "INPUT_STATE_WAIT_SELECTION";
        this.INPUT_STATE_LOCK = "INPUT_STATE_LOCK";
        this.INPUT_STATE_WAIT_SPAWN = "INPUT_STATE_WAIT_SPAWN";
        this.INPUT_STATE_SHIFT = "INPUT_STATE_SHIFT";
        this.INPUT_STATE_MATCHING = "INPUT_STATE_MATCHING";
        this.INPUT_STATE_WAIT_NEXT_ROUND = "INPUT_STATE_WAIT_NEXT_ROUND";
        this.matchInARow = 0;
        this.inputState = null;
        this.goal = PlayState.GOAL_DIRT;
        this.goalLabel = new DNTextField("0", "font_", -3);
        this.dirtCount = 0;
        this.fieldWidth = 8;
        this.fieldHeight = 8;
        this.selectedChip = null;
        this.swapChip1 = null;
        this.swapChip2 = null;
        this.lastMovedChip = null;
        this.dirtLayer = new createjs.Container();
        this.underChipsLayer = new createjs.Container();
        this.backChipsLayer = new createjs.Container();
        this.holeLayer = new createjs.Container();
        this.edgesLayer = new createjs.Container();
        this.frontChipsLayer = new createjs.Container();
        this.inputStateTime = 0;
        this.score = 0;
        this.tmpScore = 0;
        this.scoreLabel = new DNTextField("00000", "font_", -3);
        this.moves = 30;
        this.movesLabel = new DNTextField("50", "font_", -3);
        this.findedMatchPos1 = null;
        this.findedMatchPos2 = null;
        this.moveHint = null;
        this.chipTypesCount = 5;
        this.awesomeEffectTime = 0;
        this.superbEffectTime = 0;
        this.waitLose = false;
        this.waitLoseTime = 0;
        this.waitWin = false;
        this.waitWinTime = 0;
        this.lastDropSoundTime = -10;
        this.lastDropID = -1;
        this.lastSound = null;

        try  {
            PlayState.g_curLevel = level;

            var back = AssetsManager.g_instance.getImage(Constants.IMAGE_BACK);
            this.addChild(back);

            PlayState.g_instance = this;

            this.chipTypesCount = GameData.getInstance().getLevelDef(level).chip_types;

            //  alloc
            this.field = new Array(this.fieldWidth);
            for (var i = 0; i < this.fieldWidth; i++) {
                this.field[i] = new Array(this.fieldHeight);
            }

            this.addChild(this.holeLayer);
            this.addChild(this.dirtLayer);
            this.addChild(this.edgesLayer);
            this.addChild(this.underChipsLayer);
            this.addChild(this.backChipsLayer);
            this.addChild(this.frontChipsLayer);

            this.matchInARow = 0;

            this.spawnDefinedChips(GameData.getInstance().getLevelDef(level).chips);

            var form = GameData.getInstance().getLevelDef(level).form;
            for (var x = 0; x < this.fieldWidth; x++) {
                for (var y = 0; y < this.fieldHeight; y++) {
                    if (form[y][x] == 0) {
                        this.field[x][y].convertToHole();

                        this.holeLayer.addChild(this.field[x][y]);

                        ////    edges here
                        var cell_x = this.getXPosByXIndex(x) - Constants.CELL_SIZE / 2;
                        var cell_y = this.getYPosByYIndex(y) - Constants.CELL_SIZE;

                        //  left top
                        if ((y > 0 && form[y - 1][x] != 0) && (x > 0 && form[y][x - 1] != 0)) {
                            var left_top = AssetsManager.g_instance.getImage(Constants.IMAGE_BORDER_CORNER);

                            left_top.x = cell_x - 4;
                            left_top.y = cell_y - 4;

                            this.edgesLayer.addChild(left_top);
                        }

                        ////  right top
                        if ((y > 0 && form[y - 1][x] != 0) && (x < this.fieldWidth - 1 && form[y][x + 1] != 0)) {
                            var right_top = AssetsManager.g_instance.getImage(Constants.IMAGE_BORDER_CORNER);

                            right_top.x = cell_x + Constants.CELL_SIZE + 8 - 4;
                            right_top.y = cell_y - 4;

                            right_top.rotation = +90;

                            this.edgesLayer.addChild(right_top);
                        }

                        ////  left bottom
                        if ((y < this.fieldHeight - 1 && form[y + 1][x] != 0) && (x > 0 && form[y][x - 1] != 0)) {
                            var left_bottom = AssetsManager.g_instance.getImage(Constants.IMAGE_BORDER_CORNER);

                            left_bottom.x = cell_x - 4;
                            left_bottom.y = cell_y + Constants.CELL_SIZE + 8 - 4;

                            left_bottom.rotation = -90;

                            this.edgesLayer.addChild(left_bottom);
                        }

                        ////  right bottom
                        if ((y < this.fieldHeight - 1 && form[y + 1][x] != 0) && (x < this.fieldWidth - 1 && form[y][x + 1] != 0)) {
                            var right_bottom = AssetsManager.g_instance.getImage(Constants.IMAGE_BORDER_CORNER);

                            right_bottom.x = cell_x + Constants.CELL_SIZE + 8 - 4;
                            right_bottom.y = cell_y + Constants.CELL_SIZE + 8 - 4;

                            right_bottom.rotation = -180;

                            this.edgesLayer.addChild(right_bottom);
                        }
                    } else {
                        var cell = AssetsManager.g_instance.getImage(Constants.IMAGE_CELL);

                        this.holeLayer.addChild(cell);

                        cell.x = this.getXPosByXIndex(x) - Constants.CELL_SIZE / 2;
                        cell.y = this.getYPosByYIndex(y) - Constants.CELL_SIZE;

                        //  left
                        if (x > 0 && form[y][x - 1] == 0) {
                            var left = AssetsManager.g_instance.getImage(Constants.IMAGE_BORDER_SIDE);
                            left.rotation = -90;

                            left.x = cell.x - 4;
                            left.y = cell.y + Constants.CELL_SIZE;

                            this.edgesLayer.addChildAt(left, 0);
                        }

                        //  right
                        if (x < this.fieldWidth - 1 && form[y][x + 1] == 0) {
                            var right = AssetsManager.g_instance.getImage(Constants.IMAGE_BORDER_SIDE);
                            right.rotation = -90;

                            right.x = cell.x + Constants.CELL_SIZE - 4;
                            right.y = cell.y + Constants.CELL_SIZE;

                            this.edgesLayer.addChildAt(right, 0);
                        }

                        //  top
                        if (y > 0 && form[y - 1][x] == 0) {
                            var top = AssetsManager.g_instance.getImage(Constants.IMAGE_BORDER_SIDE);

                            top.x = cell.x;
                            top.y = cell.y - 4;

                            this.edgesLayer.addChildAt(top, 0);
                        }

                        //  bottom
                        if (y < this.fieldHeight - 1 && form[y + 1][x] == 0) {
                            var bottom = AssetsManager.g_instance.getImage(Constants.IMAGE_BORDER_SIDE);

                            bottom.x = cell.x;
                            bottom.y = cell.y + Constants.CELL_SIZE - 4;

                            this.edgesLayer.addChildAt(bottom, 0);
                        }

                        ////  left top
                        if ((y > 0 && form[y - 1][x] == 0) && (x > 0 && form[y][x - 1] == 0)) {
                            var left_top = AssetsManager.g_instance.getImage(Constants.IMAGE_BORDER_CORNER);

                            left_top.x = cell.x - 4;
                            left_top.y = cell.y - 4;

                            this.edgesLayer.addChild(left_top);
                        }

                        ////  right top
                        if ((y > 0 && form[y - 1][x] == 0) && (x < this.fieldWidth - 1 && form[y][x + 1] == 0)) {
                            var right_top = AssetsManager.g_instance.getImage(Constants.IMAGE_BORDER_CORNER);

                            right_top.x = cell.x + Constants.CELL_SIZE + 8 - 4;
                            right_top.y = cell.y - 4;

                            right_top.rotation = +90;

                            this.edgesLayer.addChild(right_top);
                        }

                        ////  left bottom
                        if ((y < this.fieldHeight - 1 && form[y + 1][x] == 0) && (x > 0 && form[y][x - 1] == 0)) {
                            var left_bottom = AssetsManager.g_instance.getImage(Constants.IMAGE_BORDER_CORNER);

                            left_bottom.x = cell.x - 4;
                            left_bottom.y = cell.y + Constants.CELL_SIZE + 8 - 4;

                            left_bottom.rotation = -90;

                            this.edgesLayer.addChild(left_bottom);
                        }

                        ////  right bottom
                        if ((y < this.fieldHeight - 1 && form[y + 1][x] == 0) && (x < this.fieldWidth - 1 && form[y][x + 1] == 0)) {
                            var right_bottom = AssetsManager.g_instance.getImage(Constants.IMAGE_BORDER_CORNER);

                            right_bottom.x = cell.x + Constants.CELL_SIZE + 8 - 4;
                            right_bottom.y = cell.y + Constants.CELL_SIZE + 8 - 4;

                            right_bottom.rotation = -180;

                            this.edgesLayer.addChild(right_bottom);
                        }
                    }
                }
            }

            this.holeLayer.cache(0, 0, Constants.ASSETS_WIDTH, Constants.ASSETS_HEIGHT, 1);
            this.edgesLayer.cache(0, 0, Constants.ASSETS_WIDTH, Constants.ASSETS_HEIGHT, 1);

            //  create frames around holes
            //  alloc dirt
            this.fieldDirt = new Array(this.fieldWidth);
            for (var i = 0; i < this.fieldWidth; i++) {
                this.fieldDirt[i] = new Array(this.fieldHeight);
            }

            //  init dirt
            var dirt_template = GameData.getInstance().getLevelDef(level).dirt;
            if (dirt_template) {
                this.goal = PlayState.GOAL_DIRT;

                for (var x = 0; x < this.fieldWidth; x++) {
                    for (var y = 0; y < this.fieldHeight; y++) {
                        if (dirt_template[y][x] != 0) {
                            this.dirtCount++;

                            var dirt = AssetsManager.g_instance.getCenteredBitmapWithProxy(Constants.IMAGE_DIRT);

                            dirt.x = this.getXPosByXIndex(x) - 1;
                            dirt.y = this.getYPosByYIndex(y) - Constants.CELL_SIZE / 2 + 3;
                            this.dirtLayer.addChild(dirt);

                            this.fieldDirt[x][y] = dirt;
                        }
                    }
                }

                this.goalLabel.setText(this.dirtCount.toString());
            } else {
                this.goal = PlayState.GOAL_COUNT;

                this.goalChipID = GameData.getInstance().getLevelDef(level).chip_goal;
                this.chipGoalCount = GameData.getInstance().getLevelDef(level).chip_goal_count;
                this.goalLabel.setText(this.chipGoalCount.toString());
            }

            //---------- gui overlaps
            this.addChild(AssetsManager.g_instance.getImage(Constants.IMAGE_GUI));

            var pause_proxy = new createjs.Container();
            pause_proxy.scaleX = pause_proxy.scaleY = 0.7;
            var button_pause = new DNButton(Constants.IMAGE_BUTTON_PAUSE, function () {
                return _this.onPauseClick();
            });
            pause_proxy.addChild(button_pause);
            this.addGuiObject(button_pause);
            pause_proxy.x = 55;
            pause_proxy.y = 154;
            this.addChild(pause_proxy);

            this.addChild(this.scoreLabel);
            this.scoreLabel.x = 168;
            this.scoreLabel.y = 134;

            this.moves = GameData.getInstance().getLevelDef(level).moves;
            this.addChild(this.movesLabel);
            this.movesLabel.x = 370;
            this.movesLabel.y = 134;
            this.movesLabel.setText(this.moves.toString());

            this.addChild(this.goalLabel);
            this.goalLabel.x = 570;
            this.goalLabel.y = 134;

            if (this.goal == PlayState.GOAL_DIRT) {
                var dirt_sprite = AssetsManager.g_instance.getImage(Constants.IMAGE_DIRT);
                dirt_sprite.scaleX = dirt_sprite.scaleY = 0.45;
                this.addChild(dirt_sprite);
                dirt_sprite.x = 506;
                dirt_sprite.y = 130;
            } else {
                var goal_sprite = AssetsManager.g_instance.getCenteredImageWithProxy("cake_" + this.goalChipID);
                goal_sprite.scaleX = goal_sprite.scaleY = 0.66;
                this.addChild(goal_sprite);
                goal_sprite.x = 525;
                goal_sprite.y = 149;
            }

            if (show_task) {
                var task = new TaskEffect(this.goal, this.chipGoalCount, this.goalChipID);
                this.addGameObject(task);
                this.addChild(task);
            }

            this.configureYAlign();
        } catch (e) {
            console.log(e, "playstate::constructor");
        }
    }
    PlayState.prototype.onPauseClick = function () {
        StateManager.g_instance.pushState(new PauseState());
    };

    PlayState.prototype.createChip = function (x, y, delay) {
        var id = Utils.RandomRangeInt(1, this.chipTypesCount);

        var chip = new Chip(id, x, y, this.getYPosByYIndex(y), delay);

        chip.setIncexes(x, y);

        this.addGameObjectAtPos(chip, this.backChipsLayer, this.getXPosByXIndex(x), -Constants.CELL_SIZE);

        this.field[x][y] = chip;
    };

    PlayState.prototype.createChipWithColorID = function (x, y, delay, id) {
        var chip = new Chip(id, x, y, this.getYPosByYIndex(y), delay);

        chip.setIncexes(x, y);

        this.addGameObjectAtPos(chip, this.backChipsLayer, this.getXPosByXIndex(x), -Constants.CELL_SIZE);

        this.field[x][y] = chip;
    };

    PlayState.prototype.getXPosByXIndex = function (x) {
        return x * Constants.CELL_SIZE + Constants.CELL_SIZE / 2 + Constants.FIELD_OFFSET_X;
    };

    PlayState.prototype.getYPosByYIndex = function (y) {
        return y * Constants.CELL_SIZE + Constants.CELL_SIZE / 2 + Constants.FIELD_OFFSET_Y;
    };

    PlayState.prototype.update = function (dt) {
        _super.prototype.update.call(this, dt);

        if (this.waitWin) {
            this.waitWinTime += dt;

            if (this.waitWinTime > 2.4) {
                StateManager.g_instance.pushState(new WinState(PlayState.g_curLevel, this.score));
                return;
            }
        }

        if (this.waitLose) {
            this.waitLoseTime += dt;

            if (this.waitLoseTime > 2.4) {
                StateManager.g_instance.pushState(new GameOverState(0, 0));
                return;
            }
        }

        this.inputStateTime += dt;

        if (this.inputState != this.INPUT_STATE_WAIT_SELECTION) {
            if (this.moveHint) {
                if (this.moveHint.isDead()) {
                    this.moveHint = null;
                } else {
                    this.moveHint.hide();
                }
            }
        }

        switch (this.inputState) {
            case this.INPUT_STATE_WAIT_SELECTION:
                 {
                    try  {
                        var tm = 3.0;

                        if (this.inputStateTime > tm && this.moveHint && !this.moveHint.parent) {
                            this.addGameObjectAt(this.moveHint, this);
                        }
                    } catch (e) {
                    }
                }
                break;

            case this.INPUT_STATE_WAIT_SPAWN:
                if (this.allChipsNormal()) {
                    this.matchMatches(this.findMatches());
                }
                break;

            case this.INPUT_STATE_SHIFT:
                if (this.allChipsNormal()) {
                    this.matchMatches(this.findMatches());
                }
                break;

            case this.INPUT_STATE_MATCHING:
                if (this.inputStateTime > Constants.MATCH_TIME / 2) {
                    this.shiftChips();
                }
                break;
        }

        //  update score label
        if (this.tmpScore < this.score) {
            this.tmpScore += 17;
            if (this.tmpScore > this.score) {
                this.tmpScore = this.score;
            }

            var str_score = this.tmpScore.toString();
            switch (str_score.length) {
                case 1:
                    str_score = "0000" + str_score;
                    break;
                case 2:
                    str_score = "000" + str_score;
                    break;
                case 3:
                    str_score = "00" + str_score;
                    break;
                case 4:
                    str_score = "0" + str_score;
                    break;
            }

            this.scoreLabel.setText(str_score);
        }
    };

    PlayState.prototype.allChipsNormal = function () {
        for (var x = 0; x < this.fieldWidth; x++) {
            for (var y = 0; y < this.fieldHeight; y++) {
                if (this.field[x][y] != null && !this.field[x][y].isNormal()) {
                    return false;
                }
            }
        }

        return true;
    };

    PlayState.prototype.canExchange = function (chip_1, chip_2) {
        try  {
            if (chip_1 == chip_2) {
                return false;
            }

            if (chip_1.isHole() || chip_2.isHole()) {
                return false;
            }

            var x_dist = (chip_1.getIndeces().x - chip_2.getIndeces().x);
            var y_dist = (chip_1.getIndeces().y - chip_2.getIndeces().y);
        } catch (e) {
            return false;
        }

        return (Math.abs(x_dist) == 1 && y_dist == 0) || (Math.abs(y_dist) == 1 && x_dist == 0);
    };

    PlayState.prototype.exchangeChips = function (chip_1, chip_2) {
        var _this = this;
        try  {
            var chip_1_x = chip_1.x;
            var chip_1_y = chip_1.y;
            var chip_1_index_x = chip_1.getIndexX();
            var chip_1_index_y = chip_1.getIndexY();

            var chip_2_x = chip_2.x;
            var chip_2_y = chip_2.y;
            var chip_2_index_x = chip_2.getIndexX();
            var chip_2_index_y = chip_2.getIndexY();

            //
            this.field[chip_1_index_x][chip_1_index_y] = chip_2;
            this.field[chip_2_index_x][chip_2_index_y] = chip_1;

            chip_1.exchange(chip_2_index_x, chip_2_index_y);
            chip_2.exchange(chip_1_index_x, chip_1_index_y);

            this.swapChip1 = chip_1;
            this.swapChip2 = chip_2;

            createjs.Tween.get(chip_1, { loop: false }).to({ x: chip_2_x, y: chip_2_y }, Constants.EXCHANGE_TIME * 1000, createjs.Ease.linear).call(function () {
                return _this.onExchangeEnded();
            });
            createjs.Tween.get(chip_2, { loop: false }).to({ x: chip_1_x, y: chip_1_y }, Constants.EXCHANGE_TIME * 1000, createjs.Ease.linear);

            this.selectedChip = null;

            this.setInpunState(this.INPUT_STATE_LOCK);
        } catch (e) {
        }
    };

    PlayState.prototype.addConverToBonusEffect = function (chip) {
        var effect = new ConvertToBonusEffect(chip);
        this.addGameObjectAtPos(effect, this.underChipsLayer, chip.x, chip.y - Constants.CELL_SIZE / 2);
    };

    PlayState.prototype.matchMatches = function (mached_chips) {
        try  {
            if (mached_chips.length != 0) {
                switch (this.matchInARow) {
                    case 0:
                        SoundManager.g_instance.play(SoundManager.SOUND_MATCH_1);
                        break;

                    case 1:
                        SoundManager.g_instance.play(SoundManager.SOUND_MATCH_2);
                        break;

                    case 2:
                        SoundManager.g_instance.play(SoundManager.SOUND_MATCH_3);
                        break;

                    case 3:
                        SoundManager.g_instance.play(SoundManager.SOUND_MATCH_4);
                        break;

                    default:
                        SoundManager.g_instance.play(SoundManager.SOUND_MATCH_5);
                        break;
                }

                var was_line_bonus_convert = false;

                for (var chip_set = 0; chip_set < mached_chips.length; chip_set++) {
                    for (var i = 0; i < mached_chips[chip_set].length; i++) {
                        mached_chips[chip_set][i].match(Chip.MATCH_REASON_SIMPLE);
                    }

                    //  match 4 in a raw
                    if (mached_chips[chip_set].length == 4) {
                        var was_convert = false;

                        for (var ch = 0; ch < mached_chips[chip_set].length; ch++) {
                            if (mached_chips[chip_set][ch] == this.lastMovedChip) {
                                was_convert = true;
                                was_line_bonus_convert = true;
                                this.lastMovedChip.convertToBonus(Chip.BONUS_4, Math.random() < 0.5);
                                this.lastMovedChip = null;

                                break;
                            }
                        }

                        if (!was_convert) {
                            was_line_bonus_convert = true;
                            mached_chips[chip_set][Utils.RandomRangeInt(1, 2)].convertToBonus(Chip.BONUS_4);
                        }
                    }

                    //  match 5 in a raw
                    if (mached_chips[chip_set].length >= 5) {
                        var was_convert = false;

                        for (var ch = 0; ch < mached_chips[chip_set].length; ch++) {
                            if (mached_chips[chip_set][ch] == this.lastMovedChip) {
                                was_line_bonus_convert = true;
                                was_convert = true;
                                this.lastMovedChip.convertToBonus(Chip.BONUS_5);
                                this.lastMovedChip = null;

                                break;
                            }
                        }

                        if (!was_convert) {
                            was_line_bonus_convert = true;
                            mached_chips[chip_set][Utils.RandomRangeInt(1, mached_chips[chip_set].length - 2)].convertToBonus(Chip.BONUS_5);
                        }
                    }
                }

                if (!was_line_bonus_convert) {
                    for (var chip_set = 0; chip_set < mached_chips.length; chip_set++) {
                        for (var i = 0; i < mached_chips[chip_set].length; i++) {
                            if (mached_chips[chip_set][i].isDoubleMatched()) {
                                mached_chips[chip_set][i].convertToBonus(Chip.BONUS_BOMB);
                                chip_set = 100; //break2 emulation
                                break;
                            }
                        }
                    }
                }

                this.setInpunState(this.INPUT_STATE_MATCHING);
            } else {
                this.shiftChips();
            }
        } catch (e) {
            console.log(e, "playstate::matchmatches");
        }
    };

    //  first parameter - bonus chip
    PlayState.prototype.matchBonus = function (chip1, chip2) {
        try  {
            if (chip1.getBonusType() == Chip.BONUS_4) {
                SoundManager.g_instance.play(SoundManager.SOUND_LINE);

                //var is_horizontal: boolean = (chip1.getIndexY() == chip2.getIndexY())
                var is_horizontal = chip1.isHorizontal();

                if (is_horizontal) {
                    var match_y = chip1.getIndexY();

                    for (var i = 0; i < this.fieldWidth; i++) {
                        if (this.field[i][match_y] != null) {
                            this.field[i][match_y].match(Chip.MATCH_REASON_BONUS_EFFECT_4_HOR);
                        }
                    }

                    this.addGameObjectAtPos(new KillLineEffect(new createjs.Point(+1200, 0)), this, chip1.x, chip1.y - Constants.CELL_SIZE / 2);
                    this.addGameObjectAtPos(new KillLineEffect(new createjs.Point(-1200, 0)), this, chip1.x, chip1.y - Constants.CELL_SIZE / 2);
                } else {
                    var match_x = chip1.getIndexX();

                    for (var i = 0; i < this.fieldHeight; i++) {
                        if (this.field[match_x][i] != null) {
                            this.field[match_x][i].match(Chip.MATCH_REASON_BONUS_EFFECT_4_VERT);
                        }
                    }

                    this.addGameObjectAtPos(new KillLineEffect(new createjs.Point(0, -1200)), this, chip1.x, chip1.y - Constants.CELL_SIZE / 2);
                    this.addGameObjectAtPos(new KillLineEffect(new createjs.Point(0, +1200)), this, chip1.x, chip1.y - Constants.CELL_SIZE / 2);
                }
            }

            if (chip1.getBonusType() == Chip.BONUS_5) {
                SoundManager.g_instance.play(SoundManager.SOUND_KILL_COLOR);

                chip1.match(Chip.MATCH_REASON_I_AM_BONUS);

                var effect_from = new createjs.Point(chip1.x, chip1.y);

                var color_id = chip2.getColorID();

                if (color_id != -1) {
                    for (var x = 0; x < this.fieldWidth; x++) {
                        for (var y = 0; y < this.fieldHeight; y++) {
                            if (this.field[x][y] != null) {
                                if (this.field[x][y].getColorID() == color_id) {
                                    var effect_to = new createjs.Point(this.field[x][y].x, this.field[x][y].y - Constants.CELL_SIZE / 2);

                                    this.addGameObjectAtPos(new KillColorEffect(effect_from, effect_to), this, effect_from.x, effect_from.y);
                                    this.field[x][y].match(Chip.MATCH_REASON_BONUS_EFFECT_5);
                                }
                            }
                        }
                    }
                }
            }

            if (chip1.getBonusType() == Chip.BONUS_BOMB) {
                this.boom(chip1);

                chip1.match(Chip.MATCH_REASON_I_AM_BONUS);
                chip2.match(Chip.MATCH_REASON_EXCHANGE_WIHT_BONUS);
            }

            this.setInpunState(this.INPUT_STATE_MATCHING);
        } catch (e) {
        }
    };

    PlayState.prototype.boom = function (chip) {
        try  {
            SoundManager.g_instance.play(SoundManager.SOUND_BOOM);

            var chip_x = chip.getIndexX();
            var chip_y = chip.getIndexY();

            var radius = 1;

            for (var x = chip_x - radius; x <= chip_x + radius; x++) {
                for (var y = chip_y - radius; y <= chip_y + radius; y++) {
                    if (this.validCoords(x, y) && this.field[x][y] != null) {
                        this.field[x][y].match(Chip.MATCH_REASON_BONUS_EFFECT_4_HOR);
                    }
                }
            }

            var effect = new AutoreleaseEffect();
            this.addGameObjectAtPos(effect, this, chip.x, chip.y);
        } catch (e) {
        }
    };

    PlayState.prototype.validCoords = function (x, y) {
        return x >= 0 && x < this.fieldWidth && y >= 0 && y < this.fieldHeight;
    };

    PlayState.prototype.onExchangeEnded = function () {
        try  {
            var first_exchange = (this.swapChip1 != null || this.swapChip2 != null);

            var is_bonus_exchange = false;

            if (first_exchange) {
                if (this.swapChip1.isBonus()) {
                    is_bonus_exchange = true;
                }

                if (this.swapChip2.isBonus()) {
                    is_bonus_exchange = true;
                }
            }

            var mached_chips = this.findMatches();

            if (mached_chips.length == 0) {
                if (!is_bonus_exchange) {
                    if (first_exchange) {
                        this.exchangeChips(this.swapChip1, this.swapChip2);

                        //  no match, exchange back this time!
                        this.swapChip1 = null;
                        this.swapChip2 = null;
                    } else {
                        //  ok, this time exchange failed. Try one more time!
                        this.setInpunState(this.INPUT_STATE_WAIT_SELECTION);
                    }
                }
            } else {
                //  moves
                this.decreseMoves();

                this.matchMatches(mached_chips);
            }

            //  match bonuses here
            if (first_exchange && is_bonus_exchange) {
                if (this.swapChip1.isBonus()) {
                    this.matchBonus(this.swapChip1, this.swapChip2);
                }

                if (this.swapChip2.isBonus()) {
                    this.matchBonus(this.swapChip2, this.swapChip1);
                }

                this.decreseMoves();
            }
        } catch (e) {
            console.log(e, "playstate::exchangeended");
        }
    };

    PlayState.prototype.decreseMoves = function () {
        this.moves--;
        if (this.moves < 0) {
            this.moves = 0;
        }
        this.movesLabel.setText(this.moves.toString());
    };

    PlayState.prototype.findMatches = function () {
        try  {
            var mached_chips = Array();

            for (var y = 0; y < this.fieldHeight; y++) {
                for (var x = 0; x < this.fieldWidth;) {
                    var start_color_id = -1;

                    var matches_count = 0;

                    var mached_chips_array = new Array();

                    for (var i = x; i < this.fieldWidth; i++) {
                        if (this.field[i][y] == null || this.field[i][y].isBonus() || this.field[i][y].getColorID() == -1) {
                            break;
                        } else {
                            if (start_color_id == -1) {
                                start_color_id = this.field[i][y].getColorID();
                            }
                        }

                        if (this.field[i][y].getColorID() == start_color_id) {
                            mached_chips_array.push(this.field[i][y]);

                            matches_count++;
                        } else {
                            break;
                        }
                    }

                    if (matches_count >= 3) {
                        mached_chips.push(mached_chips_array);
                    }

                    if (matches_count != 0) {
                        x += matches_count;
                    } else {
                        x++;
                    }
                }
            }

            for (var x = 0; x < this.fieldWidth; x++) {
                for (var y = 0; y < this.fieldHeight; y) {
                    var start_color_id = -1;

                    var matches_count = 0;

                    var mached_chips_array = new Array();

                    for (var i = y; i < this.fieldHeight; i++) {
                        if (this.field[x][i] == null || this.field[x][i].isBonus() || this.field[x][i].getColorID() == -1) {
                            break;
                        } else {
                            if (start_color_id == -1) {
                                start_color_id = this.field[x][i].getColorID();
                            }
                        }

                        if (this.field[x][i].getColorID() == start_color_id) {
                            mached_chips_array.push(this.field[x][i]);

                            matches_count++;
                        } else {
                            break;
                        }
                    }

                    if (matches_count >= 3) {
                        mached_chips.push(mached_chips_array);
                    }

                    if (matches_count != 0) {
                        y += matches_count;
                    } else {
                        y++;
                    }
                }
            }
        } catch (e) {
        }

        return mached_chips;
    };

    PlayState.prototype.onMouseUp = function (x, y) {
        _super.prototype.onMouseUp.call(this, x, y);

        this.selectedChip = null;
    };

    PlayState.prototype.onMouseDown = function (x, y) {
        _super.prototype.onMouseDown.call(this, x, y);

        y -= this.y;

        if (this.inputState != this.INPUT_STATE_WAIT_SELECTION) {
            return;
        }

        var chip = this.checkChipSelection(x, y);
        if (chip) {
            if (chip == this.selectedChip) {
                return;
            }

            if (!this.selectedChip) {
                this.selectedChip = chip;
                this.selectedChip.select();
            } else {
                if (this.canExchange(this.selectedChip, chip)) {
                    this.lastMovedChip = this.selectedChip;

                    this.exchangeChips(this.selectedChip, chip);

                    SoundManager.g_instance.play(SoundManager.SOUND_EXCHANGE);
                } else {
                    this.selectedChip.deselect();
                    this.selectedChip = chip;
                    this.selectedChip.select();
                }
            }
        }
    };

    PlayState.prototype.onMouseMove = function (x, y) {
        _super.prototype.onMouseMove.call(this, x, y);

        if (this.inputState != this.INPUT_STATE_WAIT_SELECTION) {
            return;
        }

        this.onMouseDown(x, y);
    };

    PlayState.prototype.shiftChips = function () {
        this.matchInARow++;

        var was_shifting = false;

        for (var x_index = 0; x_index < this.fieldWidth; x_index++) {
            for (var y_index = this.fieldHeight - 1; y_index >= 0; y_index--) {
                var chip = this.field[x_index][y_index];

                if (!chip) {
                    continue;
                }

                if (chip.isHole()) {
                    continue;
                }

                for (var i = this.fieldHeight - 1; i > y_index; i--) {
                    if (this.field[x_index][i] == null) {
                        was_shifting = true;

                        var new_y_index = i;

                        this.field[x_index][y_index].shiftDown(new_y_index, this.getYPosByYIndex(new_y_index));
                        this.field[x_index][new_y_index] = this.field[x_index][y_index];
                        this.field[x_index][y_index] = null;

                        break;
                    }
                }
            }
        }

        if (was_shifting) {
            this.setInpunState(this.INPUT_STATE_SHIFT);
        } else {
            this.spawnNewChips();
        }
    };

    PlayState.prototype.spawnNewChips = function () {
        var spawned_count = 0;

        for (var x = 0; x < this.fieldWidth; x++) {
            var count = -1;

            for (var y = this.fieldHeight - 1; y >= 0; y--) {
                if (this.field[x][y] == null) {
                    if (count == -1) {
                        count = y;
                    }

                    spawned_count++;

                    this.createChip(x, y, (count - y) * 0.13);
                }
            }
        }

        if (spawned_count > 0) {
            this.setInpunState(this.INPUT_STATE_WAIT_SPAWN);
        } else {
            this.setInpunState(this.INPUT_STATE_WAIT_SELECTION);
        }
    };

    PlayState.prototype.spawnDefinedChips = function (chips) {
        for (var x = 0; x < this.fieldWidth; x++) {
            for (var y = 0; y < this.fieldHeight; y++) {
                this.createChipWithColorID(x, y, (7 - y) * 0.13 + x * 0.11, chips[y][x]);
            }
        }

        this.setInpunState(this.INPUT_STATE_WAIT_SPAWN);
    };

    PlayState.prototype.checkChipSelection = function (x, y) {
        for (var x_index = 0; x_index < this.fieldWidth; x_index++) {
            for (var y_index = 0; y_index < this.fieldHeight; y_index++) {
                var chip = this.field[x_index][y_index];

                if (chip) {
                    if ((Math.abs(chip.x - x) < Constants.CELL_SIZE / 2) && (chip.y > y && chip.y < y + Constants.CELL_SIZE)) {
                        return chip;
                    }
                }
            }
        }

        return null;
    };

    PlayState.prototype.setInpunState = function (state) {
        try  {
            this.inputState = state;

            this.inputStateTime = 0.0;

            if (this.inputState == this.INPUT_STATE_WAIT_SELECTION) {
                this.matchInARow = 0;

                if (this.findMoves()) {
                    var chip_1 = this.field[this.findedMatchPos1.x][this.findedMatchPos1.y];
                    var chip_2 = this.field[this.findedMatchPos2.x][this.findedMatchPos2.y];

                    this.moveHint = new MoveHint(this.findedMatchPos1.y != this.findedMatchPos2.y);
                    this.moveHint.x = (chip_1.x + chip_2.x) / 2;
                    this.moveHint.y = (chip_1.y + chip_2.y) / 2 - Constants.CELL_SIZE / 2;
                } else {
                    //  convert to random bonus random chip
                    //  BUG HERE cant convert HOLE
                    this.moveHint = null;

                    for (var i = 0; i < 100; i++) {
                        var chip = this.field[Utils.RandomRangeInt(0, this.fieldWidth - 1)][Utils.RandomRangeInt(0, this.fieldHeight - 1)];

                        if (!chip.isHole() && !chip.isBonus() && !chip.isStoneHeart()) {
                            chip.convertToBonus([Chip.BONUS_BOMB, Chip.BONUS_4, Chip.BONUS_5][Utils.RandomRangeInt(0, 2)]);

                            break;
                        }
                    }
                }

                if (this.moves <= 0) {
                    this.lose();
                }
            }
        } catch (e) {
            this.inputState = this.INPUT_STATE_WAIT_SELECTION;
        }
    };

    PlayState.prototype.takeStockMatch = function (chip) {
        var x = chip.getIndexX();
        var y = chip.getIndexY();

        if (this.field[x][y] == chip) {
            if (this.goal == PlayState.GOAL_COUNT) {
                if (chip.getColorID() == this.goalChipID) {
                    this.chipGoalCount--;

                    if (this.chipGoalCount <= 0) {
                        this.chipGoalCount = 0;

                        this.win();
                    }

                    this.goalLabel.setText(this.chipGoalCount.toString());
                }
            }
        }
    };

    PlayState.prototype.clearCell = function (chip) {
        var x = chip.getIndexX();
        var y = chip.getIndexY();

        if (this.field[x][y] == chip) {
            if (this.goal == PlayState.GOAL_COUNT) {
                if (chip.getColorID() == this.goalChipID) {
                    this.chipGoalCount--;

                    if (this.chipGoalCount <= 0) {
                        this.chipGoalCount = 0;

                        this.win();
                    }

                    this.goalLabel.setText(this.chipGoalCount.toString());
                }
            }

            if (chip.getMatchReason() == Chip.MATCH_REASON_BONUS_EFFECT_5 || chip.getMatchReason() == Chip.MATCH_REASON_BONUS_EFFECT_4_HOR || chip.getMatchReason() == Chip.MATCH_REASON_BONUS_EFFECT_4_VERT) {
                this.runParticleEffect(chip.x, chip.y - Constants.CELL_SIZE / 2);
            }

            this.field[x][y] = null;
        }
        this.tryClearDirt(x, y);

        if (!chip.isStoneHeart()) {
            this.tryClearStoneHeart(x, y);
        }
    };

    PlayState.prototype.tryClearDirt = function (x, y) {
        var dirt = this.fieldDirt[x][y];
        if (dirt) {
            createjs.Tween.get(dirt, { loop: false }).to({ alpha: 0 }, 250, createjs.Ease.linear);

            //dirt.parent.removeChild(dirt);
            this.fieldDirt[x][y] = null;

            if (--this.dirtCount == 0) {
                this.win();
            }
        }

        if (this.goal == PlayState.GOAL_DIRT) {
            this.goalLabel.setText(this.dirtCount.toString());
        }
    };

    PlayState.prototype.tryClearStoneHeart = function (x, y) {
        try  {
            var chip;

            chip = this.getChipAt(x + 1, y);
            if (chip && chip.isStoneHeart()) {
                chip.fallDown(); // match("");
            }

            chip = this.getChipAt(x - 1, y);
            if (chip && chip.isStoneHeart()) {
                chip.fallDown();
            }

            chip = this.getChipAt(x, y + 1);
            if (chip && chip.isStoneHeart()) {
                chip.fallDown();
            }

            chip = this.getChipAt(x, y - 1);
            if (chip && chip.isStoneHeart()) {
                chip.fallDown();
            }
        } catch (e) {
        }
    };

    PlayState.prototype.finishLevel = function () {
        for (var x = 0; x < this.fieldWidth; x++) {
            for (var y = 0; y < this.fieldHeight; y++) {
                if (this.field[x][y] != null && this.field[x][y].isNormal()) {
                    this.field[x][y].fallDown();
                }
            }
        }
    };

    PlayState.prototype.lose = function () {
        if (!this.waitLose) {
            this.waitLose = true;

            this.addGameObjectAt(new TimeIsUpEffect(Constants.IMAGE_OUT_OF_MOVES), this);

            SoundManager.g_instance.play(SoundManager.SOUND_LOSE);
        }
    };

    PlayState.prototype.win = function () {
        if (!this.waitWin) {
            this.waitWin = true;

            SoundManager.g_instance.play(SoundManager.SOUND_WIN);
        }
    };

    PlayState.prototype.addPointsAt = function (chip, match_reason) {
        if (chip.getBonusType() == null) {
            var points = 40;

            switch (match_reason) {
                case Chip.MATCH_REASON_EXCHANGE_WIHT_BONUS:
                    points = 40;
                    break;

                case Chip.MATCH_REASON_BONUS_EFFECT_5:
                    points = 100;
                    break;

                case Chip.MATCH_REASON_BONUS_EFFECT_4_HOR:
                    points = 90;
                    break;

                case Chip.MATCH_REASON_BONUS_EFFECT_4_VERT:
                    points = 120;
                    break;

                case Chip.MATCH_REASON_I_AM_BONUS:
                    points = 150;
                    break;

                default:
                    points = 40 + this.matchInARow * 20;
                    break;
            }

            var effect = new FlyingPoints(points);
            this.score += points;

            var pos_x = chip.x - Constants.CELL_SIZE / 2;
            var pos_y = chip.y - Constants.CELL_SIZE / 2;

            //this.tryShowAwesome(pos_x, pos_y);
            this.tryShowSuperb(pos_x, pos_y);

            this.addGameObjectAtPos(effect, this, pos_x, pos_y);//weisuiyu
        }
    };

    PlayState.prototype.tryShowSuperb = function (x, y) {
        if (this.matchInARow >= 3 && this.superbEffectTime != this.liveTime) {
            this.superbEffectTime = this.liveTime;

            var superb = new SuperbEffect();
            this.addGameObjectAtPos(superb, this, x, y);

            SoundManager.g_instance.play(SoundManager.SOUND_AWESOME);

            if (superb.x < 120) {
                superb.x = 120;
            }

            if (superb.x > Constants.ASSETS_WIDTH - 120) {
                superb.x = Constants.ASSETS_WIDTH - 120;
            }

            this.score += 500;

            return true;
        }

        return false;
    };

    PlayState.prototype.tryShowAwesome = function (x, y) {//weisuiyu
        if (this.matchInARow == 2 && this.awesomeEffectTime != this.liveTime) {
            this.awesomeEffectTime = this.liveTime;

            var awesome = new ShowAwesomeEffect();
            this.addGameObjectAtPos(awesome, this, x, y);

            SoundManager.g_instance.play(SoundManager.SOUND_AWESOME);

            if (awesome.x < 120) {
                awesome.x = 120;
            }

            if (awesome.x > Constants.ASSETS_WIDTH - 120) {
                awesome.x = Constants.ASSETS_WIDTH - 120;
            }

            this.score += 200;

            return true;
        }

        return false;
    };

    PlayState.prototype.findMoves = function () {
        try  {
            var right_hor_pattern = [[2, -1], [3, 0], [2, 1]];
            var left_hor_pattern = [[-1, -1], [-2, 0], [-1, 1]];
            var center_hor_pattern = [[1, -1], [1, 1]];

            for (var y = 0; y < this.fieldHeight; y++) {
                for (var x = 0; x < this.fieldWidth - 1; x++) {
                    if (this.field[x][y].getColorID() == this.field[x + 1][y].getColorID()) {
                        if (this.findPattern(x, y, this.field[x][y].getColorID(), right_hor_pattern, x + 2, y)) {
                            return true;
                        }

                        if (this.findPattern(x, y, this.field[x][y].getColorID(), left_hor_pattern, x - 1, y)) {
                            return true;
                        }
                    }
                }
            }

            for (var y = 0; y < this.fieldHeight; y++) {
                for (var x = 0; x < this.fieldWidth - 2; x++) {
                    if (this.field[x][y].getColorID() == this.field[x + 2][y].getColorID()) {
                        if (this.findPattern(x, y, this.field[x][y].getColorID(), center_hor_pattern, x + 1, y)) {
                            return true;
                        }
                    }
                }
            }

            var bottom_vert_pattern = [[-1, 2], [0, 3], [1, 2]];
            var top_vert_pattern = [[-1, -1], [0, -2], [1, -1]];
            var center_vert_pattern = [[-1, 1], [1, 1]];

            for (var y = 0; y < this.fieldHeight - 1; y++) {
                for (var x = 0; x < this.fieldWidth; x++) {
                    if (this.field[x][y].getColorID() == this.field[x][y + 1].getColorID()) {
                        if (this.findPattern(x, y, this.field[x][y].getColorID(), bottom_vert_pattern, x, y + 2)) {
                            return true;
                        }

                        if (this.findPattern(x, y, this.field[x][y].getColorID(), top_vert_pattern, x, y - 1)) {
                            return true;
                        }
                    }
                }
            }

            for (var y = 0; y < this.fieldHeight - 2; y++) {
                for (var x = 0; x < this.fieldWidth; x++) {
                    if (this.field[x][y].getColorID() == this.field[x][y + 2].getColorID()) {
                        if (this.findPattern(x, y, this.field[x][y].getColorID(), center_vert_pattern, x, y + 1)) {
                            return true;
                        }
                    }
                }
            }
        } catch (e) {
            console.log(e, "playstate::findmoves");

            return false;
        }

        return false;
    };

    PlayState.prototype.findPattern = function (x, y, color, pattern, sec_x, sec_y) {
        //  bonus cant match
        if (color <= 0) {
            return false;
        }

        //  bug here ????
        if (sec_x < 0 || sec_x >= this.fieldWidth || sec_y < 0 || sec_y >= this.fieldHeight) {
            return false;
        }

        if (this.field[sec_x][sec_y] && this.field[sec_x][sec_y].isHole()) {
            return false;
        }

        for (var i = 0; i < pattern.length; i++) {
            var col_at = this.getColorAt(x + pattern[i][0], y + pattern[i][1]);

            if (col_at <= 0) {
                continue;
            }

            //  find any of pattern
            if (col_at == color) {
                this.findedMatchPos1 = new createjs.Point(sec_x, sec_y);
                this.findedMatchPos2 = new createjs.Point(x + pattern[i][0], y + pattern[i][1]);

                return true;
            }
        }

        return false;
    };

    PlayState.prototype.setHintIndeces = function (x1, y1, x2, y2) {
        this.findedMatchPos1 = new createjs.Point(x1, y1);
        this.findedMatchPos2 = new createjs.Point(x2, y2);
    };

    PlayState.prototype.getChipAt = function (x, y) {
        if (x < 0 || y < 0 || x >= this.fieldWidth || y >= this.fieldHeight || !this.field[x][y] || this.field[x][y].isHole()) {
            return null;
        }

        return this.field[x][y];
    };

    PlayState.prototype.getColorAt = function (x, y) {
        if (x < 0 || y < 0 || x >= this.fieldWidth || y >= this.fieldHeight || !this.field[x][y] == null) {
            return -1;
        }

        return this.field[x][y].getColorID();
    };

    PlayState.prototype.onShiftEnded = function () {
        if (this.liveTime != this.lastDropSoundTime) {
            this.lastDropSoundTime = this.liveTime;

            var id = Utils.RandomRangeInt(0, 2);

            for (var i = 0; id == this.lastDropID && i < 10; i++) {
                id = Utils.RandomRangeInt(0, 2);
            }
            this.lastDropID = id;

            switch (id) {
                case 0:
                    SoundManager.g_instance.play(SoundManager.SOUND_DROP_1);
                    break;

                case 1:
                    SoundManager.g_instance.play(SoundManager.SOUND_DROP_2);
                    break;

                case 2:
                    SoundManager.g_instance.play(SoundManager.SOUND_DROP_3);
                    break;
            }
        }
    };

    PlayState.prototype.configureYAlign = function () {
        if (Constants.g_isPC) {
            return;
        }

        if (Constants.SCREEN_HEIGHT < Constants.ASSETS_HEIGHT) {
            this.y = Constants.SCREEN_HEIGHT - Constants.ASSETS_HEIGHT;
        } else if (Constants.SCREEN_HEIGHT > Constants.ASSETS_HEIGHT) {
            this.y = (Constants.SCREEN_HEIGHT - Constants.ASSETS_HEIGHT) / 2;

            var bottom_shape = new createjs.Shape();
            bottom_shape.graphics.beginFill("#b5389c");
            bottom_shape.graphics.drawRect(0, Constants.ASSETS_HEIGHT, Constants.ASSETS_WIDTH, Constants.SCREEN_HEIGHT - Constants.ASSETS_HEIGHT + 1);
            bottom_shape.graphics.endFill();
            this.addChild(bottom_shape);

            var top_shape = new createjs.Shape();
            top_shape.graphics.beginFill("#b5389c");
            top_shape.graphics.drawRect(0, Constants.ASSETS_HEIGHT - Constants.SCREEN_HEIGHT, Constants.ASSETS_WIDTH, Constants.SCREEN_HEIGHT - Constants.ASSETS_HEIGHT);
            top_shape.graphics.endFill();
            this.addChild(top_shape);
        }
    };

    PlayState.prototype.runParticleEffect = function (pos_x, pos_y) {
        var speed = 80;

        var count = Utils.RandomRangeInt(3, 4);
        for (var i = 0; i < count; i++) {
            var angle = Utils.RadToGrad(Utils.RandomRange(0, 360));

            var effect = new HeartParticle(Math.cos(angle) * speed, Math.sin(angle) * speed);

            this.addGameObject(effect);
            this.addChild(effect);
            effect.x = pos_x + Utils.RandomRange(-Constants.CELL_SIZE / 3, Constants.CELL_SIZE / 3);
            effect.y = pos_y + Utils.RandomRange(-Constants.CELL_SIZE / 3, Constants.CELL_SIZE / 3);
        }
    };
    PlayState.g_curLevel = -1;

    PlayState.GOAL_DIRT = "GOAL_DIRT";
    PlayState.GOAL_COUNT = "GOAL_COUNT";
    return PlayState;
})(GameState);
/// <reference path="references.ts" />
var SelectLevelButton = (function (_super) {
    __extends(SelectLevelButton, _super);
    function SelectLevelButton(name, callback, num) {
        _super.call(this, name, callback);
        this.locked = false;

        this.levelNum = num;

        if (num < GameData.getInstance().levelsAvailable()) {
            var text = new DNTextField((num + 1).toString(), "sel_", -6);

            //text.setColor(255, 232, 200);
            this.addChild(text);

            //"#255E8C8"
            var scale = 0.65;

            text.scaleX = text.scaleY = scale;

            text.x = -text.getBounds().width / 2 * scale + 5;
            text.y = -text.getBounds().height / 2 * scale - 7;
        } else {
            this.locked = true;

            var lock = AssetsManager.g_instance.getCenteredImage(Constants.IMAGE_LOCK);
            lock.y -= 5;
            lock.x += 4;
            this.addChild(lock);
        }
    }
    SelectLevelButton.prototype.onMouseDown = function (x, y) {
        if (this.locked) {
            return;
        }

        _super.prototype.onMouseDown.call(this, x, y);

        this.touchY = y;
    };

    SelectLevelButton.prototype.onMouseUp = function (x, y) {
        if (Math.abs(y - this.touchY) > 30) {
            this.deselect();
            return;
        }

        _super.prototype.onMouseUp.call(this, x, y);
    };

    SelectLevelButton.prototype.runFunc = function () {
        StateManager.g_instance.pushState(new ShadeInState(new PlayState(this.levelNum, true)));
    };
    return SelectLevelButton;
})(DNButton);
/// <reference path="references.ts" />
var TaskEffect = (function (_super) {
    __extends(TaskEffect, _super);
    function TaskEffect(task, count, type) {
        var _this = this;
        _super.call(this);

        if (task == PlayState.GOAL_DIRT) {
            var img = AssetsManager.g_instance.getCenteredImageWithProxy(Constants.IMAGE_TASK_PANEL);
            this.addChild(img);

            this.addChild(img);
            var blabla_text = new createjs.Text(StringManager.getInstance().getString(StringManager.STRING_CLEAR), "bold 33px Times New Roman", "#6f6aa4");
            blabla_text.textAlign = "center";
            blabla_text.y = -23;
            img.addChild(blabla_text);
        } else {
            var img = AssetsManager.g_instance.getCenteredImageWithProxy(Constants.IMAGE_TASK_PANEL);
            this.addChild(img);

            var blabla_text = new createjs.Text(StringManager.getInstance().getString(StringManager.STRING_REMOVE), "bold 33px Times New Roman", "#6f6aa4");
            blabla_text.textAlign = "right";
            blabla_text.y = -23;
            img.addChild(blabla_text);

            var text = new DNTextField(count.toString(), "font_", -3);
            img.addChild(text);
            text.x = 10;
            text.y = -20;

            var goal_sprite = AssetsManager.g_instance.getCenteredImageWithProxy("cake_" + type);
            goal_sprite.scaleX = goal_sprite.scaleY = 0.70;
            img.addChild(goal_sprite);
            goal_sprite.x = 92;
            goal_sprite.y = -2;
        }

        this.y = -200;
        this.x = Constants.ASSETS_WIDTH * 0.5;
        this.alpha = 0;

        createjs.Tween.get(this, { loop: false }).wait(1300).to({ y: Constants.ASSETS_HEIGHT * 0.5, alpha: 1 }, 650, createjs.Ease.backOut).wait(2200).to({ y: Constants.ASSETS_HEIGHT + 200, alpha: 0 }, 400, createjs.Ease.backIn).call(function () {
            return _this.kill();
        });
    }
    return TaskEffect;
})(GameObject);
/// <reference path="MainMenuState.ts" />
var WinState = (function (_super) {
    __extends(WinState, _super);
    function WinState(level, score) {
        var _this = this;
        _super.call(this);
        this.panel = new createjs.Container();
        this.hiddingNow = false;

        GameData.getInstance().onWinLevel(level, score);

        //  shading
        this.shader = new createjs.Shape();
        this.shader.graphics.beginFill("#000000");
        this.shader.graphics.drawRect(0, 0, Constants.ASSETS_WIDTH, Constants.SCREEN_HEIGHT);
        this.shader.graphics.endFill();
        this.addChild(this.shader);
        this.shader.alpha = 0;
        this.shaderTween = createjs.Tween.get(this.shader, { loop: false }).wait(400).to({ alpha: 0.4 }, 800, createjs.Ease.linear);

        this.addChild(this.panel);
        this.panel.x = Constants.ASSETS_WIDTH / 2;
        this.panel.y = Constants.SCREEN_HEIGHT / 2;

        var panel = AssetsManager.g_instance.getCenteredImage(Constants.IMAGE_MESSAGE_WINDOW);
        this.panel.addChild(panel);

        var button_restart = new DNButton(Constants.IMAGE_BUTTON_RESTART, function () {
            return _this.onRestartTouch();
        });
        this.panel.addChild(button_restart);
        this.addGuiObject(button_restart);
        button_restart.x = 0;
        button_restart.y = 125;

        var button_exit = new DNButton(Constants.IMAGE_BUTTON_EXIT, function () {
            return _this.onExitTouch();
        });
        this.panel.addChild(button_exit);
        this.addGuiObject(button_exit);
        button_exit.x = -150;
        button_exit.y = 125;

        var button_next = new DNButton(Constants.IMAGE_BUTTON_PLAY, function () {
            return _this.onNextTouch();
        });
        this.panel.addChild(button_next);
        this.addGuiObject(button_next);
        button_next.x = +150;
        button_next.y = 125;

        var caption = AssetsManager.g_instance.getCenteredImageWithProxy(Constants.IMAGE_WIN_CAPTION);
        this.panel.addChild(caption);
        caption.y = -270;

        //----------------------------------
        var caption_x = -180;
        var digits_x = +180;

        this.panel.alpha = 0.0;
        createjs.Tween.get(this.panel, { loop: false }).to({ alpha: 1 }, 200, createjs.Ease.linear);

        this.panel.scaleX = 0.7;
        this.panel.scaleY = 0.7;
        createjs.Tween.get(this.panel, { loop: false }).to({ scaleX: 1, scaleY: 1 }, 400, createjs.Ease.backOut);

        var strings_img = AssetsManager.g_instance.getImage(Constants.IMAGE_WIN_STRINGS);
        this.panel.addChild(strings_img);
        strings_img.x = -170;
        strings_img.y = -120;

        var score_string = new DNTextField(Utils.GetScoreString(score), "font_", 0);
        this.panel.addChild(score_string);
        score_string.x = -68;
        score_string.y = -104;
        score_string.scaleX = score_string.scaleY = 1.15;

        var total_string = new DNTextField(Utils.GetScoreString(GameData.getInstance().getTotalScore()), "font_", 0);
        this.panel.addChild(total_string);
        total_string.x = -68;
        total_string.y = -17;
        total_string.scaleX = total_string.scaleY = 1.15;

        try  {
            SG_Hooks.levelUp(level, score); // when player levels up
        } catch (e) {
            console.log("error SG_Hooks.levelUp(level, score);");
        }
    }
    WinState.prototype.hide = function () {
        if (!this.hiddingNow) {
            createjs.Tween.get(this.shader, { loop: false }).to({ alpha: 0.0 }, 400, createjs.Ease.linear).call(function () {
                StateManager.g_instance.popState();
            });

            createjs.Tween.get(this.panel, { loop: false }).to({ y: -300 }, 300, createjs.Ease.backIn);
            createjs.Tween.get(this.panel, { loop: false }).to({ alpha: 0 }, 300, createjs.Ease.linear);

            this.hiddingNow = true;
        }
    };

    WinState.prototype.onRestartTouch = function () {
        _hmt.push(["_trackEvent", "button", "Restart"]);
        LBShare.showAd({pos: 'banner', hide: true });
        LBShare.showAd({pos: 'top', hide: true });
        LBShare.showAd({pos: 'footer', hide: true });
        StateManager.g_instance.pushState(new ShadeInCircleState(new PlayState(PlayState.g_curLevel, false)));
    };

    WinState.prototype.onExitTouch = function () {
        StateManager.g_instance.pushState(new ShadeInState(new SelectLevelState()));
    };

    WinState.prototype.onNextTouch = function () {
        //
        if (PlayState.g_curLevel + 1 < GameData.getInstance().levelsAvailable()) {
            StateManager.g_instance.pushState(new ShadeInState(new PlayState(PlayState.g_curLevel + 1, true)));
        } else {
            StateManager.g_instance.pushState(new ShadeInState(new SelectLevelState()));
        }
    };
    return WinState;
})(GameState);
//# sourceMappingURL=game.min.js.map
