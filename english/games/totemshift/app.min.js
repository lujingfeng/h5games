var __extends = this.__extends || function(d, b) {
    for (var p in b)
        if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() {
        this.constructor = d;
    }
    __.prototype = b.prototype;
    d.prototype = new __();
};
var H812;
(function(H812) {
    var Boot = (function(_super) {
        __extends(Boot, _super);

        function Boot() {
            _super.apply(this, arguments);
        }
        Boot.prototype.preload = function() {
            this.load.image('loader_empty', 'assets/loader/loader_empty.png');
            this.load.image('loader_full', 'assets/loader/loader_full.png');
            var logoData = H812.API.getLogo(false);
            if (logoData != null && logoData != undefined) {
                this.load.crossOrigin = true;
                this.load.image('logo_sponsor', logoData.image);
                console.log('API_LOAD_LOGO');
            }
        };
        Boot.prototype.create = function() {
            this.input.maxPointers = 1;
            this.stage.disableVisibilityChange = false;
            this.stage.backgroundColor = '#ffffff';
            this.game.time.advancedTiming = true;
            this.scale.scaleMode = Phaser.ScaleManager.SHOW_ALL;
            this.scale.pageAlignHorizontally = true;
            this.scale.pageAlignVertically = true;
            if (!this.game.device.desktop) {
                this.scale.forceOrientation(false, true);
                this.scale.enterIncorrectOrientation.add(this.enterIncorrectOrientation, this);
                this.scale.leaveIncorrectOrientation.add(this.leaveIncorrectOrientation, this);
                this.scale.setScreenSize(true);
            }
            this.scale.setShowAll();
            this.scale.refresh();
            this.game.state.start('Preloader', true, false);
        };
        Boot.prototype.enterIncorrectOrientation = function() {
            document.getElementById('orientation').style.display = 'block';
        };
        Boot.prototype.leaveIncorrectOrientation = function() {
            document.getElementById('orientation').style.display = 'none';
        };
        return Boot;
    })(Phaser.State);
    H812.Boot = Boot;
})(H812 || (H812 = {}));
var H812;
(function(H812) {
    var HUtils = (function() {
        function HUtils() {}
        HUtils.formatScore = function(aValue) {
            var str = '';
            if (aValue > 999)
                str = '';
            else if (aValue > 99)
                str = '0';
            else if (aValue > 9)
                str = '00';
            else
                str = '000';
            str += aValue.toString();
            return str;
        };
        HUtils.copyProp = function(aPropFrom, aPropTo) {
            if (typeof aPropTo === "undefined") {
                aPropTo = null;
            }
            if (aPropTo == null)
                aPropTo = {};
            var prop;
            for (prop in aPropFrom) {
                aPropTo[prop] = aPropFrom[prop];
            }
            return aPropTo;
        };
        HUtils.copyData = function(aDataFrom, aDataTo, aStep, aReverse) {
            if (typeof aDataTo === "undefined") {
                aDataTo = null;
            }
            if (typeof aStep === "undefined") {
                aStep = 1;
            }
            if (typeof aReverse === "undefined") {
                aReverse = false;
            }
            if (aDataTo == null)
                aDataTo = [];
            var i = 0;
            var l = aDataFrom.length;
            var prop;
            if (aReverse) {
                i = l - 1;
                while (i >= 0) {
                    prop = aDataFrom[i];
                    aDataTo.push(this.copyProp(prop));
                    i -= aStep;
                }
            } else {
                i = 0;
                while (i < l) {
                    prop = aDataFrom[i];
                    aDataTo.push(this.copyProp(prop));
                    i += aStep;
                }
            }
            return aDataTo;
        };
        HUtils.checkInRange = function(aValue, aMin, aMax) {
            return !(aValue < aMin || aValue > aMax);
        };
        HUtils.getInRange = function(aValue, aMin, aMax) {
            if (aValue < aMin)
                aValue = aMin;
            else if (aValue > aMax)
                aValue = aMax;
            return aValue;
        };
        HUtils.getDistance = function(aX1, aY1, aX2, aY2) {
            var dx = aX1 - aX2;
            var dy = aY1 - aY2;
            return Math.sqrt(dx * dx + dy * dy);
        };
        HUtils.getDistanceSqr = function(aX1, aY1, aX2, aY2) {
            var dx = aX1 - aX2;
            var dy = aY1 - aY2;
            return (dx * dx + dy * dy);
        };
        return HUtils;
    })();
    H812.HUtils = HUtils;
})(H812 || (H812 = {}));
var H812;
(function(H812) {
    var HText = (function(_super) {
        __extends(HText, _super);

        function HText(aGame, aFont, aName, aText, aX, aY, aSize) {
            if (typeof aText === "undefined") {
                aText = '';
            }
            if (typeof aX === "undefined") {
                aX = 0;
            }
            if (typeof aY === "undefined") {
                aY = 0;
            }
            if (typeof aSize === "undefined") {
                aSize = 10;
            }
            _super.call(this, aGame, aX, aY, aFont, aText, aSize);
            this.name = aName;
            this._numberCounter = false;
            this._numberValue = 0;
        }
        HText.prototype.setText = function(aText) {
            _super.prototype.setText.call(this, aText);
            this._numberCounter = false;
        };
        HText.prototype.isNumber = function() {
            return this._numberCounter;
        };
        HText.prototype.getNumber = function() {
            return this._numberValue;
        };
        HText.prototype.setNumber = function(aValue) {
            this._numberValue = aValue;
            this._numberCounter = true;
            _super.prototype.setText.call(this, this._numberValue.toString());
        };
        return HText;
    })(Phaser.BitmapText);
    H812.HText = HText;
})(H812 || (H812 = {}));
var H812;
(function(H812) {
    var HDialog = (function(_super) {
        __extends(HDialog, _super);

        function HDialog(aGame, aParent, aName, aAddedToStage) {
            _super.call(this, aGame, aParent, aName, aAddedToStage);
            this.onButtonUp = new Phaser.Signal();
            this._tweenStatus = 1;
            this._tweenData = null;
            this._tweenDataIndex = -1;
            this._tweenType = 0;
            this.visible = true;
            this.inputEnable = true;
        }
        HDialog.prototype.destroyAll = function() {
            var i = 0;
            var l = this.children.length;
            var child;
            while (i < l) {
                child = this.children[i++];
                if (child == null && child == undefined)
                    continue;
                if (child instanceof Phaser.Sprite) {
                    child.destroy();
                } else if (child instanceof Phaser.BitmapText) {
                    child.destroy();
                } else if (child instanceof Phaser.Image) {
                    child.destroy();
                }
            }
            this.removeAll();
            return null;
        };
        HDialog.prototype.destroy = function(aDestroyChilds, aSoft) {
            this.inputEnable = false;
            this._tweenStatus = 1;
            this._tweenData = null;
            this._tweenDataIndex = -1;
            this._tweenType = 0;
            if (this.onButtonUp) {
                this.onButtonUp.dispose();
                this.onButtonUp = null;
            }
            _super.prototype.destroy.call(this, aDestroyChilds, aSoft);
        };
        HDialog.prototype.update = function() {
            this.updateTween();
            _super.prototype.update.call(this);
        };
        HDialog.prototype.add = function(aChild) {
            aChild = _super.prototype.add.call(this, aChild);
            if (aChild && aChild instanceof Phaser.Button) {
                var button = aChild;
                button.onInputUp.add(this.buttonUp, this);
                button.events.onRemovedFromGroup.addOnce(this.buttonRemovedFromGroup, this);
            }
            return aChild;
        };
        HDialog.prototype.addAt = function(aChild, aIndex) {
            aChild = _super.prototype.addAt.call(this, aChild, aIndex);
            if (aChild && aChild instanceof Phaser.Button) {
                var button = aChild;
                button.onInputUp.add(this.buttonUp, this);
                button.events.onRemovedFromGroup.addOnce(this.buttonRemovedFromGroup, this);
            }
        };
        HDialog.prototype.buttonRemovedFromGroup = function(aChild) {
            if (aChild && aChild instanceof Phaser.Button) {
                var button = aChild;
                button.onInputUp.remove(this.buttonUp, this);
            }
        };
        HDialog.prototype.buttonUp = function(aButton) {
            if (this.inputEnable && this.onButtonUp)
                this.onButtonUp.dispatch(aButton);
        };
        HDialog.prototype.getFirstByName = function(aName) {
            var i = 0;
            var l = this.children.length;
            var child;
            while (i < l) {
                child = this.children[i++];
                if (child == null && child == undefined)
                    continue;
                if (child instanceof Phaser.Sprite) {
                    if (child.name == aName)
                        return child;
                } else if (child instanceof Phaser.BitmapText) {
                    if (child.name == aName)
                        return child;
                } else if (child instanceof Phaser.Image) {
                    if (child.name == aName)
                        return child;
                }
            }
            return null;
        };
        HDialog.prototype.getFirstText = function(aName) {
            var child = this.getFirstByName(aName);
            if (child != null && child instanceof H812.HText)
                return child;
            return null;
        };
        HDialog.prototype.getFirstSprite = function(aName) {
            var child = this.getFirstByName(aName);
            if (child != null && child instanceof Phaser.Sprite)
                return child;
            return null;
        };
        HDialog.prototype.button = function(aKey, aName, aFrame, aX, aY, aAX, aAY) {
            if (typeof aFrame === "undefined") {
                aFrame = null;
            }
            if (typeof aX === "undefined") {
                aX = 0;
            }
            if (typeof aY === "undefined") {
                aY = 0;
            }
            if (typeof aAX === "undefined") {
                aAX = 0.5;
            }
            if (typeof aAY === "undefined") {
                aAY = 0.5;
            }
            var button;
            if (aFrame == null || aFrame == '' && aName != null && aName != '')
                aFrame = aName;
            button = new H812.HButton(this.game, aKey, aName, aFrame, null, null, aX, aY);
            button.anchor.setTo(aAX, aAY);
            this.add(button);
            return button;
        };
        HDialog.prototype.sprite = function(aKey, aName, aFrame, aX, aY, aAX, aAY) {
            if (typeof aFrame === "undefined") {
                aFrame = null;
            }
            if (typeof aX === "undefined") {
                aX = 0;
            }
            if (typeof aY === "undefined") {
                aY = 0;
            }
            if (typeof aAX === "undefined") {
                aAX = 0.5;
            }
            if (typeof aAY === "undefined") {
                aAY = 0.5;
            }
            var sprite;
            if (aFrame == null || aFrame == '' && aName != null && aName != '')
                aFrame = aName;
            sprite = new Phaser.Sprite(this.game, aX, aY, aKey, aFrame);
            sprite.name = aName;
            sprite.anchor.setTo(aAX, aAY);
            this.add(sprite);
            return sprite;
        };
        HDialog.prototype.text = function(aFont, aName, aText, aX, aY, aAlign, aSize) {
            if (typeof aText === "undefined") {
                aText = '';
            }
            if (typeof aX === "undefined") {
                aX = 0;
            }
            if (typeof aY === "undefined") {
                aY = 0;
            }
            if (typeof aAlign === "undefined") {
                aAlign = 'center';
            }
            if (typeof aSize === "undefined") {
                aSize = 10;
            }
            var text;
            text = new H812.HText(this.game, aFont, aName, aText, aX, aY, aSize);
            text.align = aAlign;
            this.add(text);
            return text;
        };
        HDialog.prototype.numberic = function(aFont, aName, aNum, aX, aY, aAlign, aSize) {
            if (typeof aX === "undefined") {
                aX = 0;
            }
            if (typeof aY === "undefined") {
                aY = 0;
            }
            if (typeof aAlign === "undefined") {
                aAlign = 'center';
            }
            if (typeof aSize === "undefined") {
                aSize = 10;
            }
            var text;
            text = new H812.HText(this.game, aFont, aName, '', aX, aY, aSize);
            text.align = aAlign;
            text.setNumber(aNum);
            this.add(text);
            return text;
        };
        HDialog.prototype.getTweenStatus = function() {
            return this._tweenStatus;
        };
        HDialog.prototype.hasTween = function() {
            return this._tweenData != null && this._tweenType != 0;
        };
        HDialog.prototype.isTweenRunning = function() {
            return this._tweenStatus != 1 && this._tweenData != null && this._tweenType != 0;
        };
        HDialog.prototype.setPositionTween = function(aStartX, aStartY, aEndX, aEndY, aSetAsShowed) {
            if (typeof aSetAsShowed === "undefined") {
                aSetAsShowed = false;
            }
            if (aStartX == aEndX && aStartY == aEndY) {
                this._tweenData = null;
                this._tweenDataIndex = -1;
                this._tweenStatus = 1;
                this.visible = aSetAsShowed;
                this.inputEnable = aSetAsShowed;
                this.x = aStartX;
                this.y = aStartY;
                this._tweenType = 0;
            } else {
                this._tweenData = [];
                this._tweenData.push({
                    x: aStartX,
                    y: aStartY
                });
                var data = {
                    x: aStartX,
                    y: aStartY
                };
                var tween = this.game.make.tween(data);
                var duration = 200;
                tween.to({
                    x: aEndX,
                    y: aEndY
                }, duration, Phaser.Easing.Back.InOut);
                this._tweenData = tween.generateData(60, this._tweenData);
                this._tweenData.push({
                    x: aEndX,
                    y: aEndY
                });
                this._tweenDataIndex = -1;
                this.visible = aSetAsShowed;
                this.inputEnable = aSetAsShowed;
                this._tweenType = 1;
                if (aSetAsShowed) {
                    this._tweenStatus = 1;
                    this.x = aStartX;
                    this.y = aStartY;
                } else {
                    this._tweenStatus = 3;
                    this.x = aEndX;
                    this.y = aEndY;
                }
            }
            return this;
        };
        HDialog.prototype.setAlphaTween = function(aStartAlpha, aEndAlpha, aSetAsShowed) {
            if (typeof aSetAsShowed === "undefined") {
                aSetAsShowed = false;
            }
            if (aStartAlpha == aEndAlpha) {
                this._tweenData = null;
                this._tweenDataIndex = -1;
                this._tweenStatus = 1;
                this.visible = aSetAsShowed;
                this.inputEnable = aSetAsShowed;
                this.alpha = aStartAlpha;
                this._tweenType = 0;
            } else {
                this._tweenData = [];
                this._tweenData.push({
                    alpha: aStartAlpha
                });
                var data = {
                    alpha: aStartAlpha
                };
                var tween = this.game.make.tween(data);
                var duration = 300;
                tween.to({
                    alpha: aEndAlpha
                }, duration, Phaser.Easing.Linear.None);
                this._tweenData = tween.generateData(60, this._tweenData);
                this._tweenData.push({
                    alpha: aEndAlpha
                });
                this._tweenDataIndex = -1;
                this.visible = aSetAsShowed;
                this.inputEnable = aSetAsShowed;
                this._tweenType = 2;
                if (aSetAsShowed) {
                    this._tweenStatus = 1;
                    this.alpha = aStartAlpha;
                } else {
                    this._tweenStatus = 3;
                    this.alpha = aEndAlpha;
                }
            }
            return this;
        };
        HDialog.prototype.applyTween = function() {
            if (this._tweenData == null || this._tweenData.length <= 0 || this._tweenType == 0)
                return;
            var index = this._tweenDataIndex;
            if (index == -1) {
                if (this._tweenStatus == 1)
                    index = 0;
                else if (this._tweenStatus == 3)
                    index = this._tweenData.length - 1;
                else
                    return;
            }
            if (this._tweenType == 1) {
                this.x = this._tweenData[index].x;
                this.y = this._tweenData[index].y;
            } else if (this._tweenType == 2) {
                this.alpha = this._tweenData[index].alpha;
            } else if (this._tweenType == 3) {
                this.scale.x = this._tweenData[index].x;
                this.scale.y = this._tweenData[index].y;
            }
        };
        HDialog.prototype.updateTween = function() {
            if (this._tweenDataIndex == -1 || this._tweenType == 0)
                return;
            if (this._tweenStatus == 2) {
                this.applyTween();
                this._tweenDataIndex++;
                if (this._tweenDataIndex >= this._tweenData.length) {
                    this.visible = true;
                    this._tweenStatus = 1;
                    this._tweenDataIndex = -1;
                    this.inputEnable = true;
                }
            } else if (this._tweenStatus == 4) {
                this.applyTween();
                this._tweenDataIndex--;
                if (this._tweenDataIndex <= 0) {
                    this.visible = false;
                    this._tweenStatus = 3;
                    this._tweenDataIndex = -1;
                    this.inputEnable = false;
                }
            }
        };
        HDialog.prototype.isShow = function(aWithTweenToo) {
            if (typeof aWithTweenToo === "undefined") {
                aWithTweenToo = false;
            }
            return this._tweenStatus == 1 || aWithTweenToo && this._tweenStatus == 2;
        };
        HDialog.prototype.isHide = function(aWithTweenToo) {
            if (typeof aWithTweenToo === "undefined") {
                aWithTweenToo = false;
            }
            return this._tweenStatus == 3 || aWithTweenToo && this._tweenStatus == 4;
        };
        HDialog.prototype.show = function(aFast, aRestart) {
            if (typeof aFast === "undefined") {
                aFast = false;
            }
            if (typeof aRestart === "undefined") {
                aRestart = false;
            }
            if (this._tweenStatus == 1)
                return;
            if (this._tweenData == null || this._tweenData.length <= 0 || aFast) {
                this.visible = true;
                this._tweenStatus = 1;
                this._tweenDataIndex = -1;
                this.inputEnable = true;
                this.applyTween();
            } else {
                this.visible = true;
                this._tweenStatus = 2;
                this.inputEnable = false;
                if (aRestart || this._tweenDataIndex == -1)
                    this._tweenDataIndex = 0;
                this.applyTween();
            }
            return this;
        };
        HDialog.prototype.hide = function(aFast, aRestart) {
            if (typeof aFast === "undefined") {
                aFast = false;
            }
            if (typeof aRestart === "undefined") {
                aRestart = false;
            }
            if (this._tweenStatus == 3)
                return;
            if (this._tweenData == null || this._tweenData.length <= 0 || aFast) {
                this.visible = false;
                this._tweenStatus = 3;
                this._tweenDataIndex = -1;
                this.inputEnable = false;
                this.applyTween();
            } else {
                this.visible = true;
                this._tweenStatus = 4;
                this.inputEnable = false;
                if (aRestart || this._tweenDataIndex == -1)
                    this._tweenDataIndex = this._tweenData.length - 1;
                this.applyTween();
            }
            return this;
        };
        return HDialog;
    })(Phaser.Group);
    H812.HDialog = HDialog;
})(H812 || (H812 = {}));
var H812;
(function(H812) {
    var HButton = (function(_super) {
        __extends(HButton, _super);

        function HButton(aGame, aKey, aName, aFrame, aCallback, aCallbackContext, aX, aY) {
            if (typeof aFrame === "undefined") {
                aFrame = null;
            }
            if (typeof aCallback === "undefined") {
                aCallback = null;
            }
            if (typeof aCallbackContext === "undefined") {
                aCallbackContext = null;
            }
            if (typeof aX === "undefined") {
                aX = 0;
            }
            if (typeof aY === "undefined") {
                aY = 0;
            }
            _super.call(this, aGame, aX, aY, aKey, null, null);
            this.name = aName;
            if (aFrame == null || aFrame == '')
                aFrame = aName;
            this.setFrames(aFrame, aFrame, aFrame, aFrame);
            this.onInputDown.add(this.buttonDown, this);
            if (aCallback != null)
                this.onInputUp.add(aCallback, aCallbackContext);
            this.tweenDIndex = -1;
            HButton.generateTweenDData(aGame);
        }
        HButton.generateTweenDData = function(aGame) {
            if (HButton.tweenDData == null) {
                var data = {
                    x: 1.0,
                    y: 1.0
                };
                var tween = aGame.make.tween(data);
                tween.to({
                    x: 1.12,
                    y: 1.12
                }, 120, Phaser.Easing.Back.InOut, false, 0, 0, true);
                HButton.tweenDData = tween.generateData(60, undefined);
            }
            return HButton.tweenDData;
        };
        HButton.prototype.update = function() {
            if (this.tweenDIndex != -1) {
                var data = HButton.tweenDData;
                this.scale.x = data[this.tweenDIndex].x;
                this.scale.y = data[this.tweenDIndex].y;
                this.tweenDIndex++;
                if (this.tweenDIndex >= data.length)
                    this.tweenDIndex = -1;
            }
            _super.prototype.update.call(this);
        };
        HButton.prototype.isParentActive = function() {
            if (this.parent instanceof H812.HDialog) {
                var parentDialog = this.parent;
                return parentDialog.inputEnable;
            }
            return true;
        };
        HButton.prototype.buttonDown = function() {
            if (this.isParentActive())
                this.tweenDIndex = 0;
        };
        HButton.prototype.setOneFrame = function(aFrame) {
            this.setFrames(aFrame, aFrame, aFrame, aFrame);
        };
        return HButton;
    })(Phaser.Button);
    H812.HButton = HButton;
})(H812 || (H812 = {}));
var H812;
(function(H812) {
    (function(HTransitionType) {
        HTransitionType[HTransitionType["NONE"] = 0] = "NONE";
        HTransitionType[HTransitionType["ALPHA"] = 1] = "ALPHA";
        HTransitionType[HTransitionType["SCALING"] = 2] = "SCALING";
        HTransitionType[HTransitionType["POSITION_TOP"] = 3] = "POSITION_TOP";
        HTransitionType[HTransitionType["POSITION_SHIFT"] = 4] = "POSITION_SHIFT";
    })(H812.HTransitionType || (H812.HTransitionType = {}));
    var HTransitionType = H812.HTransitionType;
    var HTransition = (function(_super) {
        __extends(HTransition, _super);

        function HTransition(aGame, aParent, aType) {
            if (typeof aType === "undefined") {
                aType = 4;
            }
            _super.call(this, aGame, aParent);
            this.onTransition = new Phaser.Signal();
            this.generateTween(aType);
            this.active = this.visible = false;
            this._sprite = null;
            this._spriteKey = null;
            this._tweenIndex = -1;
        }
        HTransition.prototype.destroy = function() {
            this._tweenData = null;
            this._tweenIndex = -1;
            this._tweenTransitionIndex = -1;
            this._tweenType = 0;
            if (this._sprite != null) {
                this._sprite.destroy();
                this._sprite = null;
            }
            if (this.onTransition) {
                this.onTransition.dispose();
                this.onTransition = null;
            }
            _super.prototype.destroy.call(this);
        };
        HTransition.prototype.update = function() {
            this.updateTween();
        };
        HTransition.prototype.setSpriteData = function(aSpriteKey, aSpriteFrame, aScaleFactor) {
            if (typeof aScaleFactor === "undefined") {
                aScaleFactor = 1;
            }
            this._spriteKey = aSpriteKey;
            this._spriteFrame = aSpriteFrame;
            this._spriteScaleFactor = aScaleFactor;
        };
        HTransition.prototype.makeSprite = function() {
            if (this._sprite != null) {
                if (this._sprite.exists && this._sprite.key == this._spriteKey) {
                    return this._sprite;
                }
                this._sprite = null;
            }
            if (this._spriteKey != null && this._spriteKey != undefined && this._spriteKey != '') {
                this._sprite = new Phaser.Sprite(this.game, 0, 0, this._spriteKey, this._spriteFrame);
                this._sprite.scale.set(this._spriteScaleFactor, this._spriteScaleFactor);
                this._sprite.x = this.game.world.centerX;
                this._sprite.y = this.game.world.centerY;
                this._sprite.anchor.setTo(0.5, 0.5);
            }
            return this._sprite;
        };
        HTransition.prototype.spriteBringToTop = function() {
            this.addSprite(true);
        };
        HTransition.prototype.addSprite = function(aBringToTop) {
            if (typeof aBringToTop === "undefined") {
                aBringToTop = true;
            }
            this._sprite = this.makeSprite();
            if (this._sprite != null) {
                this.game.world.add(this._sprite);
                if (aBringToTop)
                    this._sprite.bringToTop();
                this.applyTween();
            }
        };
        HTransition.prototype.removeSprite = function() {
            if (this._sprite != null) {
                if (this._sprite.exists && this._sprite.parent) {
                    this.game.world.remove(this._sprite);
                } else {
                    this._sprite = null;
                }
            }
        };
        HTransition.prototype.isRunning = function() {
            return this._tweenIndex != -1 && this.active && this.visible;
        };
        HTransition.prototype.generateTween = function(aType, aRegenerate) {
            if (typeof aRegenerate === "undefined") {
                aRegenerate = true;
            }
            if (aType == 0) {
                this._tweenTransitionIndex = this._tweenIndex = -1;
                this._tweenData = null;
                this._tweenType = 0;
                return;
            }
            if (this._tweenData == null || this._tweenData == undefined || this._tweenType != aType || aRegenerate) {
                this._tweenType = aType;
                var data;
                var propStart, propEnd;
                var tween;
                var fps = 60;
                var duration = 350;
                this._tweenData = [];
                switch (this._tweenType) {
                    case 1:
                    case 2:
                        propStart = {
                            value: 0
                        };
                        propEnd = {
                            value: 1
                        };
                        data = H812.HUtils.copyProp(propStart);
                        tween = this.game.make.tween(data);
                        if (this._tweenType == 1) {
                            tween.to(propEnd, duration, Phaser.Easing.Linear.None, false);
                        } else if (this._tweenType == 2) {
                            tween.to(propEnd, duration, Phaser.Easing.Linear.None, false);
                        }
                        this._tweenData = tween.generateData(fps, this._tweenData);
                        this._tweenData.shift(propStart);
                        for (var i = 0; i < 10; i++)
                            this._tweenData.push(H812.HUtils.copyProp(propEnd));
                        this._tweenTransitionIndex = this._tweenData.length - 1 - 5;
                        H812.HUtils.copyData(this._tweenData, this._tweenData, 2, true);
                        break;
                    case 3:
                    case 4:
                        propStart = {
                            value: -this.game.world.centerY
                        };
                        propEnd = {
                            value: this.game.world.centerY
                        };
                        data = H812.HUtils.copyProp(propStart);
                        tween = this.game.make.tween(data);
                        tween.to(propEnd, duration, Phaser.Easing.Linear.None, false);
                        this._tweenData = tween.generateData(fps, this._tweenData);
                        this._tweenData.shift(propStart);
                        for (var i = 0; i < 10; i++)
                            this._tweenData.push(H812.HUtils.copyProp(propEnd));
                        this._tweenTransitionIndex = this._tweenData.length - 1 - 5;
                        if (this._tweenType == 3) {
                            H812.HUtils.copyData(this._tweenData, this._tweenData, 2, true);
                        } else if (this._tweenType == 4) {
                            propStart = {
                                value: this.game.world.centerY
                            };
                            propEnd = {
                                value: this.game.height + this.game.world.centerY
                            };
                            data = H812.HUtils.copyProp(propStart);
                            tween = this.game.make.tween(data);
                            tween.to(propEnd, duration * 0.7, Phaser.Easing.Linear.None, false);
                            this._tweenData = tween.generateData(fps, this._tweenData);
                        }
                        break;
                }
            }
        };
        HTransition.prototype.applyTween = function() {
            switch (this._tweenType) {
                case 1:
                    this._sprite.alpha = this._tweenData[this._tweenIndex].value;
                    break;
                case 2:
                    this._sprite.scale.x = this._sprite.scale.y = this._tweenData[this._tweenIndex].value * this._spriteScaleFactor;
                    break;
                case 3:
                case 4:
                    this._sprite.y = this._tweenData[this._tweenIndex].value;
                    break;
            }
        };
        HTransition.prototype.updateTween = function() {
            if (this._tweenIndex == -1 || this._sprite == null) {
                this.active = this.visible = false;
                return;
            }
            this.applyTween();
            this._tweenIndex++;
            if (this._tweenIndex == this._tweenTransitionIndex) {
                this.runNextState();
                this.onTransition.dispatch();
            }
            if (this._tweenIndex >= this._tweenData.length) {
                this.active = this.visible = false;
                this._tweenIndex = -1;
                this.removeSprite();
            }
        };
        HTransition.prototype.to = function(aState, aFast, aClearWorld, aClearCache) {
            if (typeof aFast === "undefined") {
                aFast = false;
            }
            var args = [];
            for (var _i = 0; _i < (arguments.length - 4); _i++) {
                args[_i] = arguments[_i + 4];
            }
            this.setNextState(aState, aClearWorld, aClearCache, args);
            if (aFast || this._tweenType == 0 || this._tweenData == null || this._spriteKey == null) {
                this.removeSprite();
                this.runNextState();
                this.onTransition.dispatch();
                this.active = this.visible = false;
                this._tweenIndex = -1;
            } else {
                this.active = this.visible = true;
                this._tweenIndex = 0;
                this.addSprite();
            }
        };
        HTransition.prototype.runNextState = function() {
            if (this.nextState != null || this.nextState != undefined || this.nextState != '') {
                this.game.state.start(this.nextState, this.nextStateWorld, this.nextStateCache, this.nextStateArgs);
                this.setNextState(null);
                return true;
            }
            return false;
        };
        HTransition.prototype.setNextState = function(aStateName, aClearWorld, aClearCache) {
            var args = [];
            for (var _i = 0; _i < (arguments.length - 3); _i++) {
                args[_i] = arguments[_i + 3];
            }
            if (aStateName == null || aStateName == undefined || aStateName == '') {
                this.nextState = null;
                this.nextStateWorld = false;
                this.nextStateCache = false;
                this.nextStateArgs = null;
            } else {
                this.nextState = aStateName;
                this.nextStateWorld = aClearWorld;
                this.nextStateCache = aClearCache;
                this.nextStateArgs = args;
            }
        };
        return HTransition;
    })(Phaser.Plugin);
    H812.HTransition = HTransition;
})(H812 || (H812 = {}));
var H812;
(function(H812) {
    var API = (function() {
        function API() {}
        API.getMoreGames = function(aAction) {
			/*
            if (typeof aAction === "undefined") {
                aAction = false;
            }
            if ((API.moreGames == null || API.moreGames == undefined) && (API.api != null && API.api != undefined)) {
                API.moreGames = API.api.Branding.getLink('more_games');
            }
            if (aAction && API.moreGames != null && API.moreGames != undefined)
                API.moreGames.action();
            return API.moreGames;
			*/
        };
        API.getLogo = function(aAction) {
			/*
            if (typeof aAction === "undefined") {
                aAction = false;
            }
            if ((API.logo == null || API.logo == undefined) && (API.api != null && API.api != undefined)) {
                API.logo = API.api.Branding.getLogo();
                if (API.logo.image == null || API.logo.image == undefined) {
                    API.logo = null;
                    return null;
                }
            }
            if (aAction && API.logo != null && API.logo != undefined)
                API.logo.action();
            return API.logo;
			*/
        };
        API.gotoLogo = function(aObj) {
            API.getLogo(true);
        };
        API.showADS = function() {
            try {
                API.api.GameBreak.request(API.pauseGame, API.resumeGame);
            } catch (e) {
                console.log(e);
            }
        };
        API.moreGames = null;
        API.logo = null;
        return API;
    })();
    H812.API = API;
    var Settings = (function() {
        function Settings(aGame, aName) {
            if (typeof aName === "undefined") {
                aName = 'h812_game';
            }
            this.game = aGame;
            this.name = aName;
            this.debug = false;
            this._score = 0;
            this.viewTutorialAlways = false;
            this.viewTutorial = true;
            if (Settings.isLocalStorageAvailable()) {
                var obj = localStorage.getItem('score');
                this._score = obj != null && obj != undefined ? (obj) : 0;
            }
        }
        Settings.prototype.setScore = function(aScore, aTestBest) {
            if (typeof aTestBest === "undefined") {
                aTestBest = true;
            }
            if (aTestBest && aScore < this._score)
                return false;
            this._score = aScore;
            if (!Settings.isLocalStorageAvailable())
                return false;
            try {
                localStorage.setItem('score', this._score.toString());
            } catch (e) {}
            return true;
        };
        Settings.prototype.getScore = function() {
            return this._score;
        };
        Settings.prototype.hasTutorial = function() {
            return this.viewTutorial || this.viewTutorialAlways;
        };
        Settings.isLocalStorageAvailable = function() {
            try {
                return window['localStorage'] != null && window['localStorage'] != undefined;
            } catch (e) {
                return false;
            }
        };
        Settings.makeInstance = function(aGame, aName) {
            if (Settings._instance == null) {
                Settings._instance = new Settings(aGame);
            }
            if (aName)
                Settings._instance.name = aName;
            return Settings._instance;
        };
        Settings.instance = function() {
            return Settings._instance;
        };
        return Settings;
    })();
    H812.Settings = Settings;
})(H812 || (H812 = {}));
var H812;
(function(H812) {
    var HState = (function(_super) {
        __extends(HState, _super);

        function HState() {
            this.settings = H812.Settings.instance();
            _super.call(this);
        }
        HState.makeTransition = function(aGame, aSpriteKey, aSpriteFrame, aType) {
            if (typeof aType === "undefined") {
                aType = 4;
            }
            if (HState._transition != null) {
                HState._transition.destroy();
                HState._transition = null;
            }
            var transition = new H812.HTransition(aGame, aGame.parent, aType);
            transition.setSpriteData(aSpriteKey, aSpriteFrame, 2);
            aGame.plugins.add(transition);
            HState._transition = transition;
            return HState._transition;
        };
        HState.transitionBringToTop = function() {
            if (HState._transition != null) {
                HState._transition.spriteBringToTop();
            }
        };
        HState.prototype.transitionTo = function(aNameState, aFastTransition, aClearWorld, aClearCache) {
            if (typeof aFastTransition === "undefined") {
                aFastTransition = false;
            }
            var args = [];
            for (var _i = 0; _i < (arguments.length - 4); _i++) {
                args[_i] = arguments[_i + 4];
            }
            if (HState._transition != null) {
                if (HState._transition.isRunning())
                    return;
                HState._transition.to(aNameState, aFastTransition, aClearWorld, aClearCache, args);
            } else {
                this.game.state.start(aNameState, true, false);
            }
            this.game.sound.play('transition');
        };
        HState.prototype.dialog = function(aParent, aName, aButtonCallback, aButtonContext, aX, aY) {
            if (typeof aParent === "undefined") {
                aParent = null;
            }
            if (typeof aName === "undefined") {
                aName = 'dialog';
            }
            if (typeof aButtonCallback === "undefined") {
                aButtonCallback = null;
            }
            if (typeof aButtonContext === "undefined") {
                aButtonContext = null;
            }
            if (typeof aX === "undefined") {
                aX = 0;
            }
            if (typeof aY === "undefined") {
                aY = 0;
            }
            var dialog;
            if (aParent == null)
                aParent = this.world;
            dialog = new H812.HDialog(this.game, aParent, aName);
            dialog.x = aX;
            dialog.y = aY;
            if (aButtonCallback)
                dialog.onButtonUp.add(aButtonCallback, aButtonContext);
            return dialog;
        };
        HState.prototype.render = function() {
            if (this.settings.debug) {
                this.game.debug.text("FPS:" + this.game.time.fps, 10, 20);
            }
        };
        HState._transition = null;
        return HState;
    })(Phaser.State);
    H812.HState = HState;
})(H812 || (H812 = {}));
var H812;
(function(H812) {
    var Preloader = (function(_super) {
        __extends(Preloader, _super);

        function Preloader() {
            _super.apply(this, arguments);
        }
        Preloader.prototype.preload = function() {
            this.preloadBarE = this.add.sprite(0, 0, 'loader_empty');
            this.preloadBar = this.add.sprite(0, 0, 'loader_full');
            this.preloadBar.x = this.preloadBarE.x = this.game.width * 0.5 - this.preloadBar.width * 0.5;
            this.preloadBar.y = this.preloadBarE.y = this.game.height * 0.6 - this.preloadBar.height * 0.5;
            this.load.setPreloadSprite(this.preloadBar);
            this.logo = null;
            if (this.game.cache.checkImageKey('logo_sponsor')) {
                this.logo = this.add.sprite(this.preloadBarE.x + this.preloadBarE.width * 0.5, this.preloadBarE.y - 80, 'logo_sponsor');
                this.logo.inputEnabled = true;
                this.logo.anchor.set(0.5, 0.5);
                this.logo.y -= this.logo.height * 0.5;
                this.logo.events.onInputUp.add(H812.API.gotoLogo, this);
            }
            this.load.image('bg_menu', 'assets/bg_menu.png');
            this.load.image('bg_game', 'assets/bg_game.png');
            this.load.atlasXML('gui', 'assets/gui.png', 'assets/gui.xml');
            this.load.bitmapFont('font', 'assets/font.png', 'assets/font.xml');
            this.load.audio('music', 'assets/sounds/music.mp3', true);
            this.load.audio('click', 'assets/sounds/click.mp3', true);
            this.load.audio('drop', 'assets/sounds/drop.mp3', true);
            this.load.audio('exchange', 'assets/sounds/exchange.mp3', true);
            this.load.audio('transition', 'assets/sounds/exchange.mp3', true);
            this.load.audio('level_up', 'assets/sounds/level_up.mp3', true);
            this.load.audio('match', 'assets/sounds/match.mp3', true);
            this.load.audio('lose', 'assets/sounds/lose.mp3', true);
        };
        Preloader.prototype.create = function() {
            this.preloadBarE.visible = this.preloadBar.visible = false;
            if (this.logo != null && this.logo != undefined) {
                var tween = this.add.tween(this.logo);
                tween.to({
                    y: this.preloadBar.y
                }, 300, Phaser.Easing.Back.InOut, false, 300).start();
                tween.onComplete.addOnce(this.start, this);
            } else {
                this.start(null);
            }
        };
        Preloader.prototype.start = function(aObj) {
            H812.HState.makeTransition(this.game, 'gui', 'transition');
            this.transitionTo('MenuState');
            this.game.sound.play('music', 1, true);
            console.log('PRELOADER:START');
        };
        return Preloader;
    })(H812.HState);
    H812.Preloader = Preloader;
})(H812 || (H812 = {}));
var H812;
(function(H812) {
    var MenuState = (function(_super) {
        __extends(MenuState, _super);

        function MenuState() {
            _super.apply(this, arguments);
        }
        MenuState.prototype.create = function() {
            this.add.sprite(0, 0, 'bg_menu');
            var logo = this.add.sprite(this.world.centerX, 0, 'gui', 'logo');
            logo.anchor.setTo(0.5, 0.5);
            logo.y = this.game.height * 0.33;
            var logoTween = this.add.tween(logo.scale);
            logoTween.to({
                x: 1.1,
                y: 0.9
            }, 150, Phaser.Easing.Back.InOut);
            logoTween.to({
                x: 0.9,
                y: 1.1
            }, 150, Phaser.Easing.Back.InOut);
            logoTween.to({
                x: 1.0,
                y: 1.0
            }, 200, Phaser.Easing.Back.InOut, false, 1000);
            logoTween.loop().start();
            var guiOffsetX;
            var guiKey = 'gui';
            this.guiContainer = this.dialog(this.world, 'dialog', this.buttonUp, this, this.world.centerX, this.game.height * 0.7);
            guiOffsetX = 0;
            this.guiContainer.button(guiKey, 'button_more_games', '', guiOffsetX - 160, -46);
            this.guiContainer.button(guiKey, 'button_reset', '', guiOffsetX - 160, 46);
            this.guiContainer.button(guiKey, 'button_info', '', guiOffsetX + 160, 46);
            this.guiContainer.button(guiKey, 'button_music', 'button_music' + (this.game.sound.mute ? '_1' : '_0'), guiOffsetX + 160, -47);
            this.guiContainer.button(guiKey, 'button_play', '', guiOffsetX, 0);
            guiOffsetX = this.game.width;
            this.guiContainer.sprite(guiKey, 'dialog_credits', '', guiOffsetX + 49, 0);
            this.guiContainer.button(guiKey, 'button_more_games', '', guiOffsetX - 133, -40);
            this.guiContainer.button(guiKey, 'button_back', '', guiOffsetX - 133, 48);
            guiOffsetX = -this.game.width;
            this.guiContainer.sprite(guiKey, 'dialog_reset_data', '', guiOffsetX, 0);
            this.guiContainer.button(guiKey, 'button_reset_yes', 'button_reset', guiOffsetX + 162, 2);
            this.guiContainer.button(guiKey, 'button_back', '', guiOffsetX - 163, 2);
            this.guiScore = this.dialog(this.world, 'dialog', this.buttonUp, this, this.world.centerX, this.game.height * 0.82);
            this.guiScore.sprite('gui', 'label_score', '', -80 - 120, 60);
            var textScore = this.guiScore.numberic('font', 'score', 0, 10 - 120, 30, 'left', 60);
            textScore.text = H812.HUtils.formatScore(this.settings.getScore());
            if (this.game.cache.checkImageKey('logo_sponsor'))
                this.guiScore.button('logo_sponsor', 'button_logo', 0, 180, 60);
            H812.HState.transitionBringToTop();
        };
        MenuState.prototype.destroyTweenGUI = function() {
            if (this.guiTween) {
                this.guiTween.stop();
                this.guiTween = null;
            }
        };
        MenuState.prototype.createTweenGUI = function(aData, aDuration, aEase, aDelay) {
            this.destroyTweenGUI();
            this.guiTween = this.game.add.tween(this.guiContainer).to(aData, aDuration, aEase, false, aDelay);
            this.guiTween.onComplete.addOnce(this.destroyTweenGUI, this);
            this.guiTween.start();
        };
        MenuState.prototype.moveGUI = function(aX) {
            this.createTweenGUI({
                x: aX
            }, 600, Phaser.Easing.Back.Out, 300);
        };
        MenuState.prototype.buttonUp = function(aButton) {
            if (this.guiTween && this.guiTween.isRunning)
                return;
            if (!this.game.sound.mute)
                this.game.sound.play('click');
            var posX = this.game.width * 0.5;
            switch (aButton.name) {
                case 'button_more_games':
                    H812.API.getMoreGames(true);
                    break;
                case 'button_logo':
                    H812.API.getLogo(true);
                    break;
                case 'button_reset':
                    this.moveGUI(posX + this.game.width);
                    break;
                case 'button_info':
                    this.moveGUI(-posX);
                    break;
                case 'button_reset_yes':
                    this.resetData();
                    this.moveGUI(posX);
                    break;
                case 'button_back':
                    this.moveGUI(posX);
                    break;
                case 'button_music':
                    this.game.sound.mute = !this.game.sound.mute;
                    var frame = aButton.name + (this.game.sound.mute ? '_1' : '_0');
                    aButton.setFrames(frame, frame, frame, frame);
                    break;
                case 'button_play':
                    this.settings.viewTutorial = true;
                    this.transitionTo('PlayState');
                    break;
            }
        };
        MenuState.prototype.resetData = function() {
            console.log('reset data: Yes');
            this.settings.setScore(0, false);
            this.guiScore.getFirstText('score').text = H812.HUtils.formatScore(this.settings.getScore());
        };
        return MenuState;
    })(H812.HState);
    H812.MenuState = MenuState;
})(H812 || (H812 = {}));
var H812;
(function(H812) {
    (function(HTDataFlag) {
        HTDataFlag[HTDataFlag["POSITION_X"] = 1] = "POSITION_X";
        HTDataFlag[HTDataFlag["POSITION_Y"] = 2] = "POSITION_Y";
        HTDataFlag[HTDataFlag["POSITION"] = 3] = "POSITION";
        HTDataFlag[HTDataFlag["SCALE_X"] = 4] = "SCALE_X";
        HTDataFlag[HTDataFlag["SCALE_Y"] = 8] = "SCALE_Y";
        HTDataFlag[HTDataFlag["SCALE"] = 12] = "SCALE";
        HTDataFlag[HTDataFlag["ANGLE"] = 16] = "ANGLE";
    })(H812.HTDataFlag || (H812.HTDataFlag = {}));
    var HTDataFlag = H812.HTDataFlag;
    var HTData = (function() {
        function HTData(aData, aFlag) {
            if (typeof aData === "undefined") {
                aData = null;
            }
            if (typeof aFlag === "undefined") {
                aFlag = 0;
            }
            this.data = aData;
            this.flag = aFlag;
        }
        HTData.applyData = function(aObject, aData, aIndex) {
            if (aIndex < 0 || aIndex >= aData.data.length || aData.flag == 0)
                return false;
            if (aData.flag & 1) {
                aObject.x = aData.data[aIndex].pos_x;
            }
            if (aData.flag & 2) {
                aObject.y = aData.data[aIndex].pos_y;
            }
            if (aData.flag & 4) {
                aObject.scale.x = aData.data[aIndex].scale_x;
            }
            if (aData.flag & 8) {
                aObject.scale.y = aData.data[aIndex].scale_y;
            }
            if (aData.flag & 16) {
                aObject.angle = aData.data[aIndex].angle;
            }
            return true;
        };
        HTData.generateMoving = function(aGame, aStartX, aStartY, aEndX, aEndY, aDuration, aEase, aDelay, aYoyo, aFPS) {
            if (typeof aDuration === "undefined") {
                aDuration = 1000;
            }
            if (typeof aEase === "undefined") {
                aEase = null;
            }
            if (typeof aDelay === "undefined") {
                aDelay = 0;
            }
            if (typeof aYoyo === "undefined") {
                aYoyo = false;
            }
            if (typeof aFPS === "undefined") {
                aFPS = 60;
            }
            if (aGame == null || aGame == undefined)
                return null;
            if (aStartX == aEndX && aStartY == aEndY)
                return null;
            if (aDuration <= 0)
                aDuration = 1000;
            if (aEase == null)
                aEase = Phaser.Easing.Linear.None;
            if (aFPS <= 0)
                aFPS = 60;
            var flag;
            var propStart;
            var propEnd;
            if (aStartX != aEndX && aStartY != aEndY) {
                flag = 3;
                propStart = {
                    pos_x: aStartX,
                    pos_y: aStartY
                };
                propEnd = {
                    pos_x: aEndX,
                    pos_y: aEndY
                };
            } else if (aStartX != aEndX) {
                flag = 1;
                propStart = {
                    pos_x: aStartX
                };
                propEnd = {
                    pos_x: aEndX
                };
            } else if (aStartY != aEndY) {
                flag = 2;
                propStart = {
                    pos_y: aStartY
                };
                propEnd = {
                    pos_y: aEndY
                };
            }
            var hData = new HTData();
            hData.flag = flag;
            hData.data = HTData.generate(aGame, propStart, propEnd, aDuration, aEase, aDelay, aYoyo, aFPS);
            return hData;
        };
        HTData.generateScaling = function(aGame, aStartX, aStartY, aEndX, aEndY, aDuration, aEase, aDelay, aYoyo, aFPS) {
            if (typeof aDuration === "undefined") {
                aDuration = 1000;
            }
            if (typeof aEase === "undefined") {
                aEase = null;
            }
            if (typeof aDelay === "undefined") {
                aDelay = 0;
            }
            if (typeof aYoyo === "undefined") {
                aYoyo = false;
            }
            if (typeof aFPS === "undefined") {
                aFPS = 60;
            }
            if (aGame == null || aGame == undefined)
                return null;
            if (aStartX == aEndX && aStartY == aEndY)
                return null;
            if (aDuration <= 0)
                aDuration = 1000;
            if (aEase == null)
                aEase = Phaser.Easing.Linear.None;
            if (aFPS <= 0)
                aFPS = 60;
            var flag;
            var propStart;
            var propEnd;
            if (aStartX != aEndX && aStartY != aEndY) {
                flag = 12;
                propStart = {
                    scale_x: aStartX,
                    scale_y: aStartY
                };
                propEnd = {
                    scale_x: aEndX,
                    scale_y: aEndY
                };
            } else if (aStartX != aEndX) {
                flag = 4;
                propStart = {
                    scale_x: aStartX
                };
                propEnd = {
                    scale_x: aEndX
                };
            } else if (aStartY != aEndY) {
                flag = 8;
                propStart = {
                    scale_y: aStartY
                };
                propEnd = {
                    scale_y: aEndY
                };
            }
            var hData = new HTData();
            hData.flag = flag;
            hData.data = HTData.generate(aGame, propStart, propEnd, aDuration, aEase, aDelay, aYoyo, aFPS);
            return hData;
        };
        HTData.generateTurning = function(aGame, aStart, aEnd, aDuration, aEase, aDelay, aYoyo, aFPS) {
            if (typeof aDuration === "undefined") {
                aDuration = 1000;
            }
            if (typeof aEase === "undefined") {
                aEase = null;
            }
            if (typeof aDelay === "undefined") {
                aDelay = 0;
            }
            if (typeof aYoyo === "undefined") {
                aYoyo = false;
            }
            if (typeof aFPS === "undefined") {
                aFPS = 60;
            }
            if (aGame == null || aGame == undefined)
                return null;
            if (aStart == aEnd)
                return null;
            if (aDuration <= 0)
                aDuration = 1000;
            if (aEase == null)
                aEase = Phaser.Easing.Linear.None;
            if (aFPS <= 0)
                aFPS = 60;
            var flag;
            var propStart;
            var propEnd;
            flag = 16;
            propStart = {
                angle: aStart
            };
            propEnd = {
                angle: aEnd
            };
            var hData = new HTData();
            hData.flag = flag;
            hData.data = HTData.generate(aGame, propStart, propEnd, aDuration, aEase, aDelay, aYoyo, aFPS);
            return hData;
        };
        HTData.generate = function(aGame, aStart, aEnd, aDuration, aEase, aDelay, aYoyo, aFPS) {
            var tween = aGame.make.tween(aStart);
            tween.to(aEnd, aDuration, aEase, false, aDelay, 0, aYoyo);
            var data = [];
            var delayProp = H812.HUtils.copyProp(aStart);
            if (aDelay > 0) {
                var total = Math.floor(aFPS * (aDelay / 1000));
                while (total--) {
                    data.push(delayProp);
                }
            }
            data = tween.generateData(aFPS, data);
            return data;
        };
        return HTData;
    })();
    H812.HTData = HTData;
    var HTDataManager = (function() {
        function HTDataManager() {
            this._tweens = [];
        }
        HTDataManager.prototype.destroy = function() {
            if (this._tweens != null) {
                this.removeAll();
                this._tweens = null;
            }
        };
        HTDataManager.prototype.remove = function(aName) {
            if (this._tweens[aName] == null || this._tweens[aName] == undefined)
                return false;
            this._tweens[aName] = null;
            return true;
        };
        HTDataManager.prototype.removeAll = function() {
            this._tweens.length = 0;
        };
        HTDataManager.prototype.add = function(aName, aData) {
            if (typeof aData === "undefined") {
                aData = null;
            }
            if (aName == null || aName == undefined || aName == '' || aData == null || aData == undefined)
                return false;
            if (aData.flag == 0 || aData.data == null || aData.data == undefined || aData.data.length == 0)
                return false;
            this.remove(aName);
            this._tweens[aName] = aData;
            return true;
        };
        HTDataManager.prototype.getByName = function(aName) {
            if (aName == null || aName == undefined || aName == '')
                return null;
            return this._tweens[aName] == undefined ? null : this._tweens[aName];
        };
        return HTDataManager;
    })();
    H812.HTDataManager = HTDataManager;
})(H812 || (H812 = {}));
var H812;
(function(H812) {
    var HTDataSprite = (function(_super) {
        __extends(HTDataSprite, _super);

        function HTDataSprite(aGame, aKey, aFrame, aX, aY) {
            if (typeof aFrame === "undefined") {
                aFrame = 0;
            }
            if (typeof aX === "undefined") {
                aX = 0;
            }
            if (typeof aY === "undefined") {
                aY = 0;
            }
            _super.call(this, aGame, aX, aY, aKey, aFrame);
            this._anims = HTDataSprite.makeInstanceAnims(aGame);
            this._animCurrent = null;
            this._animCurrentName = null;
            this._animCurrentIndex = -1;
            this._animCurrentLength = 0;
            this.setTweenAnimation('stand_' + this.game.rnd.integerInRange(0, 3).toString(), this.game.rnd.realInRange(0, 1));
        }
        HTDataSprite.prototype.update = function() {
            this.updateTweenAnimation();
            _super.prototype.update.call(this);
        };
        HTDataSprite.makeInstanceAnims = function(aGame) {
            if (HTDataSprite._instanceAnims == null) {
                HTDataSprite._instanceAnims = new H812.HTDataManager();
                HTDataSprite._instanceAnims.add('stand_0', H812.HTData.generateScaling(aGame, 1, 1, 0.9, 1.1, 600, Phaser.Easing.Back.In, 15000, true, 60));
                HTDataSprite._instanceAnims.add('stand_1', H812.HTData.generateScaling(aGame, 1, 1, 1.1, 0.9, 600, Phaser.Easing.Back.In, 10000, true, 60));
                HTDataSprite._instanceAnims.add('stand_2', H812.HTData.generateScaling(aGame, 1, 1, 0.95, 1.08, 500, Phaser.Easing.Back.In, 13000, true, 60));
                HTDataSprite._instanceAnims.add('stand_3', H812.HTData.generateScaling(aGame, 1, 1, 1.08, 0.95, 500, Phaser.Easing.Back.In, 12000, true, 60));
                HTDataSprite._instanceAnims.add('shake', H812.HTData.generateTurning(aGame, -10, 10, 200, Phaser.Easing.Back.InOut, 0, true, 60));
            }
            return HTDataSprite._instanceAnims;
        };
        HTDataSprite.prototype.updateTweenAnimation = function() {
            if (this._animCurrentLength == 0)
                return;
            H812.HTData.applyData(this, this._animCurrent, this._animCurrentIndex);
            this._animCurrentIndex++;
            if (this._animCurrentIndex >= this._animCurrentLength) {
                this._animCurrentIndex = 0;
                this.completeTweenAnimation(this._animCurrentName);
            }
        };
        HTDataSprite.prototype.getTweenAnimation = function() {
            return this._animCurrentName;
        };
        HTDataSprite.prototype.setTweenAnimation = function(aName, aPercent) {
            if (typeof aPercent === "undefined") {
                aPercent = 0;
            }
            if (this._animCurrentName != aName) {
                this._animCurrent = this._anims.getByName(aName);
            }
            if (this._animCurrent == null) {
                this._animCurrentName = null;
                this._animCurrentIndex = -1;
                this._animCurrentLength = 0;
                return false;
            }
            this._animCurrentName = aName;
            this._animCurrentLength = this._animCurrent.data.length;
            this._animCurrentIndex = Math.floor(this._animCurrentLength * aPercent);
            this.scale.x = this.scale.y = 1;
            this.angle = 0;
            return true;
        };
        HTDataSprite.prototype.completeTweenAnimation = function(aName) {
            this.scale.x = this.scale.y = 1;
            this.angle = 0;
            this.setTweenAnimation('stand_' + this.game.rnd.integerInRange(0, 3).toString());
        };
        HTDataSprite._instanceAnims = null;
        return HTDataSprite;
    })(Phaser.Sprite);
    H812.HTDataSprite = HTDataSprite;
})(H812 || (H812 = {}));
var H812;
(function(H812) {
    (function(HGemColor) {
        HGemColor[HGemColor["NONE"] = 0] = "NONE";
        HGemColor[HGemColor["RED"] = 1] = "RED";
        HGemColor[HGemColor["YELLOW"] = 2] = "YELLOW";
        HGemColor[HGemColor["GREEN"] = 3] = "GREEN";
        HGemColor[HGemColor["BLUE"] = 4] = "BLUE";
        HGemColor[HGemColor["PURPURE"] = 5] = "PURPURE";
        HGemColor[HGemColor["BROWN"] = 6] = "BROWN";
        HGemColor[HGemColor["ALL"] = 7] = "ALL";
    })(H812.HGemColor || (H812.HGemColor = {}));
    var HGemColor = H812.HGemColor;
    (function(HGemFlag) {
        HGemFlag[HGemFlag["SIMPLE"] = 0] = "SIMPLE";
        HGemFlag[HGemFlag["LOCKED"] = 1] = "LOCKED";
        HGemFlag[HGemFlag["GROUND"] = 2] = "GROUND";
    })(H812.HGemFlag || (H812.HGemFlag = {}));
    var HGemFlag = H812.HGemFlag;
    var HGem = (function(_super) {
        __extends(HGem, _super);

        function HGem(aMap) {
            _super.call(this, aMap.game, aMap.tileset);
            this.anchor.setTo(0.5, 0.5);
            this._map = aMap;
            this._snapping = false;
            this._movingX = this._movingY = false;
            this._movingDuration = 1000;
            this._movingEaseFunction = Phaser.Easing.Linear.None;
            this._movingTimer = this._movingTimeDelay = 0;
            this._movingStartX = this._movingStartY = this._movingEndX = this._movingEndY = 0;
            this.setPosition(0, 0, true);
            this.setColorAndFlags(0, 0);
        }
        HGem.prototype.eventMap = function(aEvent) {
            if (aEvent == H812.HMapUtils.EVENT_GRAVITY_Y && this._flags & 2) {
                var dY = this._mapPrevY - this._mapY;
                dY = dY < 0 ? -dY : dY;
                if (dY >= 2) {
                    this.eventMap(H812.HMapUtils.EVENT_KILL);
                    this._map.killObject(this._mapX, this._mapY);
                }
            }
        };
        Object.defineProperty(HGem.prototype, "mapX", {
            get: function() {
                return this._mapX;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(HGem.prototype, "mapY", {
            get: function() {
                return this._mapY;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(HGem.prototype, "mapPrevX", {
            get: function() {
                return this._mapPrevX;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(HGem.prototype, "mapPrevY", {
            get: function() {
                return this._mapPrevY;
            },
            enumerable: true,
            configurable: true
        });
        HGem.prototype.isSnapping = function() {
            return this._snapping;
        };
        HGem.prototype.isMoving = function() {
            return this._movingX || this._movingY;
        };
        HGem.prototype.move = function(aDuration, aEaseFunc, aMovingDelay) {
            if (typeof aDuration === "undefined") {
                aDuration = -1;
            }
            if (typeof aEaseFunc === "undefined") {
                aEaseFunc = null;
            }
            if (typeof aMovingDelay === "undefined") {
                aMovingDelay = -1;
            }
            if (aDuration != -1)
                this._movingDuration = aDuration;
            if (aEaseFunc != null)
                this._movingEaseFunction = aEaseFunc;
            if (aMovingDelay != -1)
                this._movingTimeDelay = aMovingDelay;
            if (this._snapping)
                return;
            this._movingX = this._movingY = true;
            this._movingTimer = this._movingDuration + this._movingTimeDelay;
            this._movingStartX = this.x;
            this._movingStartY = this.y;
            this._movingEndX = this._map.mapToRealX(this._mapX);
            this._movingEndY = this._map.mapToRealY(this._mapY);
            if (this._movingDuration <= 0) {
                this.x = this._movingEndX;
                this.y = this._movingEndY;
                this._movingX = this._movingY = false;
                this._snapping = true;
            }
        };
        HGem.prototype.moveTo = function(aMapX, aMapY, aDuration, aEaseFunc, aMovingDelay) {
            if (typeof aDuration === "undefined") {
                aDuration = -1;
            }
            if (typeof aEaseFunc === "undefined") {
                aEaseFunc = null;
            }
            if (typeof aMovingDelay === "undefined") {
                aMovingDelay = -1;
            }
            if (aDuration != -1)
                this._movingDuration = aDuration;
            if (aEaseFunc != null)
                this._movingEaseFunction = aEaseFunc;
            if (aMovingDelay != -1)
                this._movingTimeDelay = aMovingDelay;
            if (this._mapX == aMapX && this._mapY == aMapY && this._snapping)
                return;
            if (this._snapping) {
                this._movingX = this._mapX != aMapX;
                this._movingY = this._mapY != aMapY;
                this._snapping = false;
            } else {
                this._movingX = this._movingY = true;
            }
            this._mapPrevX = this._mapX;
            this._mapPrevY = this._mapY;
            this._mapX = aMapX;
            this._mapY = aMapY;
            this._movingTimer = this._movingDuration + this._movingTimeDelay;
            this._movingStartX = this.x;
            this._movingStartY = this.y;
            this._movingEndX = this._map.mapToRealX(this._mapX);
            this._movingEndY = this._map.mapToRealY(this._mapY);
            if (this._movingDuration <= 0) {
                this.x = this._movingEndX;
                this.y = this._movingEndY;
                this._movingX = this._movingY = false;
                this._snapping = true;
            }
        };
        HGem.prototype.moveRealTo = function(aX, aY, aDuration, aEaseFunc, aMovingDelay) {
            if (typeof aDuration === "undefined") {
                aDuration = -1;
            }
            if (typeof aEaseFunc === "undefined") {
                aEaseFunc = null;
            }
            if (typeof aMovingDelay === "undefined") {
                aMovingDelay = -1;
            }
            if (aDuration != -1)
                this._movingDuration = aDuration;
            if (aEaseFunc != null)
                this._movingEaseFunction = aEaseFunc;
            if (aMovingDelay != -1)
                this._movingTimeDelay = aMovingDelay;
            if (this.x == aX && this.y == aY)
                return;
            this._snapping = false;
            this._movingX = this._movingY = true;
            this._movingTimer = this._movingDuration + this._movingTimeDelay;
            this._movingStartX = this.x;
            this._movingStartY = this.y;
            this._movingEndX = aX;
            this._movingEndY = aY;
            if (this._movingDuration <= 0) {
                this.x = this._movingEndX;
                this.y = this._movingEndY;
                this._movingX = this._movingY = false;
                this._snapping = false;
            }
        };
        HGem.prototype.updateMovement = function(aDeltaTime) {
            if (!this._movingX && !this._movingY)
                return false;
            if (this._movingTimer != 0) {
                this._movingTimer -= aDeltaTime;
                if (this._movingTimer < 0)
                    this._movingTimer = 0;
            }
            var elapsed = (this._movingDuration - this._movingTimer) / this._movingDuration;
            elapsed = elapsed > 1 ? 1 : (elapsed < 0 ? 0 : elapsed);
            var value = this._movingEaseFunction(elapsed);
            if (this._movingX) {
                this.x = this._movingStartX + (this._movingEndX - this._movingStartX) * value;
            }
            if (this._movingY) {
                this.y = this._movingStartY + (this._movingEndY - this._movingStartY) * value;
            }
            if (elapsed == 1) {
                this._movingX = this._movingY = false;
                this.x = this._movingEndX;
                this.y = this._movingEndY;
                this._snapping = true;
                return false;
            }
            return true;
        };
        HGem.prototype.setPosition = function(aMapX, aMapY, aSetupRealPos) {
            if (typeof aSetupRealPos === "undefined") {
                aSetupRealPos = true;
            }
            if (this._mapX == aMapX && this._mapY == aMapY && this._snapping)
                return;
            this._mapPrevX = this._mapX;
            this._mapPrevY = this._mapY;
            this._mapX = aMapX;
            this._mapY = aMapY;
            this._snapping = false;
            this._movingX = this._movingY = false;
            if (aSetupRealPos) {
                this.x = this._map.mapToRealX(this._mapX);
                this.y = this._map.mapToRealY(this._mapY);
                this._snapping = true;
            }
        };
        HGem.prototype.setRealPosition = function(aX, aY, aMapSnapping) {
            if (typeof aMapSnapping === "undefined") {
                aMapSnapping = true;
            }
            this.x = aX;
            this.y = aY;
            this._snapping = false;
            this._movingY = this._movingX = false;
            if (aMapSnapping) {
                this._mapPrevX = this._mapX;
                this._mapPrevY = this._mapY;
                this._mapX = this._map.realToMapX(aX, true);
                this._mapY = this._map.realToMapY(aY, true);
                this.setPosition(this._mapX, this._mapY, true);
            }
        };
        HGem.prototype.setFlags = function(aFlags) {
            this._flags = aFlags;
            this.changeColorAndFlags();
        };
        HGem.prototype.setColor = function(aColor) {
            this._color = aColor;
            this.changeColorAndFlags();
        };
        HGem.prototype.setColorAndFlags = function(aColor, aFlags) {
            this._color = aColor;
            this._flags = aFlags;
            this.changeColorAndFlags();
        };
        HGem.prototype.getColor = function() {
            return this._color;
        };
        HGem.prototype.getFlags = function() {
            return this._flags;
        };
        HGem.prototype.checkColor = function(aColor) {
            return this._color == aColor || this._color == 7 || aColor == 7;
        };
        HGem.prototype.checkFlag = function(aFlag) {
            return (this._flags & aFlag) != 0;
        };
        HGem.prototype.changeColorAndFlags = function() {
            this.frameName = 'totems_' + this._color.toString();
        };
        HGem.prototype.randomColor = function(aSimple) {
            if (typeof aSimple === "undefined") {
                aSimple = true;
            }
            if (aSimple)
                return this.game.rnd.integerInRange(1, 5);
            return this.game.rnd.integerInRange(1, 7);
        };
        HGem.prototype.randomGem = function(aMode) {
            var flags = 0;
            var simple = aMode == 0;
            var color;
            color = this.randomColor(simple);
            if (this._map.checkMap(this._mapX, this._mapY)) {
                var numMaxCheck = 20;
                var colorFalse = true;
                var gems;
                var x = this._mapX;
                var y = this._mapY;
                while (colorFalse && numMaxCheck > 0) {
                    numMaxCheck--;
                    color = this.randomColor(simple);
                    if (color != 7) {
                        colorFalse = this._map.checkObjectColor(x - 1, y, color) || this._map.checkObjectColor(x + 1, y, color) || this._map.checkObjectColor(x, y - 1, color) || this._map.checkObjectColor(x, y + 1, color);
                    } else {
                        gems = [];
                        this._map.getObject(x - 1, y, gems);
                        this._map.getObject(x + 1, y, gems);
                        colorFalse = HGem.numCheckingColors(this._map, color, gems) == 2;
                        if (colorFalse)
                            continue;
                        gems.length = 0;
                        this._map.getObject(x, y - 1, gems);
                        this._map.getObject(x, y + 1, gems);
                        colorFalse = HGem.numCheckingColors(this._map, color, gems) == 2;
                        if (colorFalse)
                            continue;
                        gems.length = 0;
                        this._map.getObject(x - 1, y - 1, gems);
                        this._map.getObject(x, y - 1, gems);
                        this._map.getObject(x - 1, y, gems);
                        colorFalse = HGem.numCheckingColors(this._map, color, gems) >= 2;
                        if (colorFalse)
                            continue;
                        gems.length = 0;
                        this._map.getObject(x + 1, y - 1, gems);
                        this._map.getObject(x, y - 1, gems);
                        this._map.getObject(x + 1, y, gems);
                        colorFalse = HGem.numCheckingColors(this._map, color, gems) >= 2;
                        if (colorFalse)
                            continue;
                        gems.length = 0;
                        this._map.getObject(x, y + 1, gems);
                        this._map.getObject(x + 1, y + 1, gems);
                        this._map.getObject(x + 1, y, gems);
                        colorFalse = HGem.numCheckingColors(this._map, color, gems) >= 2;
                        if (colorFalse)
                            continue;
                        gems.length = 0;
                        this._map.getObject(x - 1, y, gems);
                        this._map.getObject(x - 1, y + 1, gems);
                        this._map.getObject(x, y + 1, gems);
                        colorFalse = HGem.numCheckingColors(this._map, color, gems) >= 2;
                    }
                }
            }
            if (color == 0)
                flags |= 2;
            this.setColorAndFlags(color, flags);
        };
        HGem.numCheckingColors = function(aMap, aColor, aGems) {
            var count = 0;
            var obj;
            var i = 0;
            while (i < aGems.length) {
                obj = aGems[i++];
                if (obj != null && obj.checkColor(aColor))
                    count++;
            }
            return count;
        };
        HGem.prototype.update = function() {
            this.updateMovement(this._map.deltaTime);
            _super.prototype.update.call(this);
        };
        return HGem;
    })(H812.HTDataSprite);
    H812.HGem = HGem;
})(H812 || (H812 = {}));
var H812;
(function(H812) {
    var HMapUtils = (function() {
        function HMapUtils() {}
        HMapUtils.checkEmptyLine = function(aMap, aY) {
            if (aY < 0 || aY >= aMap.mapHeight)
                return false;
            var obj;
            var x = 0;
            while (x < aMap.mapWidth) {
                if (aMap.checkObjectByIndex(aY * aMap.mapWidth + x))
                    return false;
                x++;
            }
            return true;
        };
        HMapUtils.nearEmptyY = function(aMap, aX, aY, aShift) {
            if (!aMap.checkMap(aX, aY))
                return -1;
            if (aShift < -1 || aShift > 1)
                return aY;
            if (aShift == -1 && aY == 0 || aShift == 1 && aY >= aMap.mapHeight)
                return aY;
            var nY;
            var i;
            var other;
            var otherExists;
            var condTrue;
            nY = aY;
            i = aY + aShift;
            do {
                other = aMap.getObjectByIndex(i * aMap.mapWidth + aX);
                otherExists = other != null && other != undefined;
                if (!otherExists) {
                    nY = i;
                }
                i += aShift;
                condTrue = aShift == 1 ? i < aMap.mapHeight : (aShift == -1 ? i >= 0 : false);
            } while (!otherExists && condTrue);
            return nY;
        };
        HMapUtils.removeLine = function(aMap, aY, aShiftY) {
            if (typeof aShiftY === "undefined") {
                aShiftY = 0;
            }
            if (aY < 0 || aY >= aMap.mapHeight)
                return 0;
            aShiftY = aShiftY > 1 ? 1 : (aShiftY < -1 ? -1 : aShiftY);
            var obj;
            var numRemoved = 0;
            var x = 0;
            while (x < aMap.mapWidth) {
                obj = aMap.getObject(x, aY);
                if (obj != null) {
                    obj.eventMap(HMapUtils.EVENT_KILL);
                    if (aMap.killObject(x, aY)) {
                        numRemoved++;
                    }
                }
                x++;
            }
            if (aShiftY != 0 && numRemoved > 0) {
                var nY;
                var x;
                var y;
                var obj;
                if (aShiftY == 1) {
                    nY = aY - 1;
                    for (x = 0; x < aMap.mapWidth; x++) {
                        for (y = nY; y >= 0; y--) {
                            obj = aMap.getObject(x, y);
                            if (obj != null) {
                                obj.eventMap(HMapUtils.EVENT_SHIFT_Y);
                                aMap.swapObjects(x, y, x, y + 1, true);
                            }
                        }
                    }
                } else if (aShiftY == -1) {
                    nY = aY + 1;
                    for (x = 0; x < aMap.mapWidth; x++) {
                        for (y = nY; y < aMap.mapHeight - 1; y++) {
                            obj = aMap.getObject(x, y);
                            if (obj != null) {
                                obj.eventMap(HMapUtils.EVENT_SHIFT_Y);
                                aMap.swapObjects(x, y, x, y - 1, true);
                            }
                        }
                    }
                }
            }
            return numRemoved;
        };
        HMapUtils.insertLine = function(aMap, aY, aShiftY, aRandomMode) {
            if (typeof aY === "undefined") {
                aY = 0;
            }
            if (typeof aShiftY === "undefined") {
                aShiftY = 0;
            }
            if (typeof aRandomMode === "undefined") {
                aRandomMode = 0;
            }
            aShiftY = aShiftY > 1 ? 1 : (aShiftY < -1 ? -1 : aShiftY);
            var nY = aY < 0 ? 0 : (aY >= aMap.mapHeight ? aMap.mapHeight - 1 : aY);
            var x;
            var y;
            var obj;
            var numRemoved = 0;
            if (aShiftY == 0) {
                numRemoved = HMapUtils.removeLine(aMap, nY, 0);
            } else if (aShiftY == 1) {
                numRemoved = HMapUtils.removeLine(aMap, aMap.mapHeight - 1, 0);
                for (x = 0; x < aMap.mapWidth; x++) {
                    for (y = aMap.mapHeight - 2; y >= nY; y--) {
                        obj = aMap.getObject(x, y);
                        if (obj != null) {
                            obj.eventMap(HMapUtils.EVENT_SHIFT_Y);
                            aMap.swapObjects(x, y, x, y + 1, true);
                        }
                    }
                }
            } else if (aShiftY == -1) {
                numRemoved = HMapUtils.removeLine(aMap, 0, 0);
                for (x = 0; x < aMap.mapWidth; x++) {
                    for (y = 1; y <= nY; y++) {
                        obj = aMap.getObject(x, y);
                        if (obj != null) {
                            obj.eventMap(HMapUtils.EVENT_SHIFT_Y);
                            aMap.swapObjects(x, y, x, y - 1, true);
                        }
                    }
                }
            }
            x = 0;
            obj = null;
            while (x < aMap.mapWidth) {
                obj = aMap.reviveObject(x, nY);
                obj.setPosition(x, aY, true);
                obj.moveTo(x, nY, aMap.movingDuration(), aMap.movingEaseFunc);
                obj.randomGem(aRandomMode);
                obj.eventMap(HMapUtils.EVENT_REVIVE);
                x++;
            }
            return numRemoved;
        };
        HMapUtils.gravityY = function(aMap, aShiftY) {
            var countUp = 0;
            var x = 0;
            var y = 0;
            var i;
            var nY;
            var obj;
            if (aShiftY == 1) {
                for (x = 0; x < aMap.mapWidth; x++) {
                    for (y = aMap.mapHeight - 2; y >= 0; y--) {
                        obj = aMap.getObject(x, y);
                        if (obj != null) {
                            nY = HMapUtils.nearEmptyY(aMap, x, y, aShiftY);
                            if (y != nY) {
                                obj.eventMap(HMapUtils.EVENT_GRAVITY_Y);
                                aMap.swapObjects(x, y, x, nY);
                                countUp++;
                            }
                        }
                    }
                }
            } else if (aShiftY == -1) {
                for (x = 0; x < aMap.mapWidth; x++) {
                    for (y = 1; y < aMap.mapHeight; y++) {
                        obj = aMap.getObject(x, y);
                        if (obj != null) {
                            nY = HMapUtils.nearEmptyY(aMap, x, y, aShiftY);
                            if (y != nY) {
                                obj.eventMap(HMapUtils.EVENT_GRAVITY_Y);
                                aMap.swapObjects(x, y, x, nY);
                                countUp++;
                            }
                        }
                    }
                }
            }
            return countUp;
        };
        HMapUtils.collapsePick = function(aMap, aMapX, aMapY, aColor, aGems) {
            if (!HMapUtils.pushPick(aMap, aMapX, aMapY, aColor, aGems))
                return;
            HMapUtils.collapsePick(aMap, aMapX, aMapY - 1, aColor, aGems);
            HMapUtils.collapsePick(aMap, aMapX, aMapY + 1, aColor, aGems);
            HMapUtils.collapsePick(aMap, aMapX - 1, aMapY, aColor, aGems);
            HMapUtils.collapsePick(aMap, aMapX + 1, aMapY, aColor, aGems);
        };
        HMapUtils.pushPick = function(aMap, aMapX, aMapY, aColor, aGems) {
            if (!aMap.checkMap(aMapX, aMapY))
                return false;
            if (!aMap.checkObjectColor(aMapX, aMapY, aColor))
                return false;
            var obj = aMap.getObject(aMapX, aMapY);
            for (var i = 0; i < aGems.length; i++) {
                if (aGems[i] == obj)
                    return false;
            }
            aGems.push(obj);
            return true;
        };
        HMapUtils.checkFirstHint = function(aMap, aColor, aMinLength, aPointResult) {
            if (aPointResult == null)
                aPointResult = new Phaser.Point();
            var gems = [];
            for (var x = 0; x < aMap.mapWidth; x++) {
                for (var y = 0; y < aMap.mapHeight; y++) {
                    gems.length = 0;
                    if (aMap.checkObject(x, y)) {
                        HMapUtils.collapsePick(aMap, x, y - 1, aColor, gems);
                        HMapUtils.collapsePick(aMap, x, y + 1, aColor, gems);
                        HMapUtils.collapsePick(aMap, x - 1, y, aColor, gems);
                        HMapUtils.collapsePick(aMap, x + 1, y, aColor, gems);
                        if (gems.length >= aMinLength) {
                            aPointResult.x = x;
                            aPointResult.y = y;
                            return aPointResult;
                        }
                    }
                }
            }
            aPointResult.y = aPointResult.x = -1;
            return aPointResult;
        };
        HMapUtils.EVENT_KILL = 'kill';
        HMapUtils.EVENT_REVIVE = 'revive';
        HMapUtils.EVENT_SHIFT_Y = 'shiftY';
        HMapUtils.EVENT_GRAVITY_Y = 'gravityY';
        return HMapUtils;
    })();
    H812.HMapUtils = HMapUtils;
})(H812 || (H812 = {}));
var H812;
(function(H812) {
    var EffText = (function(_super) {
        __extends(EffText, _super);

        function EffText(aGame, aFont, aName, aText, aX, aY, aSize) {
            if (typeof aText === "undefined") {
                aText = '';
            }
            if (typeof aX === "undefined") {
                aX = 0;
            }
            if (typeof aY === "undefined") {
                aY = 0;
            }
            if (typeof aSize === "undefined") {
                aSize = 50;
            }
            _super.call(this, aGame, aX, aY, aFont, aText, aSize);
            this.name = aName;
            this.align = 'center';
            this.setValue('+0', 0, 0, 1000);
        }
        EffText.prototype.setValue = function(aText, aX, aY, aDuration) {
            if (typeof aDuration === "undefined") {
                aDuration = 1000;
            }
            this.visible = true;
            this.text = aText;
            this.x = aX;
            this.y = aY;
            this.alpha = 1;
            this._duration = aDuration <= 0 ? 1000 : aDuration;
            this._timer = 0;
        };
        EffText.prototype.update = function() {
            _super.prototype.update.call(this);
            if (this._timer != -1) {
                this._timer += this.game.time.elapsed;
                this.y -= 1;
                if (this._timer >= this._duration) {
                    this.alpha = 0;
                    this.visible = false;
                    this._timer = -1;
                } else {
                    this.alpha = 1 - this._timer / this._duration;
                }
            }
        };
        return EffText;
    })(Phaser.BitmapText);
    H812.EffText = EffText;
})(H812 || (H812 = {}));
var H812;
(function(H812) {
    var EffGroup = (function(_super) {
        __extends(EffGroup, _super);

        function EffGroup(aGame, aParent, aDefaultFont) {
            _super.call(this, aGame, aParent);
            this._cache = [];
            this._objects = [];
            this._defaultFont = aDefaultFont;
        }
        EffGroup.prototype.destroy = function() {
            _super.prototype.destroy.call(this);
            this._cache = null;
            this._objects = null;
        };
        EffGroup.prototype.reviveText = function(aText, aX, aY, aDur) {
            if (typeof aDur === "undefined") {
                aDur = 1000;
            }
            var obj;
            if (this._cache.length > 0) {
                obj = this._cache.shift();
            } else {
                obj = new H812.EffText(this.game, this._defaultFont, '', '', 0, 0);
                this.add(obj);
            }
            obj.setValue(aText, aX, aY, aDur);
            this._objects.push(obj);
            return obj;
        };
        EffGroup.prototype.updateEff = function() {
            var i = 0;
            var spr;
            if (this._objects.length > 0) {
                while (i < this._objects.length) {
                    if (this._objects[i] != null && this._objects[i] != undefined) {
                        spr = this._objects[i];
                        if (!spr.visible) {
                            this._objects[i] = null;
                            this._cache.push(spr);
                        }
                    }
                    i++;
                }
            }
        };
        EffGroup.prototype.update = function() {
            _super.prototype.update.call(this);
            this.updateEff();
        };
        return EffGroup;
    })(Phaser.Group);
    H812.EffGroup = EffGroup;
})(H812 || (H812 = {}));
var H812;
(function(H812) {
    var HMap = (function(_super) {
        __extends(HMap, _super);

        function HMap(aGame, aParent, aTilesKey, aTileWidth, aTileHeight, aMapWidth, aMapHeight, aDefFont) {
            if (typeof aMapWidth === "undefined") {
                aMapWidth = 0;
            }
            if (typeof aMapHeight === "undefined") {
                aMapHeight = 0;
            }
            if (typeof aDefFont === "undefined") {
                aDefFont = '';
            }
            _super.call(this, aGame, aParent, 'map');
            this.movingEaseFunc = Phaser.Easing.Back.InOut;
            this._mapHeight = this._mapWidth = this._mapTotal = 0;
            this._inputEnable = false;
            this._active = true;
            this._movesCount = 0;
            this._movesCurrent = this._movesLast = 0;
            this._partsLayer = new Phaser.Group(this.game, this);
            this._parts = [];
            this._partsCache = [];
            this._objectsLayer = new Phaser.Group(this.game, this);
            this._objects = [];
            this._objectsCache = [];
            this._tileset = aTilesKey;
            this._tileWidth = aTileWidth;
            this._tileHeight = aTileHeight;
            if (aMapWidth > 0 && aMapHeight > 0)
                this.createMap(aMapWidth, aMapHeight);
            this.inputEnable = true;
            this.onCollapse = new Phaser.Signal();
            this._eff = new H812.EffGroup(aGame, this, aDefFont);
        }
        Object.defineProperty(HMap.prototype, "deltaTime", {
            get: function() {
                return this.game.time.elapsed;
            },
            enumerable: true,
            configurable: true
        });
        HMap.prototype.movingDuration = function(numStep) {
            if (typeof numStep === "undefined") {
                numStep = 1;
            }
            return this.game.rnd.integerInRange(150, 250) * numStep;
        };
        Object.defineProperty(HMap.prototype, "active", {
            get: function() {
                return this._active;
            },
            set: function(aEnable) {
                if (this._active == aEnable)
                    return;
                this._active = aEnable;
                if (!this._active) {
                    this._inputActivated = this.inputEnable;
                    this.inputEnable = false;
                } else {
                    this.inputEnable = this._inputActivated;
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(HMap.prototype, "inputEnable", {
            get: function() {
                return this._inputEnable;
            },
            set: function(aEnable) {
                if (this._inputEnable == aEnable)
                    return;
                this._inputEnable = aEnable;
                if (this._inputEnable) {
                    this.game.input.onDown.add(this.eventTouch, this);
                } else {
                    this.game.input.onDown.remove(this.eventTouch, this);
                }
            },
            enumerable: true,
            configurable: true
        });
        HMap.prototype.eventTouch = function(aPoint) {};
        HMap.prototype.preUpdate = function() {
            if (this._active && this.activeMap) {
                _super.prototype.preUpdate.call(this);
            }
        };
        HMap.prototype.postUpdate = function() {
            if (this._active && this.activeMap) {
                _super.prototype.postUpdate.call(this);
            }
        };
        HMap.prototype.update = function() {
            if (this._active && this.activeMap) {
                this.updateMovement();
                this.updateMap();
                _super.prototype.update.call(this);
                this.updateParts();
            }
        };
        HMap.prototype.destroy = function() {
            this.destroyMap();
            this.inputEnable = false;
            this.active = false;
            _super.prototype.destroy.call(this);
            this._objects = null;
            this._objectsCache = null;
            this._objectsLayer = null;
            this._mapHeight = this._mapWidth = this._mapTotal = 0;
            this._tileHeight = this._tileWidth = 0;
            this._tileset = null;
            this._active = false;
            this.activeMap = false;
            if (this.onCollapse != null) {
                this.onCollapse.removeAll();
                this.onCollapse = null;
            }
            this._parts = null;
            this._partsCache = null;
            this._eff = null;
        };
        Object.defineProperty(HMap.prototype, "tileset", {
            get: function() {
                return this._tileset;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(HMap.prototype, "tileWidth", {
            get: function() {
                return this._tileWidth;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(HMap.prototype, "tileHeight", {
            get: function() {
                return this._tileHeight;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(HMap.prototype, "mapWidth", {
            get: function() {
                return this._mapWidth;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(HMap.prototype, "mapHeight", {
            get: function() {
                return this._mapHeight;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(HMap.prototype, "mapTotal", {
            get: function() {
                return this._mapTotal;
            },
            enumerable: true,
            configurable: true
        });
        HMap.prototype.destroyMap = function() {
            this.destroyAllObjects();
            this.destroyAllParts();
            this._mapHeight = this._mapWidth = this._mapTotal = 0;
            this._movesCount = 0;
            this._movesCurrent = this._movesLast = 0;
            this.activeMap = false;
        };
        HMap.prototype.createMap = function(aMapWidth, aMapHeight) {
            this.destroyMap();
            this._mapTotal = aMapWidth * aMapHeight;
            if (this._mapTotal == 0) {
                this._mapWidth = this._mapHeight = 0;
                return false;
            }
            this._mapWidth = aMapWidth;
            this._mapHeight = aMapHeight;
            var i = 0;
            while (i < this._mapTotal) {
                this._objects[i++] = null;
            }
            this.activeMap = true;
            return true;
        };
        HMap.prototype.resetMap = function() {
            this.activeMap = true;
        };
        HMap.prototype.updateMap = function() {};
        HMap.prototype.checkMap = function(aMapX, aMapY) {
            return (aMapX >= 0 && aMapX < this._mapWidth && aMapY >= 0 && aMapY < this._mapHeight);
        };
        HMap.prototype.checkMapX = function(aMapX) {
            return aMapX >= 0 && aMapX < this._mapWidth;
        };
        HMap.prototype.checkMapY = function(aMapY) {
            return aMapY >= 0 && aMapY < this._mapHeight;
        };
        HMap.prototype.mapToRealX = function(aX) {
            return aX * this._tileWidth + this._tileWidth * 0.5;
        };
        HMap.prototype.mapToRealY = function(aY) {
            return aY * this._tileHeight + this._tileHeight * 0.5;
        };
        HMap.prototype.realToMapX = function(aX, aInMap) {
            if (typeof aInMap === "undefined") {
                aInMap = false;
            }
            var fx = (aX) / this._tileWidth;
            if (aInMap)
                fx = (fx < 0.0 ? 0 : (fx >= this._mapWidth ? this._mapWidth - 1 : fx));
            else
                fx = ((fx < 0.0 || fx >= this._mapWidth) ? -1.0 : fx);
            return Math.floor(fx);
        };
        HMap.prototype.realToMapY = function(aY, aInGrid) {
            if (typeof aInGrid === "undefined") {
                aInGrid = false;
            }
            var fy = (aY) / this._tileHeight;
            if (aInGrid)
                fy = (fy < 0.0 ? 0 : (fy >= this._mapHeight ? this._mapHeight - 1 : fy));
            else
                fy = ((fy < 0.0 || fy >= this._mapHeight) ? -1.0 : fy);
            return Math.floor(fy);
        };
        HMap.prototype.isMoving = function() {
            return this._movesCount != 0;
        };
        HMap.prototype.isMovingJustBegin = function() {
            return this._movesCurrent == 2;
        };
        HMap.prototype.isMovingJustEnd = function() {
            return this._movesCurrent == -1;
        };
        HMap.prototype.eventMovingBegin = function() {};
        HMap.prototype.eventMovingEnd = function() {};
        HMap.prototype.updateMovement = function() {
            if ((this._movesLast == -1) && (this._movesCurrent == -1))
                this._movesCurrent = 0;
            else if ((this._movesLast == 2) && (this._movesCurrent == 2))
                this._movesCurrent = 1;
            this._movesLast = this._movesCurrent;
            var nMoves = 0;
            var obj;
            var i = 0;
            while (i < this.mapTotal) {
                obj = this._objects[i++];
                if (obj != null && obj != undefined) {
                    if (obj.isMoving())
                        nMoves++;
                }
            }
            if (this._movesCount != nMoves) {
                if (this._movesCount == 0) {
                    if (this._movesCurrent > 0) {
                        this._movesCurrent = 1;
                    } else {
                        this._movesCurrent = 2;
                        this.eventMovingBegin();
                    }
                } else {
                    if (this._movesCurrent > 0) {
                        this._movesCurrent = -1;
                        this.eventMovingEnd();
                    } else {
                        this._movesCurrent = 0;
                    }
                }
                this._movesCount = nMoves;
            }
        };
        HMap.prototype.reviveText = function(aMapX, aMapY, aText, aDur) {
            if (typeof aText === "undefined") {
                aText = '';
            }
            if (typeof aDur === "undefined") {
                aDur = 1000;
            }
            return this._eff.reviveText(aText, this.mapToRealX(aMapX), this.mapToRealY(aMapY), aDur);
        };
        HMap.prototype.reviveParts = function(aMapX, aMapY, aKey, aFrame) {
            var mapIndex = aMapY * this._mapWidth + aMapX;
            if (mapIndex < 0 || mapIndex >= this._mapTotal)
                return null;
            var obj;
            if (this._partsCache.length > 0) {
                obj = this._partsCache.shift();
                obj.revive();
                obj.x = this.mapToRealX(aMapX);
                obj.y = this.mapToRealY(aMapY);
                obj.frame = aFrame;
                this._parts.push(obj);
                return obj;
            }
            obj = new Phaser.Sprite(this.game, this.mapToRealX(aMapX), this.mapToRealY(aMapY), aKey, aFrame);
            obj.anchor.x = 0.5;
            obj.anchor.y = 0.5;
            this._partsLayer.add(obj);
            obj.bringToTop();
            this._parts.push(obj);
            return obj;
        };
        HMap.prototype.updateParts = function() {
            var i = 0;
            var spr;
            if (this._parts.length > 0) {
                while (i < this._parts.length) {
                    if (this._parts[i] != null && this._parts[i] != undefined) {
                        spr = this._parts[i];
                        spr.alpha -= 0.05;
                        spr.angle += 1;
                        spr.scale.x = spr.scale.y = spr.scale.x * 0.9;
                        spr.y += 10;
                        if (spr.alpha <= 0) {
                            this._parts[i] = null;
                            spr.kill();
                            spr.alpha = 1;
                            spr.angle = 0;
                            spr.scale.x = spr.scale.y = 1;
                            this._partsCache.push(spr);
                        }
                    }
                    i++;
                }
            }
        };
        HMap.prototype.destroyAllParts = function() {
            var i = 0;
            if (this._partsCache.length > 0) {
                while (i < this._partsCache.length) {
                    this._partsCache[i].destroy();
                    this._partsCache[i] = null;
                    i++;
                }
                this._partsCache.length = 0;
            }
            i = 0;
            if (this._parts.length > 0) {
                while (i < this._parts.length) {
                    if (this._parts[i] != null && this._parts[i] != undefined) {
                        this._parts[i].destroy();
                        this._parts[i] = null;
                    }
                    i++;
                }
                this._parts.length = 0;
            }
        };
        HMap.prototype.getObject = function(aMapX, aMapY, aResultList) {
            if (typeof aResultList === "undefined") {
                aResultList = null;
            }
            if (!this.checkMap(aMapX, aMapY))
                return null;
            var mapIndex = aMapY * this._mapWidth + aMapX;
            var obj = null;
            if (this._objects[mapIndex] != undefined && this._objects[mapIndex] != null) {
                if (aResultList != null)
                    aResultList.push(obj);
                obj = this._objects[mapIndex];
            }
            return obj;
        };
        HMap.prototype.getObjectByIndex = function(aIndex) {
            if (aIndex < 0 || aIndex >= this._mapTotal)
                return null;
            return this._objects[aIndex] == undefined ? null : this._objects[aIndex];
        };
        HMap.prototype.checkObjectByIndex = function(aIndex) {
            return this.getObjectByIndex(aIndex) != null;
        };
        HMap.prototype.checkObject = function(aMapX, aMapY) {
            return this.getObject(aMapX, aMapY) != null;
        };
        HMap.prototype.checkObjectColor = function(aMapX, aMapY, aColor) {
            if (!this.checkMap(aMapX, aMapY))
                return false;
            var mapIndex = aMapY * this._mapWidth + aMapX;
            var obj = this._objects[mapIndex];
            if (obj == null || obj == undefined)
                return false;
            return obj.checkColor(aColor);
        };
        HMap.prototype.getObjectColor = function(aMapX, aMapY) {
            if (!this.checkMap(aMapX, aMapY))
                return 0;
            var mapIndex = aMapY * this._mapWidth + aMapX;
            var obj = this._objects[mapIndex];
            if (obj == null || obj == undefined)
                return 0;
            return obj.getColor();
        };
        HMap.prototype.swapObjects = function(aX1, aY1, aX2, aY2, aMoving) {
            if (typeof aMoving === "undefined") {
                aMoving = true;
            }
            var obj1 = this.getObject(aX1, aY1);
            var obj2 = this.getObject(aX2, aY2);
            if (obj1 == null && obj2 == null)
                return false;
            this._objects[aX1 + aY1 * this._mapWidth] = obj2;
            this._objects[aX2 + aY2 * this._mapWidth] = obj1;
            if (aMoving) {
                var dist = H812.HUtils.getDistance(aX1, aY1, aX2, aY2);
                dist = dist <= 0 ? 1 : dist > 3 ? 2 : dist;
                if (obj2 != null)
                    obj2.moveTo(aX1, aY1, this.movingDuration(dist), this.movingEaseFunc);
                if (obj1 != null)
                    obj1.moveTo(aX2, aY2, this.movingDuration(dist), this.movingEaseFunc);
            } else {
                if (obj2 != null)
                    obj2.setPosition(aX1, aY1, true);
                if (obj1 != null)
                    obj1.setPosition(aX2, aY2, true);
            }
            return true;
        };
        HMap.prototype.destroyAllObjects = function() {
            var i = 0;
            if (this._objectsCache.length > 0) {
                while (i < this._objectsCache.length) {
                    this._objectsCache[i].destroy();
                    this._objectsCache[i] = null;
                    i++;
                }
                this._objectsCache.length = 0;
            }
            i = 0;
            if (this._objects.length > 0) {
                while (i < this._objects.length) {
                    if (this._objects[i] != null && this._objects[i] != undefined) {
                        this._objects[i].destroy();
                        this._objects[i] = null;
                    }
                    i++;
                }
                this._objects.length = 0;
            }
        };
        HMap.prototype.killAllObjects = function() {
            var obj;
            var i = 0;
            while (i < this._mapTotal) {
                obj = this._objects[i];
                if (obj != null && obj != undefined) {
                    this._objects[i] = null;
                    obj.kill();
                    this._objectsCache.push(obj);
                    while (this._objectsCache.length > this._mapTotal + 1) {
                        obj = this._objectsCache.shift();
                        if (obj != null && obj != undefined)
                            obj.destroy();
                    }
                }
                i++;
            }
        };
        HMap.prototype.killObject = function(aMapX, aMapY) {
            var mapIndex = aMapY * this._mapWidth + aMapX;
            if (mapIndex < 0 || mapIndex >= this._mapTotal)
                return false;
            var obj = this._objects[mapIndex];
            if (obj != null && obj != undefined) {
                this._objects[mapIndex] = null;
                var spr = this.reviveParts(aMapX, aMapY, obj.key, obj.frame);
                obj.kill();
                this._objectsCache.push(obj);
                while (this._objectsCache.length > this._mapTotal + 1) {
                    obj = this._objectsCache.shift();
                    if (obj != null && obj != undefined)
                        obj.destroy();
                }
                return true;
            }
            return false;
        };
        HMap.prototype.reviveObject = function(aMapX, aMapY) {
            var mapIndex = aMapY * this._mapWidth + aMapX;
            if (mapIndex < 0 || mapIndex >= this._mapTotal)
                return null;
            var obj;
            if (this._objects[mapIndex] != null && this._objects[mapIndex] != undefined) {
                obj = this._objects[mapIndex];
                return obj;
            }
            if (this._objectsCache.length > 0) {
                obj = this._objectsCache.shift();
                obj.revive();
                obj.setPosition(aMapX, aMapY, true);
                this._objects[mapIndex] = obj;
                return obj;
            }
            obj = new H812.HGem(this);
            this._objectsLayer.add(obj);
            obj.setPosition(aMapX, aMapY, true);
            this._objects[mapIndex] = obj;
            return obj;
        };
        HMap.prototype.collapsePoint = function(aMapX, aMapY) {
            if (!this.checkMap(aMapX, aMapY))
                return 0;
            var obj = this.getObject(aMapX, aMapY);
            if (obj == null || obj == undefined)
                return 0;
            var color = obj.getColor();
            if (color == 7 || color == 0 || obj.checkFlag(1))
                return 0;
            var picked = [];
            H812.HMapUtils.collapsePick(this, aMapX, aMapY, color, picked);
            if (picked.length <= 2) {
                picked.length = 0;
                return 0;
            }
            var l = 0;
            for (l = 0; l < picked.length; l++) {
                obj = picked[l];
                obj.eventMap(H812.HMapUtils.EVENT_KILL);
                this.killObject(obj.mapX, obj.mapY);
            }
            l = picked.length;
            picked.length = 0;
            if (this.onCollapse != null) {
                this.onCollapse.dispatch(color, l, aMapX, aMapY);
            }
            this.game.sound.play('match');
            return l;
        };
        HMap.prototype.collapseMap = function() {
            var numCollapse = 0;
            var pickedCount;
            var pickedColor;
            for (var x = 0; x < this._mapWidth; x++) {
                for (var y = 0; y < this._mapHeight; y++) {
                    pickedColor = this.getObjectColor(x, y);
                    pickedCount = this.collapsePoint(x, y);
                    if (pickedCount > 0) {
                        numCollapse++;
                    }
                }
            }
            return numCollapse;
        };
        return HMap;
    })(Phaser.Group);
    H812.HMap = HMap;
})(H812 || (H812 = {}));
var H812;
(function(H812) {
    (function(HMapStatus) {
        HMapStatus[HMapStatus["GAME_CONTINUE"] = 0] = "GAME_CONTINUE";
        HMapStatus[HMapStatus["GAME_OVER"] = -1] = "GAME_OVER";
        HMapStatus[HMapStatus["GAME_OVER_CHECK"] = -2] = "GAME_OVER_CHECK";
    })(H812.HMapStatus || (H812.HMapStatus = {}));
    var HMapStatus = H812.HMapStatus;
    var HMapEx = (function(_super) {
        __extends(HMapEx, _super);

        function HMapEx(aGame, aParent, aTilesKey, aTileWidth, aTileHeight, aMapWidth, aMapHeight, aDefFont) {
            if (typeof aMapWidth === "undefined") {
                aMapWidth = 0;
            }
            if (typeof aMapHeight === "undefined") {
                aMapHeight = 0;
            }
            if (typeof aDefFont === "undefined") {
                aDefFont = '';
            }
            this._onEventMap = new Phaser.Signal();
            this._onTouch = new Phaser.Signal();
            this._onMovementEnd = new Phaser.Signal();
            _super.call(this, aGame, aParent, aTilesKey, aTileWidth, aTileHeight, aMapWidth, aMapHeight, aDefFont);
            this._score = this._prevScore = 0;
        }
        HMapEx.prototype.isWaitTouch = function() {
            return this._waitTouch;
        };
        HMapEx.prototype.waitTouch = function(aWaitTouch, aMapX, aMapY) {
            this._waitTouch = aWaitTouch;
            if (!this._waitTouch) {
                this._waitTouchX = this._waitTouchY = -1;
            } else {
                if (aMapX == -1 || aMapY == -1) {
                    this._waitTouchX = this._waitTouchY = -1;
                } else {
                    this._waitTouchX = aMapX;
                    this._waitTouchY = aMapY;
                }
            }
            this.eventMap(HMapEx.EVENT_WAIT_TOUCH_CHANGE);
        };
        HMapEx.prototype.eventTouch = function(aPoint) {
            if (aPoint == null || !this.activeMap)
                return;
            var mapX = this.realToMapX(aPoint.x - this.x);
            var mapY = this.realToMapY(aPoint.y - this.y);
            var doSelect = !this._waitTouch;
            if (this._waitTouch) {
                if (this._waitTouchX == -1 || this._waitTouchY == -1 || mapX == this._waitTouchX && mapY == this._waitTouchY) {
                    this._waitTouch = false;
                    this.eventMap(HMapEx.EVENT_WAIT_TOUCH_CHANGE);
                    if (this._waitTouchX == -1 && this._waitTouchY == -1 || mapX == this._waitTouchX && mapY == this._waitTouchY) {
                        doSelect = true;
                    } else {
                        if (this._waitTouchX == -1 || this._waitTouchY == -1)
                            doSelect = false;
                    }
                }
            }
            if (doSelect)
                this.select(mapX, mapY);
            this._onTouch.dispatch(mapX, mapY);
        };
        Object.defineProperty(HMapEx.prototype, "onTouch", {
            get: function() {
                return this._onTouch;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(HMapEx.prototype, "onEventMap", {
            get: function() {
                return this._onEventMap;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(HMapEx.prototype, "onMovementEnd", {
            get: function() {
                return this._onMovementEnd;
            },
            enumerable: true,
            configurable: true
        });
        HMapEx.prototype.setLevel = function(aLevel) {
            if (aLevel > 0 && !this.game.sound.mute)
                this.game.sound.play('level_up');
            switch (aLevel) {
                case 0:
                    this._levelDuration = 10000;
                    this.setCollapseTimer(1000);
                    this.setNextLineTimer(5000);
                    break;
                case 1:
                    this._levelDuration = 8000;
                    this.setCollapseTimer(1000);
                    this.setNextLineTimer(4500);
                    break;
                case 2:
                    this._levelDuration = 7000;
                    this.setCollapseTimer(1000);
                    this.setNextLineTimer(4000);
                    break;
                case 3:
                    this._levelDuration = 15000;
                    this.setCollapseTimer(1000);
                    this.setNextLineTimer(3500);
                    break;
                case 4:
                    this._levelDuration = 20000;
                    this.setCollapseTimer(1000);
                    this.setNextLineTimer(3000);
                    break;
                case 5:
                    this._levelDuration = 30000;
                    this.setCollapseTimer(1000);
                    this.setNextLineTimer(2500);
                    break;
                case 6:
                    this._levelDuration = 35000;
                    this.setCollapseTimer(1000);
                    this.setNextLineTimer(2300);
                    break;
                case 7:
                    this._levelDuration = 50000;
                    this.setCollapseTimer(1000);
                    this.setNextLineTimer(2100);
                    break;
                case 8:
                    this._levelDuration = 80000;
                    this.setCollapseTimer(1000);
                    this.setNextLineTimer(2000);
                    break;
                case 9:
                    this._levelDuration = 70000;
                    this.setCollapseTimer(1000);
                    this.setNextLineTimer(1800);
                    break;
            }
            this._level = aLevel;
            this._levelTimer = 0;
            return true;
        };
        HMapEx.prototype.getLevel = function() {
            return this._level;
        };
        HMapEx.prototype.getLevelProgress = function() {
            return this._levelDuration == 0 ? 1 : this._levelTimer / this._levelDuration;
        };
        HMapEx.prototype.updateLevelTimer = function(aDeltaTime) {
            if (this._levelDuration == 0)
                return;
            this._levelTimer += aDeltaTime;
            if (this._levelTimer >= this._levelDuration) {
                if (this.setLevel(this._level + 1)) {
                    this.eventMap(HMapEx.EVENT_LEVEL_UP);
                } else {
                    this._levelTimer = this._levelDuration = 0;
                    this.eventMap(HMapEx.EVENT_LEVEL_LAST);
                }
            }
        };
        HMapEx.prototype.getPrevScore = function() {
            return this._prevScore;
        };
        HMapEx.prototype.getScore = function() {
            return this._score;
        };
        HMapEx.prototype.setScore = function(aValue) {
            this._prevScore = this._score;
            this._score = aValue;
            this.eventMap(HMapEx.EVENT_SCORE_CHANGE);
        };
        HMapEx.prototype.getNextLineProgress = function() {
            return this._nextLineProgress;
        };
        HMapEx.prototype.setNextLineTimer = function(aDuration) {
            this._nextLineTimer = this._nextLineDuration = aDuration;
        };
        HMapEx.prototype.updateNextLine = function(aDeltaTime) {
            if (this._nextLineTimer != 0) {
                this._nextLineTimer -= aDeltaTime;
                if (this._nextLineTimer < 0)
                    this._nextLineTimer = 0;
            }
            this._nextLineProgress = (this._nextLineDuration - this._nextLineTimer) / this._nextLineDuration;
            this._nextLineProgress = this._nextLineProgress > 1 ? 1 : (this._nextLineProgress < 0 ? 0 : this._nextLineProgress);
            if (this._nextLineProgress == 1) {
                this._nextLineTimer = this._nextLineDuration;
                if (H812.HMapUtils.checkEmptyLine(this, this.mapHeight - 1)) {
                    H812.HMapUtils.insertLine(this, -1, 1);
                    if (!this.game.sound.mute)
                        this.game.sound.play('drop');
                } else {
                    this.setLastChance(true);
                }
            }
        };
        HMapEx.prototype.getLastChanceProgress = function() {
            var progress = this._lastChanceDuration == 0 ? 0 : this._lastChanceTimer / this._lastChanceDuration;
            return progress > 1 ? 1 : (progress < 0 ? 0 : progress);
        };
        HMapEx.prototype.setLastChanceTimer = function(aDuration) {
            this._lastChanceTimer = this._lastChanceDuration = aDuration;
        };
        HMapEx.prototype.setLastChance = function(aDo) {
            if (this.getGameStatus() == -1)
                return false;
            if (this.getGameStatus() == -2)
                return false;
            this._lastChanceTimer = this._lastChanceDuration;
            if (aDo) {
                this.setGameStatus(-2);
            } else {
                this.setGameStatus(0);
            }
            return true;
        };
        HMapEx.prototype.getGameStatus = function() {
            return this._gameStatus;
        };
        HMapEx.prototype.setGameStatus = function(aStatus) {
            if (this._gameStatus == aStatus)
                return;
            this._gameStatus = aStatus;
            if (this._gameStatus == 0)
                this.eventMap(HMapEx.EVENT_GAME_CONTINUE);
            if (this._gameStatus == -1)
                this.eventMap(HMapEx.EVENT_GAME_OVER);
            if (this._gameStatus == -2)
                this.eventMap(HMapEx.EVENT_GAME_OVER_CHECK);
            this.activeMap = this._gameStatus != -1;
        };
        HMapEx.prototype.destroy = function() {
            _super.prototype.destroy.call(this);
            this._onEventMap.removeAll();
            this._onEventMap = null;
            this._onTouch.removeAll();
            this._onTouch = null;
            this._onMovementEnd.removeAll();
            this._onMovementEnd = null;
        };
        HMapEx.prototype.createMap = function(aMapWidth, aMapHeight) {
            if (!_super.prototype.createMap.call(this, aMapWidth, aMapHeight))
                return false;
            this.createObjectSelected(true);
            return true;
        };
        HMapEx.prototype.destroyMap = function() {
            _super.prototype.destroyMap.call(this);
            this.destroyObjectSelected();
        };
        HMapEx.prototype.toDebugString = function() {
            var str;
            str = 'status:' + this._gameStatus;
            str += '/// last_chance:' + this.getLastChanceProgress().toFixed(2) + '/' + this._lastChanceTimer.toFixed(2) + '/' + this._lastChanceDuration.toFixed(2);
            return str;
        };
        HMapEx.prototype.resetMap = function() {
            this.killAllObjects();
            this.createObjectSelected(true);
            this.setCollapse(true);
            this.setLastChance(false);
            this._prevScore = 0;
            this.setScore(0);
            this.setGameStatus(0);
            this.setCollapseTimer(1000);
            this.setLastChanceTimer(2300);
            this.setNextLineTimer(2000);
            this.setLevel(0);
            var i = 4;
            while (i--) {
                H812.HMapUtils.insertLine(this, -1, 1, 0);
            }
            this._waitTouch = false;
            this._waitTouchX = this._waitTouchY = -1;
            this.eventMap(HMapEx.EVENT_GAME_RESET);
        };
        HMapEx.prototype.updateMap = function() {
            var deltaTimer = this.deltaTime;
            var status = this.getGameStatus();
            if (status == -1)
                return;
            this.updateCollapse(deltaTimer);
            if (this._waitTouch)
                return;
            this.updateNextLine(deltaTimer);
            this.updateLevelTimer(deltaTimer);
            if (status == -2) {
                var empty = H812.HMapUtils.checkEmptyLine(this, this.mapHeight - 1);
                if (empty) {
                    this.setGameStatus(0);
                } else {
                    this._lastChanceTimer -= deltaTimer;
                    if (this._lastChanceTimer <= 0) {
                        this._lastChanceTimer = this._lastChanceDuration;
                        this.setGameStatus(-1);
                    }
                }
            }
        };
        HMapEx.prototype.eventMap = function(aEvent) {
            this._onEventMap.dispatch(aEvent);
        };
        HMapEx.prototype.createObjectSelected = function(aSetUp) {
            if (typeof aSetUp === "undefined") {
                aSetUp = false;
            }
            var setUp = false;
            if (!this._objSelectedInit) {
                this._objSelected = new H812.HGem(this);
                this.add(this._objSelected);
                setUp = true;
                this._objSelectedInit = true;
            } else {
                if (!this._objSelected.alive) {
                    this._objSelected.revive();
                    setUp = true;
                }
                this._objSelected.bringToTop();
            }
            if (setUp || aSetUp) {
                var px = this.tileWidth * this.mapWidth * 0.5;
                var py = this.tileHeight * this.mapHeight;
                this._objSelectedPosition = new Phaser.Point(px, py);
                this._objSelected.randomGem(0);
                this._objSelected.setRealPosition(this._objSelectedPosition.x, this._objSelectedPosition.y + this.tileHeight, false);
                this._objSelected.moveRealTo(this._objSelectedPosition.x, this._objSelectedPosition.y, this.movingDuration(), this.movingEaseFunc, 0);
            }
            return this._objSelected;
        };
        HMapEx.prototype.getSelectedColor = function() {
            return this._objSelected != null && this._objSelectedInit ? this._objSelected.getColor() : -1;
        };
        HMapEx.prototype.destroyObjectSelected = function() {
            if (this._objSelectedInit) {
                this._objSelected.destroy();
                this._objSelected = null;
                this._objSelectedPosition = null;
                this._objSelectedPosition = null;
                this._objSelectedInit = false;
            }
            this._collapseMap = false;
        };
        HMapEx.prototype.select = function(aMapX, aMapY) {
            if (!this.checkMap(aMapX, aMapY))
                return false;
            if (!this._objSelectedInit || this._objSelected.isMoving())
                return false;
            var obj = this.getObject(aMapX, aMapY);
            if (obj == null || obj == undefined || obj.isMoving())
                return false;
            if (obj.checkFlag(1)) {
                obj.setTweenAnimation('shake');
                return false;
            }
            var dist = H812.HUtils.getDistance(obj.x, obj.y, this._objSelectedPosition.x, this._objSelectedPosition.y);
            dist = dist / this.game.height;
            var duration = 200 + 400 * dist;
            var tmpColor = obj.getColor();
            var tmpType = obj.getFlags();
            var tmpX = this.mapToRealX(aMapX);
            var tmpY = this.mapToRealY(aMapY);
            obj.setColorAndFlags(this._objSelected.getColor(), this._objSelected.getFlags());
            obj.setRealPosition(this._objSelectedPosition.x, this._objSelectedPosition.y, false);
            obj.moveRealTo(tmpX, tmpY, duration, this.movingEaseFunc);
            this._objSelected.setColorAndFlags(tmpColor, tmpType);
            this._objSelected.setRealPosition(tmpX, tmpY);
            this._objSelected.moveRealTo(obj.x, obj.y, duration, this.movingEaseFunc);
            this._objSelected.bringToTop();
            this._collapseMap = true;
            if (!this.game.sound.mute)
                this.game.sound.play('exchange');
            return true;
        };
        HMapEx.prototype.setCollapse = function(aDo) {
            if (typeof aDo === "undefined") {
                aDo = true;
            }
            this._collapseMap = aDo;
        };
        HMapEx.prototype.setCollapseTimer = function(aDuration) {
            if (typeof aDuration === "undefined") {
                aDuration = 500;
            }
            this._collapseDuration = this._collapseTimer = aDuration;
        };
        HMapEx.prototype.updateCollapse = function(aDeltaTime, aIgnoreMoves) {
            if (typeof aIgnoreMoves === "undefined") {
                aIgnoreMoves = false;
            }
            if (this._collapseTimer != 0 && this._collapseDuration > 0) {
                this._collapseTimer -= aDeltaTime;
                if (this._collapseTimer < 0)
                    this._collapseTimer = 0;
            }
            if (!this.isMoving() || aIgnoreMoves) {
                if (this._collapseMap || (this._collapseTimer <= 0 && this._collapseDuration > 0)) {
                    this._collapseTimer = this._collapseDuration;
                    this._collapseMap = false;
                    if (this.collapseMap() > 0) {
                        this._collapseMap = (H812.HMapUtils.gravityY(this, -1) > 0);
                    }
                }
            }
        };
        HMapEx.prototype.eventMovingEnd = function() {
            this._collapseMap = true;
            this._onMovementEnd.dispatch();
        };
        HMapEx.EVENT_GAME_CONTINUE = 'game_continue';
        HMapEx.EVENT_GAME_OVER = 'game_over';
        HMapEx.EVENT_GAME_OVER_CHECK = 'game_over_check';
        HMapEx.EVENT_GAME_RESET = 'game_reset';
        HMapEx.EVENT_LEVEL_UP = 'level_up';
        HMapEx.EVENT_LEVEL_LAST = 'level_end';
        HMapEx.EVENT_SCORE_CHANGE = 'score_change';
        HMapEx.EVENT_WAIT_TOUCH_CHANGE = 'wait_touch';
        return HMapEx;
    })(H812.HMap);
    H812.HMapEx = HMapEx;
})(H812 || (H812 = {}));
var H812;
(function(H812) {
    var PlayState = (function(_super) {
        __extends(PlayState, _super);

        function PlayState() {
            _super.apply(this, arguments);
        }
        PlayState.prototype.create = function() {
            this.add.sprite(0, 0, 'bg_game');
            this.grid = new H812.HMapEx(this.game, this.world, 'gui', PlayState.TILE_WIDTH, PlayState.TILE_HEIGHT, PlayState.GRID_WIDTH, PlayState.GRID_HEIGHT, 'font');
            this.grid.onEventMap.add(this.eventMap, this);
            this.grid.x = PlayState.GRID_OFFSET_X;
            this.grid.y = PlayState.GRID_OFFSET_Y;
            this.grid.onCollapse.add(this.onCollapse, this);
            this.grid.onTouch.add(this.onTouch, this);
            this.grid.onMovementEnd.add(this.onMovementEnd, this);
            var guiKey = 'gui';
            var guiFont = 'font';
            var hasSponsorLogo = this.game.cache.checkImageKey('logo_sponsor');
            this.checkingOver = this.dialog(this.world, 'checking', null, this, PlayState.GRID_OFFSET_X + 0.5 * (this.game.width - PlayState.GRID_OFFSET_X), this.world.centerY);
            this.checkingTimer = this.checkingOver.sprite(guiKey, 'timer_0', '', 0, 0, 0.5, 0.5);
            this.checkingOver.setPositionTween(this.checkingOver.x, -this.checkingTimer.height, this.checkingOver.x, this.checkingOver.y);
            this.game.physics.startSystem(Phaser.Physics.ARCADE);
            this.levelUpParticles = this.add.emitter(0, 0, 100);
            var frames = ['particles_0', 'particles_1', 'particles_2', 'particles_3', 'particles_4', 'particles_5', 'particles_6', 'particles_7', 'particles_8', 'particles_9'];
            this.levelUpParticles.makeParticles(guiKey, frames, 100);
            this.levelUpParticles.gravity = 250;
            this.levelUpParticles.x = PlayState.GRID_OFFSET_X + 0.5 * (this.game.width - PlayState.GRID_OFFSET_X);
            this.levelUpParticles.y = this.world.centerY;
            this.levelUp = this.dialog(this.world, 'level_up', null, this, PlayState.GRID_OFFSET_X + 0.5 * (this.game.width - PlayState.GRID_OFFSET_X), this.world.centerY);
            this.levelUp.sprite(guiKey, 'label_level', '', 0, -70, 0.5, 0.5);
            this.levelUpNumber = this.levelUp.sprite(guiKey, 'label_numbers_0', '', 0, 0, 0.5, 0.5);
            this.levelUpNumber.scale.x = this.levelUpNumber.scale.y = 1.3;
            this.levelUp.scale.x = this.levelUp.scale.y = 1.7;
            this.levelUp.setPositionTween(this.levelUp.x, -100, this.levelUp.x, this.levelUp.y);
            this.levelHideTimer = -1;
            this.tutorial = this.dialog(this.world, 'tutorial', null, null, this.world.centerX, this.world.centerY);
            this.tutorial.setAlphaTween(0, 1, false);
            this.guiControls = this.dialog(this.world, 'controls', this.buttonUp, this, this.world.centerX, 0);
            this.guiControls.setPositionTween(this.world.centerX - 200, 0, this.world.centerX, 0);
            this.guiControls.button(guiKey, 'button_pause_top', '', -275, 31);
            this.guiControls.sprite(guiKey, 'label_score', '', -230, 664);
            this.textScore = this.guiControls.numberic(guiFont, 'score', 0, -140, 620, 'left', 150);
            this.guiControls.sprite(guiKey, 'bar_next_wave_0', '', -275, 613, 0.5, 1);
            this.barNextLine = this.guiControls.sprite(guiKey, 'bar_next_wave_1', '', -275, 590, 0.5, 1);
            this.textScore.scale.x = this.textScore.scale.y = 0.5;
            this.guiControls.sprite(guiKey, 'label_level', '', 195, 665 + 100, 0.5, 0.5);
            this.textLevel = this.guiControls.sprite(guiKey, 'label_numbers_0', '', 275, 662 + 100, 0.5, 0.5);
            if (hasSponsorLogo)
                this.guiControls.button('logo_sponsor', 'button_logo', 0, 215, 660);
            this.fade = this.dialog(this.world, 'fade');
            this.fade.setAlphaTween(0, 1, false);
            var spr = this.fade.sprite(guiKey, 'fade', null, 0, 0, 0, 0);
            spr.scale.x = spr.scale.y = 4;
            this.guiPause = this.dialog(this.world, 'pause', this.buttonUp, this, this.world.centerX, 0);
            this.guiPause.setPositionTween(this.world.centerX + this.game.width, this.world.centerY - 50, this.world.centerX, this.world.centerY - 50);
            this.guiPause.button(guiKey, 'button_music_top', 'button_music_top' + (this.game.sound.mute ? '_1' : '_0'), 275, -324 + 50);
            this.guiPause.button(guiKey, 'button_play', '', 0, -62);
            this.guiPause.button(guiKey, 'button_menu', '', -53, 81);
            this.guiPause.button(guiKey, 'button_reset', '', 53, 81);
            if (hasSponsorLogo)
                this.guiPause.button('logo_sponsor', 'button_logo', 0, 0, 185);
            this.guiEnd = this.dialog(this.world, 'end', this.buttonUp, this, 0, 0);
            this.guiEnd.setPositionTween(this.world.centerX - this.game.width, this.world.centerY - 100, this.world.centerX, this.world.centerY - 100);
            this.guiEnd.sprite(guiKey, 'dialog_lose', '', 0, 0);
            this.guiEnd.button(guiKey, 'button_reset', '', -52, 130);
            this.guiEnd.button(guiKey, 'button_menu', '', 52, 130);
            this.guiEnd.numberic(guiFont, 'score', 0, 35, -30, 'left', 50);
            this.guiEnd.numberic(guiFont, 'best', 0, 35, 20, 'left', 50);
            if (hasSponsorLogo)
                this.guiEnd.button('logo_sponsor', 'button_logo', 0, 0, 220);
            this.setGameState('game');
            this.loadMap();
            H812.HState.transitionBringToTop();
            this.tutorialLevel = 0;
            if (this.settings.hasTutorial())
                this.makeTutorial(1);
        };
        PlayState.prototype.update = function() {
            _super.prototype.update.call(this);
            this.updateGameGUI();
        };
        PlayState.prototype.loadMap = function() {
            this.grid.resetMap();
        };
        PlayState.prototype.eventMap = function(aEvent) {
            if (aEvent == H812.HMapEx.EVENT_GAME_OVER_CHECK) {
                this.checkingOver.show();
                return;
            }
            if (aEvent == H812.HMapEx.EVENT_GAME_CONTINUE) {
                this.checkingOver.hide();
                return;
            }
            if (aEvent == H812.HMapEx.EVENT_GAME_OVER) {
                this.settings.setScore(this.grid.getScore(), true);
                this.guiEnd.getFirstText('score').setNumber(this.grid.getScore());
                this.guiEnd.getFirstText('best').setNumber(this.settings.getScore());
                this.setGameState('end');
                return;
            }
            if (aEvent == H812.HMapEx.EVENT_SCORE_CHANGE) {
                this.textScore.setNumber(this.grid.getScore());
                return;
            }
            if (aEvent == H812.HMapEx.EVENT_LEVEL_UP) {
                this.levelUpNumber.frameName = 'label_numbers_' + this.grid.getLevel().toString();
                this.textLevel.frameName = this.levelUpNumber.frameName;
                this.levelUp.show();
                this.levelHideTimer = 2000;
                this.levelUpParticles.start(true, 2500, 120, 10);
            }
        };
        PlayState.prototype.hintRect = function() {
            var sprRect;
            var sprRectBlack;
            sprRectBlack = this.tutorial.getFirstSprite('select_rect_black');
            if (sprRectBlack == null) {
                sprRectBlack = this.tutorial.sprite('gui', 'select_rect_black', null, 0, 0);
                sprRectBlack.scale.x = sprRectBlack.scale.y = 35;
                sprRectBlack.alpha = 0.3;
            }
            sprRect = this.tutorial.getFirstSprite('select_rect');
            if (sprRect == null) {
                sprRect = this.tutorial.sprite('gui', 'select_rect', null, 0, 0);
            }
            this.grid.updateCollapse(10000, true);
            var mPoint = new Phaser.Point();
            H812.HMapUtils.checkFirstHint(this.grid, this.grid.getSelectedColor(), 2, mPoint);
            if (mPoint.x == -1) {
                H812.HMapUtils.checkFirstHint(this.grid, this.grid.getSelectedColor(), 1, mPoint);
            }
            if (mPoint.x == -1) {
                mPoint.x = 4;
                mPoint.y = 2;
            }
            var mX = mPoint.x;
            var mY = mPoint.y;
            this.grid.waitTouch(true, mX, mY);
            mX = this.grid.mapToRealX(mX) - this.world.centerX + PlayState.GRID_OFFSET_X;
            mY = this.grid.mapToRealY(mY) - this.world.centerY + PlayState.GRID_OFFSET_Y;
            sprRect.x = sprRectBlack.x = mX;
            sprRect.y = sprRectBlack.y = mY;
        };
        PlayState.prototype.makeTutorial = function(aID) {
            if (this.tutorialLevel == aID)
                return;
            this.tutorialLevel = aID;
            if (this.tutorialLevel == 0)
                return;
            this.hintRect();
            var sprText;
            sprText = this.tutorial.getFirstSprite('label_text');
            if (sprText == null) {
                sprText = this.tutorial.sprite('gui', 'label_text', 'label_touch', 0, 0);
            }
            var sprRect;
            sprRect = this.tutorial.getFirstSprite('select_rect');
            switch (aID) {
                case 1:
                    sprText.frameName = 'label_touch';
                    sprText.x = sprRect.x;
                    sprText.y = sprRect.y + 100;
                    this.tutorial.show(false, true);
                    break;
                case 2:
                    sprText.frameName = 'label_3_and_more';
                    sprText.x = 0;
                    sprText.y = 100;
                    this.tutorial.show(false, true);
                    break;
                case 3:
                    sprText.frameName = 'label_next_line';
                    sprText.x = 0;
                    sprText.y = 150;
                    this.tutorial.show(false, true);
                    break;
                default:
                    this.grid.waitTouch(false, -1, -1);
                    this.tutorialLevel = 0;
                    this.tutorial.hide();
                    this.settings.viewTutorial = false;
                    return;
            }
        };
        PlayState.prototype.onMovementEnd = function() {
            if (this.tutorialLevel == 0)
                return;
            this.hintRect();
        };
        PlayState.prototype.onTouch = function(aMapX, aMapY) {
            if (this.tutorialLevel == 0)
                return;
            if (!this.grid.isWaitTouch()) {
                this.makeTutorial(this.tutorialLevel + 1);
            }
        };
        PlayState.prototype.onCollapse = function(aColor, aCount, aMapX, aMapY) {
            var cScore = 0;
            if (aCount == 3)
                cScore = 10;
            else if (aCount == 4)
                cScore = 15;
            else if (aCount == 5)
                cScore = 30;
            else if (aCount == 6)
                cScore = 50;
            else if (aCount == 7)
                cScore = 100;
            else if (aCount == 8)
                cScore = 125;
            else if (aCount >= 9)
                cScore = 200;
            var score = this.grid.getScore() + cScore;
            this.grid.setScore(score);
            this.grid.reviveText(aMapX, aMapY, '+' + cScore.toString(), 1000);
        };
        PlayState.prototype.updateGameGUI = function() {
            this.barNextLine.scale.y = this.grid.getNextLineProgress();
            var frm = Math.floor(this.grid.getLastChanceProgress() * 9);
            this.checkingTimer.frameName = 'timer_' + frm.toString();
            if (this.levelHideTimer != -1) {
                this.levelHideTimer -= this.grid.deltaTime;
                if (this.levelHideTimer <= 0) {
                    this.levelHideTimer = -1;
                    this.levelUp.hide();
                }
            }
        };
        PlayState.prototype.setGameState = function(aName) {
            if (this._gameStatus == aName)
                return;
            this._gameStatus = aName;
            switch (aName) {
                case 'game':
                    this.guiControls.show();
                    this.guiPause.hide();
                    this.guiEnd.hide();
                    this.fade.hide();
                    this.grid.active = true;
                    break;
                case 'pause':
                    this.guiControls.hide();
                    this.guiPause.show();
                    this.guiEnd.hide();
                    this.fade.show();
                    this.grid.active = false;
                    break;
                case 'end':
                    H812.API.showADS();
                    this.guiControls.hide();
                    this.guiPause.hide();
                    this.guiEnd.show();
                    this.fade.show();
                    this.checkingOver.hide();
                    this.grid.active = false;
                    if (!this.game.sound.mute)
                        this.game.sound.play('lose');
                    break;
            }
        };
        PlayState.prototype.buttonUp = function(aButton) {
            if (!this.game.sound.mute)
                this.game.sound.play('click');
            switch (aButton.name) {
                case 'button_more_games':
                    H812.API.getMoreGames(true);
                    break;
                case 'button_logo':
                    H812.API.getLogo(true);
                    break;
                case 'button_music':
                case 'button_music_top':
                    this.game.sound.mute = !this.game.sound.mute;
                    var frame = aButton.name + (this.game.sound.mute ? '_1' : '_0');
                    aButton.setFrames(frame, frame, frame, frame);
                    break;
                case 'button_reset':
                case 'button_restart':
                    this.transitionTo('PlayState');
                    break;
                case 'button_next':
                    this.transitionTo('PlayState');
                    break;
                case 'button_play':
                case 'button_resume':
                    this.setGameState('game');
                    break;
                case 'button_pause':
                case 'button_pause_top':
                    this.setGameState('pause');
                    break;
                case 'button_levels':
                case 'button_menu':
                    this.transitionTo('MenuState');
                    break;
            }
        };
        PlayState.TILE_WIDTH = 63;
        PlayState.TILE_HEIGHT = 61;
        PlayState.GRID_OFFSET_X = 120.0;
        PlayState.GRID_OFFSET_Y = 16.0;
        PlayState.GRID_WIDTH = 8;
        PlayState.GRID_HEIGHT = 10;
        return PlayState;
    })(H812.HState);
    H812.PlayState = PlayState;
})(H812 || (H812 = {}));
var H812;
(function(H812) {
    var Main = (function(_super) {
        __extends(Main, _super);

        function Main() {
            _super.call(this, 640, 712, Phaser.CANVAS, 'game', null);
            var settings = H812.Settings.makeInstance(this, 'totem_shift');
            settings.debug = false;
            var SpilData = {
                id: '576742227280292480'
            };
            GameAPI.loadAPI(Main.loadAPI, SpilData);
            this.state.add('Boot', H812.Boot, false);
            this.state.add('Preloader', H812.Preloader, false);
            this.state.add('MenuState', H812.MenuState, false);
            this.state.add('PlayState', H812.PlayState, false);
        }
        Main.loadAPI = function(apiInstance) {
            if (window.console != null && window.console != undefined && window.console.log != null && window.console.log != undefined) {
                console.log('GameAPI version ' + apiInstance.version + ' loaded!');
            }
            console.log('API_DISPLAY_SPLASH');
            apiInstance.Branding.displaySplashScreen(Main.runGame);
            H812.API.api = apiInstance;
            H812.API.pauseGame = Main.pauseGame;
            H812.API.resumeGame = Main.resumeGame;
            console.log('API_SETUP');
        };
        Main.runGame = function() {
            var core = H812.Settings.instance();
            core.game.state.start('Boot');
            console.log('API_START_BOOT');
        };
        Main.pauseGame = function() {
            var core = H812.Settings.instance();
            core.game.paused = true;
            console.log('API_PAUSE');
        };
        Main.resumeGame = function() {
            console.log('API_RESUME');
            var core = H812.Settings.instance();
            core.game.paused = false;
        };
        return Main;
    })(Phaser.Game);
    H812.Main = Main;
})(H812 || (H812 = {}));
window.onload = function() {
    var game = new H812.Main();
};